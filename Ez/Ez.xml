<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Ez</name>
    </assembly>
    <members>
        <member name="T:Ez.Collections.CollectionExtensions">
            <summary>
            Extensions for collections.
            </summary>
        </member>
        <member name="M:Ez.Collections.CollectionExtensions.AsReadOnly``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            Converts the <paramref name="collection"/> to <see cref="T:System.Collections.Generic.IReadOnlyCollection`1"/>, if implemented, 
            or create a <see cref="T:System.Collections.Generic.IReadOnlyCollection`1"/> wrapper for the <paramref name="collection"/>.
            </summary>
            <typeparam name="T">Type of elements in <paramref name="collection"/>.</typeparam>
            <param name="collection">The <see cref="T:System.Collections.Generic.ICollection`1"/> to turn into <see cref="T:System.Collections.Generic.IReadOnlyCollection`1"/>.</param>
            <returns>The <see cref="T:System.Collections.Generic.IReadOnlyCollection`1"/> representation of <paramref name="collection"/>.</returns>
        </member>
        <member name="M:Ez.Collections.CollectionExtensions.ShallowCopy``1(``0[])">
            <summary>
            Creates a shallow copy of <paramref name="ts"/>.
            </summary>
            <typeparam name="T">Type of each element in array.</typeparam>
            <param name="ts">The array to create a shallow copy.</param>
            <returns>A shallow copy of <paramref name="ts"/>.</returns>
        </member>
        <member name="M:Ez.Collections.CollectionExtensions.ShallowCopy``2(``1[])">
            <summary>
            Creates a shallow copy of <paramref name="us"/> in other format.
            </summary>
            <typeparam name="T">The type of each element in the shallow array copy.</typeparam>
            <typeparam name="U">The type of each element in the <paramref name="us"/> array.</typeparam>
            <param name="us">The array to make a copy.</param>
            <returns>A shallow copy of <paramref name="us"/> with T type.</returns>
        </member>
        <member name="M:Ez.Collections.CollectionExtensions.ShallowCopy``2(``0[])">
            <summary>
            Creates a shallow copy of <paramref name="us"/> in other format.
            </summary>
            <typeparam name="U">The type of each element in the <paramref name="us"/> array.</typeparam>
            <typeparam name="T">The type of each element in the shallow array copy.</typeparam>
            <param name="us">The array to make a copy.</param>
            <returns>A shallow copy of <paramref name="us"/> with T type.</returns>
        </member>
        <member name="M:Ez.Collections.CollectionExtensions.MinimumArray``1(``0[]@,System.Int32)">
            <summary>
            Resize <paramref name="array"/> to <paramref name="size"/>, or creates a new array, if <paramref name="array"/> is null.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array"></param>
            <param name="size"></param>
        </member>
        <member name="T:Ez.Collections.ConcurrentList`1">
            <summary>
            Represents a thread-safe wrapping for <see cref="T:System.Collections.Generic.IList`1"/>
            </summary>
            <typeparam name="T">Type of elements using in <see cref="T:Ez.Collections.ISynchronizedList`1"/> interface.</typeparam>
        </member>
        <member name="M:Ez.Collections.ConcurrentList`1.#ctor(System.Collections.Generic.IList{`0},System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Ez.Collections.ConcurrentList`1"/> class that wraps a <see cref="T:System.Collections.Generic.IList`1"/> instance and define an instance to be used as synchronize.
            </summary>
            <param name="list">Wrapped instance.</param>
            <param name="sync">Sync instance.</param>
        </member>
        <member name="M:Ez.Collections.ConcurrentList`1.#ctor(System.Collections.Generic.IList{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Ez.Collections.ConcurrentList`1"/> class that wraps a <see cref="T:System.Collections.Generic.IList`1"/> instance.
            </summary>
            <param name="list">Wrapped instance.</param>
        </member>
        <member name="M:Ez.Collections.ConcurrentList`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ez.Collections.ConcurrentList`1"/> class that wraps a new instance of <see cref="T:System.Collections.Generic.List`1"/> class.
            </summary>
        </member>
        <member name="M:Ez.Collections.ConcurrentList`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Ez.Collections.ConcurrentList`1"/> class that wraps a new instance of <see cref="T:System.Collections.Generic.List`1"/> class that contains elements copied from the specified collection.
            </summary>
            <param name="collection">Collection</param>
        </member>
        <member name="P:Ez.Collections.ConcurrentList`1.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <returns>The element at the specified index.</returns>
        </member>
        <member name="P:Ez.Collections.ConcurrentList`1.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:Ez.Collections.ConcurrentList`1"/>.
            </summary>
        </member>
        <member name="P:Ez.Collections.ConcurrentList`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:Ez.Collections.ConcurrentList`1"/> is read-only.
            </summary>
        </member>
        <member name="P:Ez.Collections.ConcurrentList`1.Sync">
            <summary>
            The sync object.
            </summary>
        </member>
        <member name="M:Ez.Collections.ConcurrentList`1.Add(`0)">
            <summary>
            Adds an item to the <see cref="T:Ez.Collections.ConcurrentList`1"/>.
            </summary>
            <param name="item">The object to add to the <see cref="T:Ez.Collections.ConcurrentList`1"/>.</param>
        </member>
        <member name="M:Ez.Collections.ConcurrentList`1.Clear">
            <summary>
            Removes all items from the <see cref="T:Ez.Collections.ConcurrentList`1"/>.
            </summary>
        </member>
        <member name="M:Ez.Collections.ConcurrentList`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:Ez.Collections.ConcurrentList`1"/> to an <see cref="T:System.Array"/>,
            starting at a particular index.
            </summary>
            <param name="array">The one-dimensional Array that is the destination of the elements copied
            from <see cref="T:Ez.Collections.ConcurrentList`1"/>. The <see cref="T:System.Array"/> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.</param>
        </member>
        <member name="M:Ez.Collections.ConcurrentList`1.Insert(System.Int32,`0)">
            <summary>
            Inserts an item to the <see cref="T:Ez.Collections.ConcurrentList`1"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="item"/> should be inserted.</param>
            <param name="item">The object to insert into the <see cref="T:Ez.Collections.ConcurrentList`1"/>.</param>
        </member>
        <member name="M:Ez.Collections.ConcurrentList`1.Remove(`0)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:Ez.Collections.ConcurrentList`1"/>.
            </summary>
            <param name="item">The object to remove from the <see cref="T:Ez.Collections.ConcurrentList`1"/>.</param>
            <returns><see langword="true"/> if item was successfully removed from the 
            <see cref="T:Ez.Collections.ConcurrentList`1"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ez.Collections.ConcurrentList`1.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:Ez.Collections.ConcurrentList`1"/> item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param>
        </member>
        <member name="M:Ez.Collections.ConcurrentList`1.Contains(`0)">
            <summary>
            Determines whether the <see cref="T:Ez.Collections.ConcurrentList`1"/> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:Ez.Collections.ConcurrentList`1"/>.</param>
            <returns><see langword="true"/> if item is found in the <see cref="T:Ez.Collections.ConcurrentList`1"/>; otherwise, 
            <see langword="false"/>.</returns>
        </member>
        <member name="M:Ez.Collections.ConcurrentList`1.IndexOf(`0)">
            <summary>
            Determines the index of a specific item in the <see cref="T:Ez.Collections.ConcurrentList`1"/>.
            </summary>
            <param name="item">The object to locate in the <see cref="T:Ez.Collections.ConcurrentList`1"/>.</param>
            <returns>The index of <paramref name="item"/> if found in the list; otherwise, -1.</returns>
        </member>
        <member name="M:Ez.Collections.ConcurrentList`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1"/> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Ez.Collections.ConcurrentList`1.GetOperationList">
            <summary>
            Create a instance of <see cref="T:Ez.Collections.ConcurrentOperationList`1"/> for this <see cref="T:Ez.Collections.ConcurrentList`1"/>.
            </summary>
            <returns>Instance of <see cref="T:Ez.Collections.ConcurrentOperationList`1"/></returns>
        </member>
        <member name="T:Ez.Collections.ConcurrentOperationList`1">
            <summary>
            A wrapper for the list that synchronizes using a "Sync" object until it is disposed.
            </summary>
            <typeparam name="T">Type of elements using in <see cref="T:Ez.Collections.ISynchronizedList`1"/> interface.</typeparam>
        </member>
        <member name="M:Ez.Collections.ConcurrentOperationList`1.#ctor(System.Collections.Generic.IList{`0},System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Ez.Collections.ConcurrentOperationList`1"/> class that wraps a <see cref="T:System.Collections.Generic.IList`1"/> instance and define a <see cref="P:Ez.Collections.ConcurrentOperationList`1.Sync"/> object.
            </summary>
            <param name="list">Wrapped instance.</param>
            <param name="sync">Sync instance.</param>
        </member>
        <member name="M:Ez.Collections.ConcurrentOperationList`1.Finalize">
            <summary>
            Destroys a instance of the <see cref="T:Ez.Collections.ConcurrentOperationList`1"/> class.
            </summary>
        </member>
        <member name="P:Ez.Collections.ConcurrentOperationList`1.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <returns>The element at the specified index.</returns>
        </member>
        <member name="P:Ez.Collections.ConcurrentOperationList`1.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:Ez.Collections.ConcurrentOperationList`1"/>.
            </summary>
        </member>
        <member name="P:Ez.Collections.ConcurrentOperationList`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:Ez.Collections.ConcurrentOperationList`1"/> is read-only.
            </summary>
        </member>
        <member name="P:Ez.Collections.ConcurrentOperationList`1.Sync">
            <summary>
            The sync object.
            </summary>
        </member>
        <member name="M:Ez.Collections.ConcurrentOperationList`1.Add(`0)">
            <summary>
            Adds an item to the <see cref="T:Ez.Collections.ConcurrentOperationList`1"/>.
            </summary>
            <param name="item">The object to add to the <see cref="T:Ez.Collections.ConcurrentOperationList`1"/>.</param>
        </member>
        <member name="M:Ez.Collections.ConcurrentOperationList`1.Clear">
            <summary>
            Removes all items from the <see cref="T:Ez.Collections.ConcurrentOperationList`1"/>.
            </summary>
        </member>
        <member name="M:Ez.Collections.ConcurrentOperationList`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:Ez.Collections.ConcurrentOperationList`1"/> to an <see cref="T:System.Array"/>,
            starting at a particular index.
            </summary>
            <param name="array">The one-dimensional Array that is the destination of the elements copied
            from <see cref="T:Ez.Collections.ConcurrentOperationList`1"/>. The <see cref="T:System.Array"/> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.</param>
        </member>
        <member name="M:Ez.Collections.ConcurrentOperationList`1.Insert(System.Int32,`0)">
            <summary>
            Inserts an item to the <see cref="T:Ez.Collections.ConcurrentOperationList`1"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="item"/> should be inserted.</param>
            <param name="item">The object to insert into the <see cref="T:Ez.Collections.ConcurrentOperationList`1"/>.</param>
        </member>
        <member name="M:Ez.Collections.ConcurrentOperationList`1.Remove(`0)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:Ez.Collections.ConcurrentOperationList`1"/>.
            </summary>
            <param name="item">The object to remove from the <see cref="T:Ez.Collections.ConcurrentOperationList`1"/>.</param>
            <returns><see langword="true"/> if item was successfully removed from the 
            <see cref="T:Ez.Collections.ConcurrentOperationList`1"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ez.Collections.ConcurrentOperationList`1.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:Ez.Collections.ConcurrentOperationList`1"/> item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param>
        </member>
        <member name="M:Ez.Collections.ConcurrentOperationList`1.Dispose">
            <summary>
            Releases the sync object.
            </summary>
        </member>
        <member name="M:Ez.Collections.ConcurrentOperationList`1.Contains(`0)">
            <summary>
            Determines whether the <see cref="T:Ez.Collections.ConcurrentOperationList`1"/> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:Ez.Collections.ConcurrentOperationList`1"/>.</param>
            <returns><see langword="true"/> if item is found in the <see cref="T:Ez.Collections.ConcurrentOperationList`1"/>; otherwise, 
            <see langword="false"/>.</returns>
        </member>
        <member name="M:Ez.Collections.ConcurrentOperationList`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1"/> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Ez.Collections.ConcurrentOperationList`1.IndexOf(`0)">
            <summary>
            Determines the index of a specific item in the <see cref="T:Ez.Collections.ConcurrentOperationList`1"/>.
            </summary>
            <param name="item">The object to locate in the <see cref="T:Ez.Collections.ConcurrentOperationList`1"/>.</param>
            <returns>The index of <paramref name="item"/> if found in the list; otherwise, -1.</returns>
        </member>
        <member name="T:Ez.Collections.DiscontiguousList`1">
            <summary>
            A discontinuous list of values.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Ez.Collections.DiscontiguousList`1.DefragAction">
            <summary>
            Encapsulates a method that remaps an old index to a new one .
            </summary>
            <param name="olderIndex"></param>
            <param name="newerIndex"></param>
        </member>
        <member name="M:Ez.Collections.DiscontiguousList`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ez.Collections.DiscontiguousList`1"/> class.
            </summary>
        </member>
        <member name="M:Ez.Collections.DiscontiguousList`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Ez.Collections.DiscontiguousList`1"/> class that 
            contains elements copied from the specified collection.
            </summary>
            <param name="collection">The collection whose elements are copied to the new list.</param>
        </member>
        <member name="P:Ez.Collections.DiscontiguousList`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:Ez.Collections.DiscontiguousList`1"/> is read-only.
            </summary>
        </member>
        <member name="P:Ez.Collections.DiscontiguousList`1.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:Ez.Collections.DiscontiguousList`1"/>.
            </summary>
        </member>
        <member name="P:Ez.Collections.DiscontiguousList`1.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Ez.Collections.DiscontiguousList`1.Add(`0@)">
            <summary>
            Adds an item to the <see cref="T:Ez.Collections.DiscontiguousList`1"/>.
            </summary>
            <param name="item">The objejct to add to the <see cref="T:Ez.Collections.DiscontiguousList`1"/>.</param>
            <returns>The index of <paramref name="item"/> item in the list.</returns>
        </member>
        <member name="M:Ez.Collections.DiscontiguousList`1.Clear">
            <summary>
            Removes all items form the <see cref="T:Ez.Collections.DiscontiguousList`1"/>.
            </summary>
        </member>
        <member name="M:Ez.Collections.DiscontiguousList`1.Contains(`0)">
            <summary>
            Determines wheter the <see cref="T:Ez.Collections.DiscontiguousList`1"/> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:Ez.Collections.DiscontiguousList`1"/>.</param>
            <returns></returns>
        </member>
        <member name="M:Ez.Collections.DiscontiguousList`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:Ez.Collections.DiscontiguousList`1"/> to an <see cref="T:System.Array"/>,
            starting at a particular index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the 
            elements copied from <see cref="T:Ez.Collections.DiscontiguousList`1"/>.</param>
            <param name="arrayIndex"></param>
        </member>
        <member name="M:Ez.Collections.DiscontiguousList`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Ez.Collections.DiscontiguousList`1.IndexOf(`0)">
            <summary>
            Determines the index of a specific item in the <see cref="T:Ez.Collections.DiscontiguousList`1"/>.
            </summary>
            <param name="item">The object to locate in the <see cref="T:Ez.Collections.DiscontiguousList`1"/>.</param>
            <returns>The index of <paramref name="item"/> if found in the list; otherwise, -1.</returns>
        </member>
        <member name="M:Ez.Collections.DiscontiguousList`1.Insert(System.Int32,`0)">
            <summary>
            Not implemented.
            </summary>
        </member>
        <member name="M:Ez.Collections.DiscontiguousList`1.Remove(`0)">
            <summary>
            Removes the first occurence of a specific object from the <see cref="T:Ez.Collections.DiscontiguousList`1"/>.
            </summary>
            <param name="item">The object to remove from the <see cref="T:Ez.Collections.DiscontiguousList`1"/>.</param>
            <returns><see langword="true"/> if <paramref name="item"/> was successfully removed 
            from the <see cref="T:Ez.Collections.DiscontiguousList`1"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ez.Collections.DiscontiguousList`1.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:Ez.Collections.DiscontiguousList`1"/> item at the specified index.
            </summary>
            <param name="index">The zero-bsed index of the item to remove.</param>
        </member>
        <member name="M:Ez.Collections.DiscontiguousList`1.Defrag(Ez.Collections.DiscontiguousList{`0}.DefragAction)">
            <summary>
            Degragment the <see cref="T:Ez.Collections.DiscontiguousList`1"/>.
            </summary>
            <param name="action">Function used to remap indexes externally.</param>
        </member>
        <member name="T:Ez.Collections.ISelfIndexedDictionary`2">
            <summary>
            Describes a dictionary that can auto-index a type that auto-indexes.
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="T:Ez.Collections.ISelfIndexedElement`1">
            <summary>
            An element that can be auto indexing.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Ez.Collections.ISelfIndexedElement`1.Key">
            <summary>
            The index for a <see cref="T:Ez.Collections.ISelfIndexedElement`1"/>.
            </summary>
        </member>
        <member name="E:Ez.Collections.ISelfIndexedElement`1.KeyPropertyChange">
            <summary>
            Action(T oldKey)
            </summary>
        </member>
        <member name="T:Ez.Collections.ISynchronizable">
            <summary>
            Interface that specifies that an object of the class can be synced using the object provided by Sync.
            </summary>
        </member>
        <member name="P:Ez.Collections.ISynchronizable.Sync">
            <summary>
            Object used for sync.
            </summary>
        </member>
        <member name="T:Ez.Collections.ISynchronizedList`1">
            <summary>
            A List that implements synchronization using ISynchronizable interface.
            </summary>
            <typeparam name="T">Type of elements using in <see cref="T:System.Collections.Generic.IList`1"/> interface.</typeparam>
        </member>
        <member name="T:Ez.Collections.MultiValueDicionary`2">
            <summary>
            Represents a colleciton of keys and values that each key can have more than one value.
            </summary>
            <typeparam name="TKey">The type of the keys in the dictionary.</typeparam>
            <typeparam name="TValue">The type of the values in the dictionary.</typeparam>
        </member>
        <member name="F:Ez.Collections.MultiValueDicionary`2.NewCollectionFactory">
            <summary>
            The function to construct a new <see cref="T:System.Collections.Generic.ICollection`1"/>
            </summary>
        </member>
        <member name="M:Ez.Collections.MultiValueDicionary`2.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Ez.Collections.MultiValueDicionary`2"/> class that is empty.
            </summary>
        </member>
        <member name="M:Ez.Collections.MultiValueDicionary`2.#ctor(System.Collections.Generic.IDictionary{`0,System.Collections.Generic.ICollection{`1}},System.Func{System.Collections.Generic.ICollection{`1}})">
            <summary>
            Initializes a new instance of <see cref="T:Ez.Collections.MultiValueDicionary`2"/> class that wraps a
            <see cref="T:System.Collections.Generic.IDictionary`2"/> dictionary and with a custom function to create a sub-collection.
            </summary>
            <param name="dictionary">The dictionary to wraps.</param>
            <param name="newCollectionFactory">A delegate to create a new sub-collection used in
            <see cref="T:Ez.Collections.MultiValueDicionary`2"/></param>
        </member>
        <member name="P:Ez.Collections.MultiValueDicionary`2.Item(`0)">
            <summary>
            Gets the values associated with the specified key.
            </summary>
            <param name="key">The key of the values to get.</param>
            <returns>The value associated with the specified key. If the specified key is not found, 
            a get operation throws a <see cref="T:System.Collections.Generic.KeyNotFoundException"/>.</returns>
        </member>
        <member name="P:Ez.Collections.MultiValueDicionary`2.Keys">
            <summary>
            Gets an enumerable collection that contains the keys in the read-only dictionary.
            </summary>
        </member>
        <member name="P:Ez.Collections.MultiValueDicionary`2.Values">
            <summary>
            Gets an enumerable collection that contains the values in the read-only multi-value dictionary.
            </summary>
        </member>
        <member name="P:Ez.Collections.MultiValueDicionary`2.Count">
            <summary>
             Gets the number of elements in the collection.
            </summary>
        </member>
        <member name="P:Ez.Collections.MultiValueDicionary`2.AllElements">
            <summary>
            Get an enumerable collection that contains all the values in the read-only multi-value dictionary.
            </summary>
        </member>
        <member name="M:Ez.Collections.MultiValueDicionary`2.Add(`0,`1)">
            <summary>
            Adds the specified key and value to the dictionary.
            </summary>
            <param name="key">The key of the element to add.</param>
            <param name="value">The value of the element to add. The value can be null for reference types.</param>
        </member>
        <member name="M:Ez.Collections.MultiValueDicionary`2.AddRange(`0,System.Collections.Generic.IEnumerable{`1})">
            <summary>
            Adds the specified key and multiple values to the dictionary.
            </summary>
            <param name="key">The key of elements to add.</param>
            <param name="values">The values of elements to add.</param>
        </member>
        <member name="M:Ez.Collections.MultiValueDicionary`2.Remove(`0,`1)">
            <summary>
            Removes the value with the specified key from the <see cref="T:Ez.Collections.MultiValueDicionary`2"/>.
            </summary>
            <param name="key">The key of the element to remove.</param>
            <param name="value">The value of the element to remove.</param>
            <returns><see langword="true"/> if the element is successfully found and removed; otherwise, 
            <see langword="false"/>. This method returns <see langword="false"/> if <paramref name="key"/> 
            is not found in the <see cref="T:Ez.Collections.MultiValueDicionary`2"/>.</returns>
        </member>
        <member name="M:Ez.Collections.MultiValueDicionary`2.RemoveKey(`0)">
            <summary>
            Removes all values with the specified <paramref name="key"/> from the 
            <see cref="T:Ez.Collections.MultiValueDicionary`2"/>.
            </summary>
            <param name="key">The key of the elements to remove.</param>
            <returns><see langword="true"/> if the element is successfully found and removed; otherwise, 
            <see langword="false"/>. This method returns <see langword="false"/> if <paramref name="key"/> 
            is not found in the <see cref="T:Ez.Collections.MultiValueDicionary`2"/>.</returns>
        </member>
        <member name="M:Ez.Collections.MultiValueDicionary`2.Contains(`0,`1)">
            <summary>
            Determines wheter the <see cref="T:Ez.Collections.MultiValueDicionary`2"/> contains 
            specific linked <paramref name="key"/> and <paramref name="value"/>.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Ez.Collections.MultiValueDicionary`2.Clear">
            <summary>
            Removes all items from the <see cref="T:Ez.Collections.MultiValueDicionary`2"/>.
            </summary>
        </member>
        <member name="M:Ez.Collections.MultiValueDicionary`2.ContainsKey(`0)">
            <summary>
            Determines whether the <see cref="T:Ez.Collections.MultiValueDicionary`2"/> contains the specified key.
            </summary>
            <param name="key">The key to locate in the <see cref="T:Ez.Collections.MultiValueDicionary`2"/>.</param>
            <returns><see langword="true"/> if the <see cref="T:Ez.Collections.MultiValueDicionary`2"/>
            contains an element with the specified key; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ez.Collections.MultiValueDicionary`2.ContainsValue(`1)">
            <summary>
            Determines wheter the <see cref="T:Ez.Collections.MultiValueDicionary`2"/> contains a specific value.
            </summary>
            <param name="value">The value to locate in the <see cref="T:Ez.Collections.MultiValueDicionary`2"/>.
            The value can be null for reference types.</param>
            <returns><see langword="true"/> if the <see cref="T:Ez.Collections.MultiValueDicionary`2"/>
            contains an element with the specified value; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ez.Collections.MultiValueDicionary`2.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:Ez.Collections.MultiValueDicionary`2"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ez.Collections.MultiValueDicionary`2.TryGetValue(`0,System.Collections.Generic.IReadOnlyCollection{`1}@)">
            <summary>
            Gets values associated with the specified key.
            </summary>
            <param name="key">The key of the values to get.</param>
            <param name="value">When this method returns, contains the value associated withthe specified key,
            if the key is foumd; otherwise, null.</param>
            <returns><see langword="true"/> if the <see cref="T:Ez.Collections.MultiValueDicionary`2"/> contains an
            element with the specified key; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="T:Ez.Collections.Pools.IObjectPoolAssistant`2">
            <summary>
            An interface to implement a assistant used by an <see cref="T:Ez.Collections.Pools.ObjectPool`2"/> to evaluate, create, register an object and decide when to clean objects from the pool.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TSpecs"></typeparam>
        </member>
        <member name="M:Ez.Collections.Pools.IObjectPoolAssistant`2.Evaluate(`0@,`1@,System.Int32)">
            <summary>
            Evaluates whether a <paramref name="item"/> has <paramref name="specs"/> specifications.
            </summary>
            <param name="item">The item to evaluates.</param>
            <param name="specs">The specifications used to evaluate.</param>
            <param name="currentTolerance">Current tolerance, to avoid false negatives put 0.</param>
            <returns><see langword="false"/>, if the item does not meet the specifications or is a false 
            negative based on internal logic using the current tolerance as the main factor, otherwise <see langword="true"/>.</returns>
        </member>
        <member name="M:Ez.Collections.Pools.IObjectPoolAssistant`2.Create(`1@)">
            <summary>
            Creates a new T item that <paramref name="specs"/> describes.
            </summary>
            <param name="specs">The specifications for creating.</param>
            <returns>A new T item.</returns>
        </member>
        <member name="M:Ez.Collections.Pools.IObjectPoolAssistant`2.RegisterReturn(`0@)">
            <summary>
            Registers an <paramref name="item"/> returning to the <see cref="T:Ez.Collections.Pools.ObjectPool`2"/>.
            </summary>
            <param name="item">An item to register.</param>
        </member>
        <member name="M:Ez.Collections.Pools.IObjectPoolAssistant`2.RegisterGet(`0@)">
            <summary>
            Registers an <paramref name="item"/> leaving the <see cref="T:Ez.Collections.Pools.ObjectPool`2"/>.
            </summary>
            <param name="item">An item to register.</param>
        </member>
        <member name="M:Ez.Collections.Pools.IObjectPoolAssistant`2.IsClear">
            <summary>
            Checks if the pool is clean enough to remain uncleaned.
            </summary>
            <returns><see langword="true"/> if it is clean enough, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="T:Ez.Collections.Pools.ObjectPool`2">
            <summary>
            A pool of objects.
            </summary>
            <typeparam name="T">T object</typeparam>
            <typeparam name="TSpecs">Wrapper of T object</typeparam>
        </member>
        <member name="M:Ez.Collections.Pools.ObjectPool`2.#ctor(Ez.Collections.Pools.IObjectPoolAssistant{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Ez.Collections.Pools.ObjectPool`2"/> class that is empty.
            </summary>
            <param name="assistant"></param>
        </member>
        <member name="P:Ez.Collections.Pools.ObjectPool`2.Count">
            <summary>
            Number of elements in the <see cref="T:Ez.Collections.Pools.ObjectPool`2"/>.
            </summary>
        </member>
        <member name="M:Ez.Collections.Pools.ObjectPool`2.Get(`1,System.Int32)">
            <summary>
            Get a wrapper with a T object.
            </summary>
            <param name="specs">Specifications for the object taken from the pool.</param>
            <param name="tolerance">Maximum number of attempts to acquire an object with specifications.</param>
            <returns>A <see cref="T:Ez.Collections.Pools.PooledObject`1"/> object that the <see cref="P:Ez.Collections.Pools.PooledObject`1.Value"/> is validated with <paramref name="specs"/>.</returns>
        </member>
        <member name="M:Ez.Collections.Pools.ObjectPool`2.GetT(`1,System.Int32)">
            <summary>
            Get a T object.
            </summary>
            <param name="specs">Specifications for the object taken from the pool.</param>
            <param name="tolerance">Number of attempts to get an object corresponding to <paramref name="specs"/>.</param>
            <returns>A T object that is validated with <paramref name="specs"/>.</returns>
        </member>
        <member name="M:Ez.Collections.Pools.ObjectPool`2.TryGet(Ez.Collections.Pools.PooledObject{`0}@,`1@,System.Int32)">
            <summary>
            Try get a wrapper with a T object.
            </summary>
            <param name="pooledObject">A wrapper with a T object.</param>
            <param name="specs">Specifications for the object taken from the pool.</param>
            <param name="tolerance">Number of attempts to get an object corresponding to <paramref name="specs"/>.</param>
            <returns>
            If tolerance &lt; 0, or
             failure <paramref name="tolerance"/> times to find an object whose <paramref name="specs"/> are valid,
             then returns <see langword="false"/> and <paramref name="pooledObject"/> = <see langword="null"/>,
            otherwise, returns <see langword="true"/> and a <see cref="T:Ez.Collections.Pools.PooledObject`1"/> with a valid <see cref="P:Ez.Collections.Pools.PooledObject`1.Value"/> 
            in <paramref name="pooledObject"/>.
            </returns>
        </member>
        <member name="M:Ez.Collections.Pools.ObjectPool`2.TryGetT(`0@,`1@,System.Int32@)">
            <summary>
            Try get a T object.
            </summary>
            <param name="value">When this method returns <see langword="true"/>, contains the value that had got.</param>
            <param name="specs">Specifications for the object taken from the pool.</param>
            <param name="tolerance">Number of attempts to get an object corresponding to <paramref name="specs"/>.</param>
            <returns>If tolerance &lt; 0, or
             failure <paramref name="tolerance"/> times to find an object whose <paramref name="specs"/> are valid,
             then returns <see langword="false"/> and <paramref name="value"/> = <see langword="default"/>,
            otherwise, returns <see langword="true"/> and a valid <paramref name="value"/>.</returns>
        </member>
        <member name="M:Ez.Collections.Pools.ObjectPool`2.Return(`0@)">
            <summary>
            Only return a T object.
            </summary>
            <param name="item">Value saved in pool.</param>
        </member>
        <member name="M:Ez.Collections.Pools.ObjectPool`2.Return(Ez.Collections.Pools.PooledObject{`0,`1}@)">
            <summary>
            Only return a wrapper for a T object.
            </summary>
            <param name="wrapper">Wrapper of a T object.</param>
        </member>
        <member name="M:Ez.Collections.Pools.ObjectPool`2.Clear">
            <summary>
            Removes and disposes all of <see cref="T:Ez.Collections.Pools.PooledObject`1"/> and your values in this <see cref="T:Ez.Collections.Pools.ObjectPool`2"/>.
            </summary>
        </member>
        <member name="M:Ez.Collections.Pools.ObjectPool`2.ClearWrappers">
            <summary>
            Removes and disposes all of unused <see cref="T:Ez.Collections.Pools.PooledObject`1"/> in this <see cref="T:Ez.Collections.Pools.ObjectPool`2"/>
            </summary>
        </member>
        <member name="T:Ez.Collections.Pools.ObjectPoolAssistant`2">
            <summary>
            An default implementation of <see cref="T:Ez.Collections.Pools.IObjectPoolAssistant`2"/> that uses
            delegates for <see cref="M:Ez.Collections.Pools.ObjectPoolAssistant`2.Create(`1@)"/> and <see cref="M:Ez.Collections.Pools.ObjectPoolAssistant`2.Evaluate(`0@,`1@,System.Int32)"/>.
            </summary>
            <typeparam name="T">The type that assistant evaluates and creates.</typeparam>
            <typeparam name="TSpecs">The type of data used to evaluate an item.</typeparam>
        </member>
        <member name="T:Ez.Collections.Pools.ObjectPoolAssistant`2.CreateFunction">
            <summary>
            A delegate that wraps a create function based on a TSpecs value.
            </summary>
            <param name="value">A value used to describe how the created item is.</param>
            <returns>A new T item.</returns>
        </member>
        <member name="T:Ez.Collections.Pools.ObjectPoolAssistant`2.EvaluateFunction">
            <summary>
            
            </summary>
            <param name="item"></param>
            <param name="specs"></param>
            <param name="currentTolerance"></param>
            <returns></returns>
        </member>
        <member name="M:Ez.Collections.Pools.ObjectPoolAssistant`2.#ctor(Ez.Collections.Pools.ObjectPoolAssistant{`0,`1}.CreateFunction,Ez.Collections.Pools.ObjectPoolAssistant{`0,`1}.EvaluateFunction,System.UInt32)">
            <summary>
            Initializes a new instance of <see cref="T:Ez.Collections.Pools.ObjectPoolAssistant`2"/> thats wraps a create function and evaluate function.
            </summary>
            <param name="create">The create function of a T item.</param>
            <param name="evaluate">The evaluate function of a T item.</param>
            <param name="clearCount">The number of elements counted for <see cref="M:Ez.Collections.Pools.ObjectPoolAssistant`2.IsClear"/> returns <see langword="false"/>.</param>
        </member>
        <member name="M:Ez.Collections.Pools.ObjectPoolAssistant`2.Create(`1@)">
            <summary>
            Creates a new T item that <paramref name="specs"/> describes.
            </summary>
            <param name="specs">The specifications for creating.</param>
            <returns>A new T item.</returns>
        </member>
        <member name="M:Ez.Collections.Pools.ObjectPoolAssistant`2.Evaluate(`0@,`1@,System.Int32)">
            <summary>
            Evaluates whether an <paramref name="item"/> has <paramref name="specs"/> specifications.
            </summary>
            <param name="item">The item to evaluates.</param>
            <param name="specs">The specifications used to evaluate.</param>
            <param name="currentTolerance">Current tolerance, to avoid false negatives put 0.</param>
            <returns><see langword="false"/>, if the item does not meet the specifications or is a false 
            negative based on internal logic using the current tolerance as the main factor, otherwise <see langword="true"/>.</returns>
        </member>
        <member name="M:Ez.Collections.Pools.ObjectPoolAssistant`2.IsClear">
            <summary>
            Checks if the pool is clean enough to remain uncleaned.
            </summary>
            <returns><see langword="true"/> if it is clean enough, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Ez.Collections.Pools.ObjectPoolAssistant`2.RegisterReturn(`0@)">
            <summary>
            Registers an <paramref name="item"/> returning to the <see cref="T:Ez.Collections.Pools.ObjectPool`2"/>.
            </summary>
            <param name="item">An item to register.</param>
        </member>
        <member name="M:Ez.Collections.Pools.ObjectPoolAssistant`2.RegisterGet(`0@)">
            <summary>
            Registers an <paramref name="item"/> leaving the <see cref="T:Ez.Collections.Pools.ObjectPool`2"/>.
            </summary>
            <param name="item">An item to register.</param>
        </member>
        <member name="T:Ez.Collections.Pools.PooledObject`2">
            <summary>
            An object that contains a value and is saved in an object pool.
            </summary>
            <typeparam name="T">Type of value into pool.</typeparam>
            <typeparam name="TSpecs">Type of TSpec in <see cref="P:Ez.Collections.Pools.PooledObject`2.Source"/>.</typeparam>
        </member>
        <member name="P:Ez.Collections.Pools.PooledObject`2.Source">
            <summary>
            The source <see cref="T:Ez.Collections.Pools.ObjectPool`2"/> of this <see cref="T:Ez.Collections.Pools.PooledObject`2"/>.
            </summary>
        </member>
        <member name="T:Ez.Collections.Pools.PooledObject`1">
            <summary>
            An object that contains a value and is saved in an object pool.
            </summary>
            <typeparam name="T">Value type</typeparam>
        </member>
        <member name="M:Ez.Collections.Pools.PooledObject`1.Finalize">
            <summary>
            Destroys this instance of <see cref="T:Ez.Collections.Pools.PooledObject`1"/>.
            </summary>
        </member>
        <member name="P:Ez.Collections.Pools.PooledObject`1.IsTemporaryUse">
            <summary>
            Flag indicating whether the value should be returned to the pool(true) when discarded with Dispose or not(false).
            </summary>
        </member>
        <member name="P:Ez.Collections.Pools.PooledObject`1.Value">
            <summary>
            Gets
            </summary>
        </member>
        <member name="M:Ez.Collections.Pools.PooledObject`1.Reset">
            <summary>
            Reset the <see cref="P:Ez.Collections.Pools.PooledObject`1.Value"/> if it implements IResettable.
            </summary>
        </member>
        <member name="M:Ez.Collections.Pools.PooledObject`1.Set">
            <summary>
            Set the <see cref="P:Ez.Collections.Pools.PooledObject`1.Value"/> if it implements IResettable.
            </summary>
        </member>
        <member name="M:Ez.Collections.Pools.PooledObject`1.Dispose">
            <summary>
            Releases
            </summary>
        </member>
        <member name="M:Ez.Collections.Pools.PooledObject`1.Dispose(System.Boolean)">
            <summary>
            Disposes the <see cref="T:Ez.Collections.Pools.PooledObject`1"/>.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="T:Ez.Collections.ReadOnlyUnsafeList`1">
            <summary>
            Represents a strongly typed unsafe read-only list that can be accessed by index.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Ez.Collections.ReadOnlyUnsafeList`1.#ctor(System.IntPtr,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Ez.Collections.ReadOnlyUnsafeList`1"/> class that 
            uses a specific fixed area of the memory.
            </summary>
            <param name="ptr">Pointer to the fixed memory.</param>
            <param name="count">Number of T elements in the <see cref="T:Ez.Collections.ReadOnlyUnsafeList`1"/>.</param>
        </member>
        <member name="P:Ez.Collections.ReadOnlyUnsafeList`1.Item(System.Int32)">
            <summary>
            Gets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get.</param>
            <returns>The element of the specified index.</returns>
        </member>
        <member name="P:Ez.Collections.ReadOnlyUnsafeList`1.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:Ez.Collections.ReadOnlyUnsafeList`1"/>.
            </summary>
        </member>
        <member name="M:Ez.Collections.ReadOnlyUnsafeList`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:Ez.Collections.ReadOnlyUnsafeList`1"/>.
            </summary>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerator`1"/> for the <see cref="T:Ez.Collections.ReadOnlyUnsafeList`1"/>.</returns>
        </member>
        <member name="T:Ez.Collections.SafeEnumerator`1">
            <summary>
            A wrapper that makes an enumerator secure using a synchronization object.
            </summary>
            <typeparam name="T">The type of objects to enumerate.</typeparam>
        </member>
        <member name="M:Ez.Collections.SafeEnumerator`1.#ctor(System.Collections.Generic.IEnumerator{`0},System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Ez.Collections.SafeEnumerator`1"/> class that 
            contains an <see cref="T:System.Collections.Generic.IEnumerator`1"/> and a sync object.
            </summary>
            <param name="inner">Wrapped instance.</param>
            <param name="sync">Sync instance.</param>
        </member>
        <member name="M:Ez.Collections.SafeEnumerator`1.Finalize">
            <summary>
            Destroys a instance of <see cref="T:Ez.Collections.SafeEnumerator`1"/> class.
            </summary>
        </member>
        <member name="P:Ez.Collections.SafeEnumerator`1.Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
        </member>
        <member name="P:Ez.Collections.SafeEnumerator`1.Sync">
            <summary>
            Gets the sync object.
            </summary>
        </member>
        <member name="M:Ez.Collections.SafeEnumerator`1.Dispose">
            <summary>
            Dispose a instance of <see cref="T:Ez.Collections.SafeEnumerator`1"/> class and release the <see cref="P:Ez.Collections.SafeEnumerator`1.Sync"/> object.
            </summary>
        </member>
        <member name="M:Ez.Collections.SafeEnumerator`1.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns><see langword="true"/> if the enumerator was successfully advanced to 
            the next element; <see langword="false"/> if the enumerator has passed the end 
            of the collection.</returns>
        </member>
        <member name="M:Ez.Collections.SafeEnumerator`1.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="T:Ez.Collections.SelfIndexedDictionary`2">
            <summary>
            A dictionary with elements that self-index through a <typeparamref name="TKey"/> Key property.
            </summary>
            <typeparam name="TKey">The type of the keys in the dictionary.</typeparam>
            <typeparam name="TValue">The type of the values in the dictionary.</typeparam>
        </member>
        <member name="M:Ez.Collections.SelfIndexedDictionary`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ez.Collections.SelfIndexedDictionary`2"/> class that is empty.
            </summary>
        </member>
        <member name="M:Ez.Collections.SelfIndexedDictionary`2.#ctor(System.Collections.Generic.IEnumerable{`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Ez.Collections.SelfIndexedDictionary`2"/> class that contains elements copied from the specified collection.
            </summary>
            <param name="collection">The collection whose elements are copied to the new dictionary.</param>
        </member>
        <member name="M:Ez.Collections.SelfIndexedDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Ez.Collections.SelfIndexedDictionary`2"/> class that wraps the <paramref name="inner"/> dictionary.
            </summary>
            <param name="inner">The dictionary to wrap.</param>
        </member>
        <member name="P:Ez.Collections.SelfIndexedDictionary`2.Item(`0)">
            <summary>
            Gets the value associated with the specified <paramref name="key"/>.
            </summary>
            <param name="key">The key of the value to get.</param>
            <returns>The value associated with the <paramref name="key"/>.</returns>
        </member>
        <member name="P:Ez.Collections.SelfIndexedDictionary`2.Keys">
            <summary>
            Gets a collection containing the keys in the <see cref="T:Ez.Collections.SelfIndexedDictionary`2"/>.
            </summary>
        </member>
        <member name="P:Ez.Collections.SelfIndexedDictionary`2.Values">
            <summary>
            Gets a collection containing the values in the <see cref="T:Ez.Collections.SelfIndexedDictionary`2"/>.
            </summary>
        </member>
        <member name="P:Ez.Collections.SelfIndexedDictionary`2.Count">
            <summary>
            Gets the number of key/value pairs contained in the <see cref="T:Ez.Collections.SelfIndexedDictionary`2"/>.
            </summary>
        </member>
        <member name="P:Ez.Collections.SelfIndexedDictionary`2.IsReadOnly">
            <summary>
            Gets a value that indicates whether the <see cref="T:Ez.Collections.SelfIndexedDictionary`2"/> is read-only.
            </summary>
        </member>
        <member name="M:Ez.Collections.SelfIndexedDictionary`2.Add(`1)">
            <summary>
            Adds an item to the <see cref="T:Ez.Collections.SelfIndexedDictionary`2"/>.
            </summary>
            <param name="item">The object to add to the <see cref="T:Ez.Collections.SelfIndexedDictionary`2"/>.</param>
        </member>
        <member name="M:Ez.Collections.SelfIndexedDictionary`2.Clear">
            <summary>
            Removes all items from the <see cref="T:Ez.Collections.SelfIndexedDictionary`2"/>.
            </summary>
        </member>
        <member name="M:Ez.Collections.SelfIndexedDictionary`2.Contains(`1)">
            <summary>
            Determines whether the <see cref="T:Ez.Collections.SelfIndexedDictionary`2"/> contains a specific value.
            </summary>
            <param name="item"></param>
            <returns><see langword="true"/> if item is found in the <see cref="T:Ez.Collections.SelfIndexedDictionary`2"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ez.Collections.SelfIndexedDictionary`2.ContainsKey(`0)">
            <summary>
            Determines whether the <see cref="T:Ez.Collections.SelfIndexedDictionary`2"/> contains an element with the specified <paramref name="key"/>.
            </summary>
            <param name="key">The key to locate in the <see cref="T:Ez.Collections.SelfIndexedDictionary`2"/></param>
            <returns><see langword="true"/> if the <see cref="T:Ez.Collections.SelfIndexedDictionary`2"/> contains an element with the <paramref name="key"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ez.Collections.SelfIndexedDictionary`2.CopyTo(`1[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:Ez.Collections.SelfIndexedDictionary`2"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from 
            <see cref="T:Ez.Collections.SelfIndexedDictionary`2"/>. The <see cref="T:System.Array"/> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.</param>
        </member>
        <member name="M:Ez.Collections.SelfIndexedDictionary`2.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ez.Collections.SelfIndexedDictionary`2.Remove(`0)">
            <summary>
            Removes the element with the specified key from the <see cref="T:Ez.Collections.SelfIndexedDictionary`2"/>.
            </summary>
            <param name="key">The key of the element to remove.</param>
            <returns><see langword="true"/> if the element is successfully removed; otherwise, <see langword="false"/>. 
            This method also returns <see langword="false"/> if key was not found in the original
            <see cref="T:Ez.Collections.SelfIndexedDictionary`2"/>.</returns>
        </member>
        <member name="M:Ez.Collections.SelfIndexedDictionary`2.Remove(`1)">
            <summary>
            Removes the element with <see cref="P:Ez.Collections.ISelfIndexedElement`1.Key"/> from the <see cref="T:Ez.Collections.SelfIndexedDictionary`2"/>.
            </summary>
            <param name="item">The item that contains the key to remove.</param>
            <returns><see langword="true"/> if the element is successfully removed; otherwise, <see langword="false"/>. 
            This method also returns <see langword="false"/> if key was not found in the original
            <see cref="T:Ez.Collections.SelfIndexedDictionary`2"/>.</returns>
        </member>
        <member name="M:Ez.Collections.SelfIndexedDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="key">The key whose value to get.</param>
            <param name="value">When this method returns, the value associated with the specified key, 
            if the key is found; otherwise, the default value for the type of the <paramref name="value"/> 
            parameter. This parameter is passed uninitialized.</param>
            <returns><see langword="true"/> if the object that implements <see cref="T:Ez.Collections.SelfIndexedDictionary`2"/> 
            contains an element with the specified key; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="T:Ez.EzException">
            <summary>
            The execption that is thrown by Ez namespace.
            </summary>
        </member>
        <member name="M:Ez.EzException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ez.EzException"/> class.
            </summary>
        </member>
        <member name="M:Ez.EzException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Ez.EzException"/> class with a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Ez.EzException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Ez.EzException"/> class with serialized data.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a <see langword="null"/>
            reference if no inner exception is specified.</param>
        </member>
        <member name="M:Ez.EzException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Ez.EzException"/> class with a specified
            error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object 
            data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information 
            about the source or destination.</param>
        </member>
        <member name="T:Ez.IClone`1">
            <summary>
            Supports cloning, which creates a new instance of a class with the specific type.
            </summary>
            <typeparam name="T">The type of the clone.</typeparam>
        </member>
        <member name="P:Ez.IClone`1.Clone">
            <summary>
            Creates a new T instance that is a copy of the current instance. 
            </summary>
        </member>
        <member name="T:Ez.IHashable">
            <summary>
            An interface that can hash the contents of the structure or class instance. that implements it .
            </summary>
        </member>
        <member name="P:Ez.IHashable.Hashcode">
            <summary>
            A hashcode for the content of a instance.
            </summary>
        </member>
        <member name="T:Ez.IO.PathHelper">
            <summary>
            Helper functions for path manipulation.
            </summary>
        </member>
        <member name="M:Ez.IO.PathHelper.SeparatePath(System.String)">
            <summary>
            Split the path by separator.
            </summary>
            <param name="path">Path.</param>
            <returns>Split path.</returns>
        </member>
        <member name="M:Ez.IO.PathHelper.GetFolderName(System.String)">
            <summary>
            Get folder name from path.
            </summary>
            <param name="path">Path</param>
            <returns>The name of last folder of path(considers folder up to the last folder separator, example: c:/path/foo = path. c:/path/foo/ = foo.).</returns>
        </member>
        <member name="M:Ez.IO.PathHelper.GetRelativePath(System.String,System.String,System.StringComparison)">
            <summary>
            Create a relative path from one path to another. Paths will be resolved before calculating the difference.
            Default path comparison for the active platform will be used (OrdinalIgnoreCase for Windows or Mac, Ordinal for Unix).
            </summary>
            <param name="relativeTo">The source path the output should be relative to. This path is always considered to be a directory.</param>
            <param name="path">The destination path.</param>
            <param name="comparisonType">One of the enumeration values that specifies the rules for the string comparison.</param>
            <returns>The relative path or <paramref name="path"/> if the paths don't share the same root.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="relativeTo"/> or <paramref name="path"/> is <c>null</c> or an empty string.</exception>
        </member>
        <member name="T:Ez.IO.StreamExtensions">
            <summary>
            <see cref="T:System.IO.Stream"/> extensions.
            </summary>
        </member>
        <member name="M:Ez.IO.StreamExtensions.WriteString(System.IO.Stream,System.String)">
            <summary>
            Write a string in the stream that ends with 0(byte). 
            
            The string is written with utf8 encoding.
            <seealso cref="M:Ez.IO.StreamExtensions.ReadString(System.IO.Stream)"/>
            </summary>
            <param name="stream">Stream to write.</param>
            <param name="value">String to be written.</param>
        </member>
        <member name="M:Ez.IO.StreamExtensions.ReadString(System.IO.Stream)">
            <summary>
            Reads a string from the stream that ends with a 0(byte).
            </summary>
            <param name="stream"></param>
            <returns>The string readed.</returns>
        </member>
        <member name="M:Ez.IO.StreamExtensions.WriteSpan``1(System.IO.Stream,System.ReadOnlySpan{``0})">
            <summary>
            Write a <see cref="T:System.ReadOnlySpan`1"/> array data in the <paramref name="stream"/>.
            </summary>
            <typeparam name="T">The type of items in the <paramref name="array"/>.</typeparam>
            <param name="stream">The stream to write.</param>
            <param name="array">The span to be written.</param>
        </member>
        <member name="M:Ez.IO.StreamExtensions.ReadSpan``1(System.IO.Stream,System.UInt32)">
            <summary>
            Read a <see cref="T:System.ReadOnlySpan`1"/> from the <paramref name="stream"/>.
            </summary>
            <typeparam name="T">The type of items in the returned <see cref="T:System.ReadOnlySpan`1"/>.</typeparam>
            <param name="stream">The stream to read.</param>
            <param name="count">The count of T items to read.</param>
            <returns>A <see cref="T:System.ReadOnlySpan`1"/> with items read from the <paramref name="stream"/>.</returns>
        </member>
        <member name="M:Ez.IO.StreamExtensions.WriteStructure``1(System.IO.Stream,``0)">
            <summary>
            Write a T structure data in the stream.
            </summary>
            <typeparam name="T">The type of the structure to write.</typeparam>
            <param name="stream">The stream to write.</param>
            <param name="value">The T structure to written.</param>
        </member>
        <member name="M:Ez.IO.StreamExtensions.ReadStructure``1(System.IO.Stream)">
            <summary>
            Read a T structure data from the stream.
            </summary>
            <typeparam name="T">The type of the structure to read.</typeparam>
            <param name="stream">The stream to read.</param>
            <returns>A structure read from the stream.</returns>
        </member>
        <member name="T:Ez.IResettable">
            <summary>
            Describes an object that can be reset.
            </summary>
        </member>
        <member name="M:Ez.IResettable.Reset">
            <summary>
            Resets the object to a state that can be reused or destroyed.
            </summary>
        </member>
        <member name="M:Ez.IResettable.Set">
            <summary>
            Set an object just before being used.
            </summary>
        </member>
        <member name="T:Ez.Memory.ArrayPool`1">
            <summary>
            Represents an array pool.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Ez.Memory.ArrayPool`1.Return(`0[])">
            <summary>
            Returns an array to the pool.
            </summary>
            <param name="array">The returned array.</param>
        </member>
        <member name="M:Ez.Memory.ArrayPool`1.GetT(System.Int64,System.Boolean,System.Int32)">
            <summary>
            Gets an array from the pool.
            </summary>
            <param name="size">The minimum size expected.</param>
            <param name="anyWithSize">Flag that indicates that any array with at least the <paramref name="size"/>
            is valid to be get.</param>
            <param name="tolerance">Number of attempts to obtain an object with the proposed conditions.</param>
            <returns></returns>
        </member>
        <member name="T:Ez.Memory.MemoryBlock">
            <summary>
            Represents an unmanaged memory block.
            </summary>
        </member>
        <member name="F:Ez.Memory.MemoryBlock.DefaultStorageBlockSize">
            <summary>
            The default size of a <see cref="T:Ez.Memory.MemoryBlock"/>.
            </summary>
        </member>
        <member name="M:Ez.Memory.MemoryBlock.#ctor(System.UInt64)">
            <summary>
            Initializes a new instance of <see cref="T:Ez.Memory.MemoryBlock"/> class.
            </summary>
            <param name="storageBlockSize">The size of memory in <see cref="T:Ez.Memory.MemoryBlock"/>.</param>
        </member>
        <member name="M:Ez.Memory.MemoryBlock.Finalize">
            <summary>
            Destroys a instance of <see cref="T:Ez.Memory.MemoryBlock"/> class.
            </summary>
        </member>
        <member name="P:Ez.Memory.MemoryBlock.RemainingSize">
            <summary>
            Gets the total bytes not sub-allocated in <see cref="T:Ez.Memory.MemoryBlock"/>.
            </summary>
        </member>
        <member name="P:Ez.Memory.MemoryBlock.TotalSize">
            <summary>
            Gets the size of <see cref="T:Ez.Memory.MemoryBlock"/> in bytes.
            </summary>
        </member>
        <member name="P:Ez.Memory.MemoryBlock.TotalUsed">
            <summary>
            Gets the total bytes sub-allocated in <see cref="T:Ez.Memory.MemoryBlock"/>.
            </summary>
        </member>
        <member name="P:Ez.Memory.MemoryBlock.BaseIntPtr">
            <summary>
            The base pointer to the memory allocated by <see cref="T:Ez.Memory.MemoryBlock"/>.
            </summary>
        </member>
        <member name="P:Ez.Memory.MemoryBlock.BasePtr">
            <summary>
            The base pointer to the memory allocated by <see cref="T:Ez.Memory.MemoryBlock"/>.
            </summary>
        </member>
        <member name="M:Ez.Memory.MemoryBlock.Dispose">
            <summary>
            Releases all allocated memory.
            </summary>
        </member>
        <member name="M:Ez.Memory.MemoryBlock.Alloc(System.UInt64,System.Void*@)">
            <summary>
            Sub-allocates a part of the <see cref="T:Ez.Memory.MemoryBlock"/>.
            </summary>
            <param name="size">The size in bytes of the sub-allocation.</param>
            <param name="ptr">Contains the pointer to the sub-allocated area, if there is enough memory, otherwise null.</param>
            <returns></returns>
        </member>
        <member name="M:Ez.Memory.MemoryBlock.Reset">
            <summary>
            Resets the sub-allocated memory to the initial state, without sub-allocated memory.
            </summary>
        </member>
        <member name="T:Ez.Memory.MemoryBlockPool">
            <summary>
            An static <see cref="T:Ez.Memory.MemoryBlock"/> pool.
            </summary>
        </member>
        <member name="M:Ez.Memory.MemoryBlockPool.Return(Ez.Memory.MemoryBlock)">
            <summary>
            Returns a <see cref="T:Ez.Memory.MemoryBlock"/> to the pool.
            </summary>
            <param name="memoryBlock">The memory block to return.</param>
        </member>
        <member name="M:Ez.Memory.MemoryBlockPool.Get(System.UInt64,System.Boolean,System.Int32)">
            <summary>
            Gets a <see cref="T:Ez.Memory.MemoryBlock"/> from the pool, or creates a new <see cref="T:Ez.Memory.MemoryBlock"/>.
            </summary>
            <param name="size">The size in bytes of <see cref="T:Ez.Memory.MemoryBlock"/>.</param>
            <param name="anyWithSize">Flag that says it can be any <see cref="T:Ez.Memory.MemoryBlock"/> with enough size.</param>
            <param name="tolerance">Number of attempts to get before creating a new memory block.</param>
            <returns>A <see cref="T:Ez.Memory.MemoryBlock"/> with at least the requested size.</returns>
        </member>
        <member name="T:Ez.Memory.MemUtil">
            <summary>
            A static class with useful methods for memory manipulation operations.
            </summary>
        </member>
        <member name="M:Ez.Memory.MemUtil.SizeOf``1">
            <summary>
            Gets the size in bytes of an unmanaged type.
            </summary>
            <typeparam name="T">The unmanaged type to measure.</typeparam>
            <returns>Size in bytes of <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:Ez.Memory.MemUtil.SizeOf``1(System.ReadOnlySpan{``0})">
            <summary>
            Gets the size of a <see cref="T:System.ReadOnlySpan`1"/> in bytes.
            </summary>
            <typeparam name="T">The unmanaged type to measure.</typeparam>
            <param name="span">The span to measure</param>
            <returns>Size in bytes of <paramref name="span"/>.</returns>
        </member>
        <member name="M:Ez.Memory.MemUtil.Add(System.IntPtr,System.UInt64)">
            <summary>
            Adds an offset to the value of a pointer.
            </summary>
            <param name="ptr">The pointer to add the offset to.</param>
            <param name="offset">The offset to add.</param>
            <returns>A new pointer that reflects the addition of <paramref name="offset"/> 
            to <paramref name="ptr"/>.</returns>
        </member>
        <member name="M:Ez.Memory.MemUtil.AnyEquals``1(``0,``0[])">
            <summary>
            Returns a value indicating whether an instance is anywhere in the array.
            </summary>
            <typeparam name="T">The unmanaged type of element to check.</typeparam>
            <param name="value">The value to compare.</param>
            <param name="list">The list of values to compare with <paramref name="value"/>.</param>
            <returns><see langword="true"/> if the <paramref name="value"/> parameter 
            is contained in the <paramref name="list"/>; otherwise, <see langword="false"/></returns>
        </member>
        <member name="M:Ez.Memory.MemUtil.Equals``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})">
            <summary>
            Returns a value indicating whether a <see cref="T:System.ReadOnlySpan`1"/> is equal 
            to another <see cref="T:System.ReadOnlySpan`1"/>.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="a">The first <see cref="T:System.ReadOnlySpan`1"/> to compare.</param>
            <param name="b">The second <see cref="T:System.ReadOnlySpan`1"/> to compare.</param>
            <returns><see langword="true"/> if the span <paramref name="a"/> parameter 
            equals to span <paramref name="b"/> parameter; otherwise, <see langword="false"/></returns>
        </member>
        <member name="M:Ez.Memory.MemUtil.Equals(System.Void*,System.Void*,System.UInt64)">
            <summary>
            Returns a value indicating whether the content of one pointer is equal
            to that of another pointer by a specified number of bytes.
            </summary>
            <param name="a">The first pointer to compare.</param>
            <param name="b">The second pointer to compare.</param>
            <param name="byteCount">The number of bytes to compare.</param>
            <returns><see langword="true"/> if the contents of the pointer <paramref name="a"/> 
            are equal to contents of the pointer <paramref name="b"/> by <paramref name="byteCount"/> bytes.</returns>
        </member>
        <member name="M:Ez.Memory.MemUtil.Set``1(System.Span{``0},System.Byte)">
            <summary>
            Sets all bytes of a <see cref="T:System.Span`1"/> to a specified value.
            </summary>
            <typeparam name="T">The type of items in the <paramref name="span"/>.</typeparam>
            <param name="span">The span to be set.</param>
            <param name="value">The byte value to set.</param>
        </member>
        <member name="M:Ez.Memory.MemUtil.Set(System.Void*,System.Byte,System.UInt64)">
            <summary>
            Sets all first <paramref name="byteCount"/> bytes to the <paramref name="value"/> byte. 
            </summary>
            <param name="memoryPtr">The pointer to the first byte.</param>
            <param name="value">The byte value to set.</param>
            <param name="byteCount">The number of bytes to set.</param>
        </member>
        <member name="M:Ez.Memory.MemUtil.SetValue``1(``0*,``0@,System.UInt64)">
            <summary>
            Sets all the first <paramref name="count"/> Ts to the <paramref name="value"/>.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ptr">The pointer to the first T to set.</param>
            <param name="value">The value to set.</param>
            <param name="count">The number of Ts to set.</param>
        </member>
        <member name="M:Ez.Memory.MemUtil.Copy``1(System.Span{``0},System.ReadOnlySpan{``0})">
            <summary>
            Copies all data from one <see cref="T:System.ReadOnlySpan`1"/> to a <see cref="T:System.Span`1"/>.
            </summary>
            <typeparam name="T">The type of items in the <paramref name="destination"/> and <paramref name="source"/>.</typeparam>
            <param name="destination">The <see cref="T:System.Span`1"/> that receives the data.</param>
            <param name="source">The <see cref="T:System.ReadOnlySpan`1"/> that contains the data to copy.</param>
            <returns>Number of bytes copied.</returns>
        </member>
        <member name="M:Ez.Memory.MemUtil.Copy``2(System.Span{``0},System.ReadOnlySpan{``1})">
            <summary>
            Copies all data from one <see cref="T:System.ReadOnlySpan`1"/> to a <see cref="T:System.Span`1"/>.
            </summary>
            <typeparam name="TDestination">The type of items in the <paramref name="destination"/>.</typeparam>
            <typeparam name="TSource">The type of items in the <paramref name="source"/>.</typeparam>
            <param name="destination">The <see cref="T:System.Span`1"/> that receives the data.</param>
            <param name="source">The <see cref="T:System.ReadOnlySpan`1"/> that contains the data to copy.</param>
            <returns>Number of bytes copied.</returns>
        </member>
        <member name="M:Ez.Memory.MemUtil.Copy``1(System.IntPtr,System.ReadOnlySpan{``0})">
            <summary>
            Copies all data from a <see cref="T:System.ReadOnlySpan`1"/> to a destination address.
            </summary>
            <typeparam name="T">The type of items in the <paramref name="src"/>.</typeparam>
            <param name="dst">The destination address to copy to.</param>
            <param name="src">The <see cref="T:System.ReadOnlySpan`1"/> that contains the data to copy.</param>
            <returns>Number of bytes copied.</returns>
        </member>
        <member name="M:Ez.Memory.MemUtil.Copy``1(System.Void*,System.ReadOnlySpan{``0})">
            <summary>
            Copies all data from a <see cref="T:System.ReadOnlySpan`1"/> to a destination address.
            </summary>
            <typeparam name="T">The type of items in the <paramref name="src"/>.</typeparam>
            <param name="dst">The destination address to copy to.</param>
            <param name="src">The <see cref="T:System.ReadOnlySpan`1"/> that contains the data to copy.</param>
            <returns>Number of bytes copied.</returns>
        </member>
        <member name="M:Ez.Memory.MemUtil.Copy``1(System.IntPtr,``0@)">
            <summary>
            Copies all data from a T value to a destination address.
            </summary>
            <typeparam name="T">The type of data to copy.</typeparam>
            <param name="dst">The destination address to copy to.</param>
            <param name="src">The value to copy.</param>
            <returns>Number of bytes copied.</returns>
        </member>
        <member name="M:Ez.Memory.MemUtil.Copy(System.Void*,System.Void*,System.UInt64)">
            <summary>
            Copies bytes from the source address to the destination address.
            </summary>
            <param name="destination">The destination address to copy to.</param>
            <param name="source">The source address to copy from.</param>
            <param name="byteCount">The number of bytes to copy.</param>
        </member>
        <member name="M:Ez.Memory.MemUtil.Alloc(System.UInt64)">
            <summary>
            Allocates memory from unmanaged memory of process.
            </summary>
            <param name="size">The required number of bytes in memory.</param>
            <returns>A pointer to the newly allocated memory. This memory must be released using the <see cref="M:Ez.Memory.MemUtil.Free(System.Void*)"/> method.</returns>
        </member>
        <member name="M:Ez.Memory.MemUtil.Free(System.Void*)">
            <summary>
            Frees memory previously allocated from the unmanaged memory of the process.
            </summary>
            <param name="ptr">The handle returned by the original matching call to <see cref="M:Ez.Memory.MemUtil.Alloc(System.UInt64)"/>.</param>
        </member>
        <member name="T:Ez.Messenger.DynamicMessengerRecipient">
            <summary>
            Parses class and traces methods compatible with EventHandler or pre configured events in the dictionary
            </summary>
        </member>
        <member name="M:Ez.Messenger.DynamicMessengerRecipient.AddReceiverHandler(System.String,System.Type)">
            <summary>
            Add delegate type to dicionary of compatible event
            </summary>
            <param name="eventMethodName">Event name(example OnUpdate)</param>
            <param name="eventHandler">Event delegate</param>
        </member>
        <member name="P:Ez.Messenger.DynamicMessengerRecipient.Type">
            <summary>
            Class type traced in this instance
            </summary>
        </member>
        <member name="F:Ez.Messenger.DynamicMessengerRecipient.events">
            <summary>
            Dicionary of method name and method
            </summary>
        </member>
        <member name="M:Ez.Messenger.DynamicMessengerRecipient.#ctor(System.Type)">
            <summary>
            Create new instance that parses the specified type
            </summary>
            <param name="type">Class type to parse</param>
        </member>
        <member name="M:Ez.Messenger.DynamicMessengerRecipient.GetDelegateEvent(System.Object,System.String)">
            <summary>
            Get delegate of event method in target instance
            </summary>
            <param name="target">Target instance</param>
            <param name="methodName">Event method name</param>
            <returns></returns>
        </member>
        <member name="M:Ez.Messenger.DynamicMessengerRecipient.SendMessenger(System.Object[],System.String,System.Object,System.EventArgs)">
            <summary>
            Call the event-compatible method named methodName on all targets.
            </summary>
            <param name="targets">Targets that is instance of class of type Type</param>
            <param name="methodName">Method event name</param>
            <param name="sender">Sender</param>
            <param name="eventArgs">Event arguments</param>
        </member>
        <member name="M:Ez.Messenger.DynamicMessengerRecipient.SendMessenger(System.Object,System.String,System.Object,System.EventArgs)">
            <summary>
            Call the event-compatible method named methodName on target.
            </summary>
            <param name="target">Target that is instance of class of type Type</param>
            <param name="methodName">Method event name</param>
            <param name="sender">Sender</param>
            <param name="eventArgs">Event arguments</param>
        </member>
        <member name="M:Ez.Messenger.DynamicMessengerRecipient.MethodEventExists(System.String)">
            <summary>
            Check if have event name in type Type
            </summary>
            <param name="eventMethodName">Event method name</param>
            <returns>True if yes.</returns>
        </member>
        <member name="T:Ez.Messenger.MessengerSender">
            <summary>
            Describes a dynamic messaging communication system between objects.
            </summary>
        </member>
        <member name="M:Ez.Messenger.MessengerSender.GetRecipient(System.Type)">
            <summary>
            Gets a <see cref="T:Ez.Messenger.DynamicMessengerRecipient"/> associated with a specified type.
            </summary>
            <param name="receiverType">The type to locate.</param>
            <returns>A <see cref="T:Ez.Messenger.DynamicMessengerRecipient"/> that is associated with the <paramref name="receiverType"/> type.</returns>
        </member>
        <member name="M:Ez.Messenger.MessengerSender.GetRecipient``1">
            <summary>
            Gets a <see cref="T:Ez.Messenger.DynamicMessengerRecipient"/> associated with a specified type.
            </summary>
            <typeparam name="T">The type to locate.</typeparam>
            <returns>A <see cref="T:Ez.Messenger.DynamicMessengerRecipient"/> that is associated with the <typeparamref name="T"/> type.</returns>
        </member>
        <member name="M:Ez.Messenger.MessengerSender.GetRecipient(System.Object)">
            <summary>
            Gets a <see cref="T:Ez.Messenger.DynamicMessengerRecipient"/> associated with a specified type of the <paramref name="receiver"/>.
            </summary>
            <param name="receiver">A object to locate a compatible <see cref="T:Ez.Messenger.DynamicMessengerRecipient"/>.</param>
            <returns>A <see cref="T:Ez.Messenger.DynamicMessengerRecipient"/> that is associated with the type of <paramref name="receiver"/>.</returns>
        </member>
        <member name="M:Ez.Messenger.MessengerSender.SendMessenger(System.Object,System.String,System.Object,System.EventArgs)">
            <summary>
            Sends messenger event named <paramref name="eventMethodName"/> to receiver.
            </summary>
            <param name="receiver">Receiver of messenger</param>
            <param name="eventMethodName">Event message receiving method</param>
            <param name="sender">The sender argument of event method.</param>
            <param name="eventArgs">The e argument of event method.</param>
        </member>
        <member name="M:Ez.Messenger.MessengerSender.GetDelegate(System.Object,System.String)">
            <summary>
            Get delegate of event method
            </summary>
            <param name="target">Target of delegate</param>
            <param name="methodName">Method name</param>
            <returns>Delegate of method in target</returns>
        </member>
        <member name="T:Ez.Numerics.Bounding.BoundingBox">
            <summary>
            Represents a bounding box aligned to the X and Y axes .
            </summary>
        </member>
        <member name="P:Ez.Numerics.Bounding.BoundingBox.Max">
            <summary>
            The maximum point the <see cref="T:Ez.Numerics.Bounding.BoundingBox"/> contains.
            </summary>
        </member>
        <member name="P:Ez.Numerics.Bounding.BoundingBox.Min">
            <summary>
            The minimum point the <see cref="T:Ez.Numerics.Bounding.BoundingBox"/> contains.
            </summary>
        </member>
        <member name="M:Ez.Numerics.Bounding.BoundingBox.#ctor(System.Numerics.Vector3,System.Numerics.Vector3)">
            <summary>
            Creates a new <see cref="T:Ez.Numerics.Bounding.BoundingBox"/> with the minimum point and maximum point.
            </summary>
            <param name="min"></param>
            <param name="max"></param>
        </member>
        <member name="M:Ez.Numerics.Bounding.BoundingBox.Contains(Ez.Numerics.Bounding.IBoundingVolume)">
            <summary>
            Returns the <see cref="T:Ez.Numerics.Bounding.ContainmentType"/> between this and another <see cref="T:Ez.Numerics.Bounding.IBoundingVolume"/>.
            </summary>
            <param name="bounding">The other <see cref="T:Ez.Numerics.Bounding.IBoundingVolume"/> to compare.</param>
            <returns>
            <see cref="F:Ez.Numerics.Bounding.ContainmentType.Disjoint"/>, if there is no overlap between the bounding volumes.<br/>
            <see cref="F:Ez.Numerics.Bounding.ContainmentType.Contains"/>, if the instance fully contains the volume of <see cref="T:Ez.Numerics.Bounding.IBoundingVolume"/>.<br/>
            <see cref="F:Ez.Numerics.Bounding.ContainmentType.Intersects"/>, if only part of the instance contains at least part of
            <paramref name="bounding"/> volume.</returns>
        </member>
        <member name="M:Ez.Numerics.Bounding.BoundingBox.Contains(Ez.Numerics.Bounding.BoundingBox@)">
            <summary>
            Returns the <see cref="T:Ez.Numerics.Bounding.ContainmentType"/> between this and another <see cref="T:Ez.Numerics.Bounding.BoundingBox"/>.
            </summary>
            <param name="bounding">The other <see cref="T:Ez.Numerics.Bounding.BoundingBox"/> to compare.</param>
            <returns>
            <see cref="F:Ez.Numerics.Bounding.ContainmentType.Disjoint"/>, if there is no overlap between the bounding volumes.<br/>
            <see cref="F:Ez.Numerics.Bounding.ContainmentType.Contains"/>, if the instance fully contains the volume of <see cref="T:Ez.Numerics.Bounding.BoundingBox"/>.<br/>
            <see cref="F:Ez.Numerics.Bounding.ContainmentType.Intersects"/>, if only part of the instance contains at least part of
            <paramref name="bounding"/> volume.</returns>
        </member>
        <member name="M:Ez.Numerics.Bounding.BoundingBox.Contains(System.Numerics.Vector3)">
            <summary>
            Returns a value indicating whether the point is within the bounding.
            </summary>
            <param name="point">The pointer to evaluate.</param>
            <returns><see langword="true"/> if the point is inside the bounding box; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="T:Ez.Numerics.Bounding.ContainmentType">
            <summary>
            Indicates the extent to which bounding volumes intersect or contain one another.
            </summary>
        </member>
        <member name="F:Ez.Numerics.Bounding.ContainmentType.Disjoint">
            <summary>
            Indicates there is no overlap between the bounding volumes.
            </summary>
        </member>
        <member name="F:Ez.Numerics.Bounding.ContainmentType.Contains">
            <summary>
            Indicates that one bounding volume completely contains the other.
            </summary>
        </member>
        <member name="F:Ez.Numerics.Bounding.ContainmentType.Intersects">
            <summary>
            Indicates that the bounding volumes partially overlap.
            </summary>
        </member>
        <member name="T:Ez.Numerics.Bounding.IBoundingVolume">
            <summary>
            Provides a generic interface for bounding volume
            </summary>
        </member>
        <member name="M:Ez.Numerics.Bounding.IBoundingVolume.Contains(Ez.Numerics.Bounding.IBoundingVolume)">
            <summary>
            Returns the <see cref="T:Ez.Numerics.Bounding.ContainmentType"/> between this and another <see cref="T:Ez.Numerics.Bounding.IBoundingVolume"/>.
            </summary>
            <param name="bounding">The other <see cref="T:Ez.Numerics.Bounding.IBoundingVolume"/> to compare.</param>
            <returns>
            <see cref="F:Ez.Numerics.Bounding.ContainmentType.Disjoint"/>, if there is no overlap between the bounding volumes.<br/>
            <see cref="F:Ez.Numerics.Bounding.ContainmentType.Contains"/>, if the instance fully contains the volume of <see cref="T:Ez.Numerics.Bounding.IBoundingVolume"/>.<br/>
            <see cref="F:Ez.Numerics.Bounding.ContainmentType.Intersects"/>, if only part of the instance contains at least part of
            <paramref name="bounding"/> volume.</returns>
        </member>
        <member name="T:Ez.Numerics.EzMath">
            <summary>
            Provides constants and static methods to complement <see cref="T:System.Math"/>.
            </summary>
        </member>
        <member name="F:Ez.Numerics.EzMath.PI">
            <summary>
            Represents the ratio of the circumference of a circle to its diameter, specified by the constant, π.
            </summary>
        </member>
        <member name="F:Ez.Numerics.EzMath.Deg2Rad">
            <summary>
            Degrees-to-radians conversion constant.
            <see cref="F:Ez.Numerics.EzMath.Rad2Deg"/>
            </summary>
        </member>
        <member name="F:Ez.Numerics.EzMath.Rad2Deg">
            <summary>
            Radians-to-degrees conversion constant.
            <see cref="F:Ez.Numerics.EzMath.Deg2Rad"/>
            </summary>
        </member>
        <member name="F:Ez.Numerics.EzMath.InvLogE2">
            <summary>
            Natural logarithm of 2 inverted constant(1 / log 2).
            </summary>
        </member>
        <member name="M:Ez.Numerics.EzMath.Log2(System.Double)">
            <summary>
            Calculates the log on base 2.
            </summary>
            <param name="d">The number whose logarithm is to be found.</param>
            <returns>
            The natural logarithm of <paramref name="d"/>, if <paramref name="d"/> is positive.<br/>
            <see cref="F:System.Double.NegativeInfinity"/>, if <paramref name="d"/> is zero.<br/>
            <see cref="F:System.Double.NaN"/>, if <paramref name="d"/> is negative or equal to <see cref="F:System.Double.NaN"/>.<br/>
            <see cref="F:System.Double.PositiveInfinity"/>, if <paramref name="d"/> is <see cref="F:System.Double.PositiveInfinity"/>.</returns>
        </member>
        <member name="M:Ez.Numerics.EzMath.Approximately(System.Single,System.Single)">
            <summary>
            Compares two floating point values and returns true if they are similar.
            </summary>
            <param name="a">The first value to compare.</param>
            <param name="b">The second value to compare.</param>
            <returns><see langword="true"/>, if they are within a small value epsilon; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ez.Numerics.EzMath.Floor(System.Single)">
            <summary>
            Returns the largest integral value less than or equal to the specified number.
            </summary>
            <param name="d">A single-precision floating-point number.</param>
            <returns>The largest integral value less than or equal to <paramref name="d"/>. 
            If <paramref name="d"/> is equal to <see cref="F:System.Single.NaN"/>, <see cref="F:System.Single.NegativeInfinity"/>, 
            or <see cref="F:System.Single.PositiveInfinity"/>, that value is returned.</returns>
        </member>
        <member name="M:Ez.Numerics.EzMath.Ceiling(System.Single)">
            <summary>
            Returns the smallest integral value that is greater than or equal to the specified single-precision floating-point number.
            </summary>
            <param name="a">A single-precision floating-point number.</param>
            <returns>The smallest integral value that is greater than or equal to <paramref name="a"/>. 
            If <paramref name="a"/> is equal to <see cref="F:System.Single.NaN"/>, <see cref="F:System.Single.NegativeInfinity"/>, 
            or <see cref="F:System.Single.PositiveInfinity"/>, that value is returned. </returns>
        </member>
        <member name="M:Ez.Numerics.EzMath.Round(System.Single)">
            <summary>
            Rounds a value to the nearest integer or to the specified number of fractional digits.
            </summary>
            <param name="a">A single-precision floating-point number to be rounded.</param>
            <returns>The integer nearest <paramref name="a"/>. If the fractional component of a is halfway between two integers,
            one of which is even and the other odd, then the even number is returned.</returns>
        </member>
        <member name="M:Ez.Numerics.EzMath.ToEulerAngles(System.Numerics.Quaternion)">
            <summary>
            Returns the euler angle representation of a <see cref="T:System.Numerics.Quaternion"/>.
            </summary>
            <param name="q">The quaternion to represent in the form of euler angle.</param>
            <returns>An euler angle vector that represents the <paramref name="q"/> quaternion.</returns>
        </member>
        <member name="M:Ez.Numerics.EzMath.ToQuaternion(System.Numerics.Vector3)">
            <summary>
            Returns the quaternion representation of a euler angle <see cref="T:System.Numerics.Vector3"/>.
            </summary>
            <param name="eulerAngles">The euler angle to represents in the form of quaternion.</param>
            <returns>An quaternion that represents the <paramref name="eulerAngles"/> vector.</returns>
        </member>
        <member name="T:Ez.Numerics.HashHelper`1">
            <summary>
            A static helper class to handle things related to hash code.
            </summary>
            <typeparam name="T">The destination type to calculate a <see cref="P:Ez.Numerics.HashHelper`1.BaseHash"/>.</typeparam>
        </member>
        <member name="P:Ez.Numerics.HashHelper`1.BaseHash">
            <summary>
            A hash code to be the basis of a hash combine function.
            </summary>
        </member>
        <member name="M:Ez.Numerics.HashHelper`1.Combine``1(``0@)">
            <summary>
            Combines one values into a hash code.
            </summary>
            <typeparam name="T1">The type of the first value to combine into the hash code.</typeparam>
            <param name="value1">The first value to combine into the hash code.</param>
            <returns>The hash code that represents the one value.</returns>
        </member>
        <member name="M:Ez.Numerics.HashHelper`1.Combine``2(``0@,``1@)">
            <summary>
            Combines two values into a hash code.
            </summary>
            <typeparam name="T1">The type of the first value to combine into the hash code.</typeparam>
            <typeparam name="T2">The type of the second value to combine into the hash code.</typeparam>
            <param name="value1">The first value to combine into the hash code.</param>
            <param name="value2">The second value to combine into the hash code.</param>
            <returns>The hash code that represents the two values.</returns>
        </member>
        <member name="M:Ez.Numerics.HashHelper`1.Combine``3(``0@,``1@,``2@)">
            <summary>
            Combines three values into a hash code.
            </summary>
            <typeparam name="T1">The type of the first value to combine into the hash code.</typeparam>
            <typeparam name="T2">The type of the second value to combine into the hash code.</typeparam>
            <typeparam name="T3">The type of the third value to combine into the hash code.</typeparam>
            <param name="value1">The first value to combine into the hash code.</param>
            <param name="value2">The second value to combine into the hash code.</param>
            <param name="value3">The third value to combine into the hash code.</param>
            <returns>The hash code that represents the three values.</returns>
        </member>
        <member name="M:Ez.Numerics.HashHelper`1.Combine``4(``0@,``1@,``2@,``3@)">
            <summary>
            Combines four values into a hash code.
            </summary>
            <typeparam name="T1">The type of the first value to combine into the hash code.</typeparam>
            <typeparam name="T2">The type of the second value to combine into the hash code.</typeparam>
            <typeparam name="T3">The type of the third value to combine into the hash code.</typeparam>
            <typeparam name="T4">The type of the fourth value to combine into the hash code.</typeparam>
            <param name="value1">The first value to combine into the hash code.</param>
            <param name="value2">The second value to combine into the hash code.</param>
            <param name="value3">The third value to combine into the hash code.</param>
            <param name="value4">The fourth value to combine into the hash code.</param>
            <returns>The hash code that represents the four values.</returns>
        </member>
        <member name="M:Ez.Numerics.HashHelper`1.Combine``5(``0@,``1@,``2@,``3@,``4@)">
            <summary>
            Combines five values into a hash code.
            </summary>
            <typeparam name="T1">The type of the first value to combine into the hash code.</typeparam>
            <typeparam name="T2">The type of the second value to combine into the hash code.</typeparam>
            <typeparam name="T3">The type of the third value to combine into the hash code.</typeparam>
            <typeparam name="T4">The type of the fourth value to combine into the hash code.</typeparam>
            <typeparam name="T5">The type of the fifth value to combine into the hash code.</typeparam>
            <param name="value1">The first value to combine into the hash code.</param>
            <param name="value2">The second value to combine into the hash code.</param>
            <param name="value3">The third value to combine into the hash code.</param>
            <param name="value4">The fourth value to combine into the hash code.</param>
            <param name="value5">The fifth value to combine into the hash code.</param>
            <returns>The hash code that represents the five values.</returns>
        </member>
        <member name="M:Ez.Numerics.HashHelper`1.Combine``6(``0@,``1@,``2@,``3@,``4@,``5@)">
            <summary>
            Combines six values into a hash code.
            </summary>
            <typeparam name="T1">The type of the first value to combine into the hash code.</typeparam>
            <typeparam name="T2">The type of the second value to combine into the hash code.</typeparam>
            <typeparam name="T3">The type of the third value to combine into the hash code.</typeparam>
            <typeparam name="T4">The type of the fourth value to combine into the hash code.</typeparam>
            <typeparam name="T5">The type of the fifth value to combine into the hash code.</typeparam>
            <typeparam name="T6">The type of the sixth value to combine into the hash code.</typeparam>
            <param name="value1">The first value to combine into the hash code.</param>
            <param name="value2">The second value to combine into the hash code.</param>
            <param name="value3">The third value to combine into the hash code.</param>
            <param name="value4">The fourth value to combine into the hash code.</param>
            <param name="value5">The fifth value to combine into the hash code.</param>
            <param name="value6">The sixth value to combine into the hash code.</param>
            <returns>The hash code that represents the six values.</returns>
        </member>
        <member name="M:Ez.Numerics.HashHelper`1.Combine``7(``0@,``1@,``2@,``3@,``4@,``5@,``6@)">
            <summary>
            Combines seven values into a hash code.
            </summary>
            <typeparam name="T1">The type of the first value to combine into the hash code.</typeparam>
            <typeparam name="T2">The type of the second value to combine into the hash code.</typeparam>
            <typeparam name="T3">The type of the third value to combine into the hash code.</typeparam>
            <typeparam name="T4">The type of the fourth value to combine into the hash code.</typeparam>
            <typeparam name="T5">The type of the fifth value to combine into the hash code.</typeparam>
            <typeparam name="T6">The type of the sixth value to combine into the hash code.</typeparam>
            <typeparam name="T7">The type of the seventh value to combine into the hash code.</typeparam>
            <param name="value1">The first value to combine into the hash code.</param>
            <param name="value2">The second value to combine into the hash code.</param>
            <param name="value3">The third value to combine into the hash code.</param>
            <param name="value4">The fourth value to combine into the hash code.</param>
            <param name="value5">The fifth value to combine into the hash code.</param>
            <param name="value6">The sixth value to combine into the hash code.</param>
            <param name="value7">The seventh value to combine into the hash code.</param>
            <returns>The hash code that represents the seven values.</returns>
        </member>
        <member name="M:Ez.Numerics.HashHelper`1.Combine``8(``0@,``1@,``2@,``3@,``4@,``5@,``6@,``7@)">
            <summary>
            Combines eight values into a hash code.
            </summary>
            <typeparam name="T1">The type of the first value to combine into the hash code.</typeparam>
            <typeparam name="T2">The type of the second value to combine into the hash code.</typeparam>
            <typeparam name="T3">The type of the third value to combine into the hash code.</typeparam>
            <typeparam name="T4">The type of the fourth value to combine into the hash code.</typeparam>
            <typeparam name="T5">The type of the fifth value to combine into the hash code.</typeparam>
            <typeparam name="T6">The type of the sixth value to combine into the hash code.</typeparam>
            <typeparam name="T7">The type of the seventh value to combine into the hash code.</typeparam>
            <typeparam name="T8">The type of the eighth value to combine into the hash code.</typeparam>
            <param name="value1">The first value to combine into the hash code.</param>
            <param name="value2">The second value to combine into the hash code.</param>
            <param name="value3">The third value to combine into the hash code.</param>
            <param name="value4">The fourth value to combine into the hash code.</param>
            <param name="value5">The fifth value to combine into the hash code.</param>
            <param name="value6">The sixth value to combine into the hash code.</param>
            <param name="value7">The seventh value to combine into the hash code.</param>
            <param name="value8">The eighth value to combine into the hash code.</param>
            <returns>The hash code that represents the eight values.</returns>
        </member>
        <member name="M:Ez.Numerics.HashHelper`1.Combine``9(``0@,``1@,``2@,``3@,``4@,``5@,``6@,``7@,``8@)">
            <summary>
            Combines nine values into a hash code.
            </summary>
            <typeparam name="T1">The type of the first value to combine into the hash code.</typeparam>
            <typeparam name="T2">The type of the second value to combine into the hash code.</typeparam>
            <typeparam name="T3">The type of the third value to combine into the hash code.</typeparam>
            <typeparam name="T4">The type of the fourth value to combine into the hash code.</typeparam>
            <typeparam name="T5">The type of the fifth value to combine into the hash code.</typeparam>
            <typeparam name="T6">The type of the sixth value to combine into the hash code.</typeparam>
            <typeparam name="T7">The type of the seventh value to combine into the hash code.</typeparam>
            <typeparam name="T8">The type of the eighth value to combine into the hash code.</typeparam>
            <typeparam name="T9">The type of the ninth value to combine into the hash code.</typeparam>
            <param name="value1">The first value to combine into the hash code.</param>
            <param name="value2">The second value to combine into the hash code.</param>
            <param name="value3">The third value to combine into the hash code.</param>
            <param name="value4">The fourth value to combine into the hash code.</param>
            <param name="value5">The fifth value to combine into the hash code.</param>
            <param name="value6">The sixth value to combine into the hash code.</param>
            <param name="value7">The seventh value to combine into the hash code.</param>
            <param name="value8">The eighth value to combine into the hash code.</param>
            <param name="value9">The ninth value to combine into the hash code.</param>
            <returns>The hash code that represents the nine values.</returns>
        </member>
        <member name="M:Ez.Numerics.HashHelper`1.Combine``10(``0@,``1@,``2@,``3@,``4@,``5@,``6@,``7@,``8@,``9@)">
            <summary>
            Combines ten values into a hash code.
            </summary>
            <typeparam name="T1">The type of the first value to combine into the hash code.</typeparam>
            <typeparam name="T2">The type of the second value to combine into the hash code.</typeparam>
            <typeparam name="T3">The type of the third value to combine into the hash code.</typeparam>
            <typeparam name="T4">The type of the fourth value to combine into the hash code.</typeparam>
            <typeparam name="T5">The type of the fifth value to combine into the hash code.</typeparam>
            <typeparam name="T6">The type of the sixth value to combine into the hash code.</typeparam>
            <typeparam name="T7">The type of the seventh value to combine into the hash code.</typeparam>
            <typeparam name="T8">The type of the eighth value to combine into the hash code.</typeparam>
            <typeparam name="T9">The type of the ninth value to combine into the hash code.</typeparam>
            <typeparam name="T10">The type of the tenth value to combine into the hash code.</typeparam>
            <param name="value1">The first value to combine into the hash code.</param>
            <param name="value2">The second value to combine into the hash code.</param>
            <param name="value3">The third value to combine into the hash code.</param>
            <param name="value4">The fourth value to combine into the hash code.</param>
            <param name="value5">The fifth value to combine into the hash code.</param>
            <param name="value6">The sixth value to combine into the hash code.</param>
            <param name="value7">The seventh value to combine into the hash code.</param>
            <param name="value8">The eighth value to combine into the hash code.</param>
            <param name="value9">The ninth value to combine into the hash code.</param>
            <param name="value10">The tenth value to combine into the hash code.</param>
            <returns>The hash code that represents the ten values.</returns>
        </member>
        <member name="M:Ez.Numerics.HashHelper`1.Combine``11(``0@,``1@,``2@,``3@,``4@,``5@,``6@,``7@,``8@,``9@,``10@)">
            <summary>
            Combines eleven values into a hash code.
            </summary>
            <typeparam name="T1">The type of the first value to combine into the hash code.</typeparam>
            <typeparam name="T2">The type of the second value to combine into the hash code.</typeparam>
            <typeparam name="T3">The type of the third value to combine into the hash code.</typeparam>
            <typeparam name="T4">The type of the fourth value to combine into the hash code.</typeparam>
            <typeparam name="T5">The type of the fifth value to combine into the hash code.</typeparam>
            <typeparam name="T6">The type of the sixth value to combine into the hash code.</typeparam>
            <typeparam name="T7">The type of the seventh value to combine into the hash code.</typeparam>
            <typeparam name="T8">The type of the eighth value to combine into the hash code.</typeparam>
            <typeparam name="T9">The type of the ninth value to combine into the hash code.</typeparam>
            <typeparam name="T10">The type of the tenth value to combine into the hash code.</typeparam>
            <typeparam name="T11">The type of the eleventh value to combine into the hash code.</typeparam>
            <param name="value1">The first value to combine into the hash code.</param>
            <param name="value2">The second value to combine into the hash code.</param>
            <param name="value3">The third value to combine into the hash code.</param>
            <param name="value4">The fourth value to combine into the hash code.</param>
            <param name="value5">The fifth value to combine into the hash code.</param>
            <param name="value6">The sixth value to combine into the hash code.</param>
            <param name="value7">The seventh value to combine into the hash code.</param>
            <param name="value8">The eighth value to combine into the hash code.</param>
            <param name="value9">The ninth value to combine into the hash code.</param>
            <param name="value10">The tenth value to combine into the hash code.</param>
            <param name="value11">The eleventh value to combine into the hash code.</param>
            <returns>The hash code that represents the eleven values.</returns>
        </member>
        <member name="M:Ez.Numerics.HashHelper`1.Combine``12(``0@,``1@,``2@,``3@,``4@,``5@,``6@,``7@,``8@,``9@,``10@,``11@)">
            <summary>
            Combines twelve values into a hash code.
            </summary>
            <typeparam name="T1">The type of the first value to combine into the hash code.</typeparam>
            <typeparam name="T2">The type of the second value to combine into the hash code.</typeparam>
            <typeparam name="T3">The type of the third value to combine into the hash code.</typeparam>
            <typeparam name="T4">The type of the fourth value to combine into the hash code.</typeparam>
            <typeparam name="T5">The type of the fifth value to combine into the hash code.</typeparam>
            <typeparam name="T6">The type of the sixth value to combine into the hash code.</typeparam>
            <typeparam name="T7">The type of the seventh value to combine into the hash code.</typeparam>
            <typeparam name="T8">The type of the eighth value to combine into the hash code.</typeparam>
            <typeparam name="T9">The type of the ninth value to combine into the hash code.</typeparam>
            <typeparam name="T10">The type of the tenth value to combine into the hash code.</typeparam>
            <typeparam name="T11">The type of the eleventh value to combine into the hash code.</typeparam>
            <typeparam name="T12">The type of the twelfth value to combine into the hash code.</typeparam>
            <param name="value1">The first value to combine into the hash code.</param>
            <param name="value2">The second value to combine into the hash code.</param>
            <param name="value3">The third value to combine into the hash code.</param>
            <param name="value4">The fourth value to combine into the hash code.</param>
            <param name="value5">The fifth value to combine into the hash code.</param>
            <param name="value6">The sixth value to combine into the hash code.</param>
            <param name="value7">The seventh value to combine into the hash code.</param>
            <param name="value8">The eighth value to combine into the hash code.</param>
            <param name="value9">The ninth value to combine into the hash code.</param>
            <param name="value10">The tenth value to combine into the hash code.</param>
            <param name="value11">The eleventh value to combine into the hash code.</param>
            <param name="value12">The twelfth value to combine into the hash code.</param>
            <returns>The hash code that represents the twelve values.</returns>
        </member>
        <member name="M:Ez.Numerics.HashHelper`1.Combine``13(``0@,``1@,``2@,``3@,``4@,``5@,``6@,``7@,``8@,``9@,``10@,``11@,``12@)">
            <summary>
            Combines thirteen values into a hash code.
            </summary>
            <typeparam name="T1">The type of the first value to combine into the hash code.</typeparam>
            <typeparam name="T2">The type of the second value to combine into the hash code.</typeparam>
            <typeparam name="T3">The type of the third value to combine into the hash code.</typeparam>
            <typeparam name="T4">The type of the fourth value to combine into the hash code.</typeparam>
            <typeparam name="T5">The type of the fifth value to combine into the hash code.</typeparam>
            <typeparam name="T6">The type of the sixth value to combine into the hash code.</typeparam>
            <typeparam name="T7">The type of the seventh value to combine into the hash code.</typeparam>
            <typeparam name="T8">The type of the eighth value to combine into the hash code.</typeparam>
            <typeparam name="T9">The type of the ninth value to combine into the hash code.</typeparam>
            <typeparam name="T10">The type of the tenth value to combine into the hash code.</typeparam>
            <typeparam name="T11">The type of the eleventh value to combine into the hash code.</typeparam>
            <typeparam name="T12">The type of the twelfth value to combine into the hash code.</typeparam>
            <typeparam name="T13">The type of the thirteenth value to combine into the hash code.</typeparam>
            <param name="value1">The first value to combine into the hash code.</param>
            <param name="value2">The second value to combine into the hash code.</param>
            <param name="value3">The third value to combine into the hash code.</param>
            <param name="value4">The fourth value to combine into the hash code.</param>
            <param name="value5">The fifth value to combine into the hash code.</param>
            <param name="value6">The sixth value to combine into the hash code.</param>
            <param name="value7">The seventh value to combine into the hash code.</param>
            <param name="value8">The eighth value to combine into the hash code.</param>
            <param name="value9">The ninth value to combine into the hash code.</param>
            <param name="value10">The tenth value to combine into the hash code.</param>
            <param name="value11">The eleventh value to combine into the hash code.</param>
            <param name="value12">The twelfth value to combine into the hash code.</param>
            <param name="value13">The thirteenth value to combine into the hash code.</param>
            <returns>The hash code that represents the thirteen values.</returns>
        </member>
        <member name="M:Ez.Numerics.HashHelper`1.Combine``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Combines values into a hash code.
            </summary>
            <typeparam name="U">The type of <paramref name="values"/> to combine into a hash code.</typeparam>
            <param name="values">The <paramref name="values"/> to combine into the hash code.</param>
            <returns>The hash code that represents the <paramref name="values"/>.</returns>
        </member>
        <member name="M:Ez.Numerics.HashHelper`1.Combine(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Combines values into a hash code.
            </summary>
            <param name="values">The <paramref name="values"/> to combine into the hash code.</param>
            <returns>The hash code that represents the <paramref name="values"/>.</returns>
        </member>
        <member name="M:Ez.Numerics.HashHelper`1.Combine(System.ReadOnlySpan{`0})">
            <summary>
            Combines values into a hash code.
            </summary>
            <param name="values">The <paramref name="values"/> to combine into the hash code.</param>
            <returns></returns>
        </member>
        <member name="M:Ez.Numerics.HashHelper`1.Combine``1(System.ReadOnlySpan{``0})">
            <summary>
            Combines values into a hash code.
            </summary>
            <typeparam name="U">The type of <paramref name="values"/> to combine into a hash code.</typeparam>
            <param name="values">The <paramref name="values"/> to combine into the hash code.</param>
            <returns>The hash code that represents the <paramref name="values"/>.</returns>
        </member>
        <member name="T:Ez.Threading.EzThreadException">
            <summary>
            The execption that is thrown by Ez.Threading namespace.
            </summary>
        </member>
        <member name="M:Ez.Threading.EzThreadException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ez.Threading.EzThreadException"/> class.
            </summary>
        </member>
        <member name="M:Ez.Threading.EzThreadException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Ez.Threading.EzThreadException"/> class with a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Ez.Threading.EzThreadException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Ez.Threading.EzThreadException"/> class with serialized data.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a <see langword="null"/>
            reference if no inner exception is specified.</param>
        </member>
        <member name="M:Ez.Threading.EzThreadException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Ez.Threading.EzThreadException"/> class with a specified
            error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object 
            data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information 
            about the source or destination.</param>
        </member>
        <member name="T:Ez.Threading.ThreadMethodEntry">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ez.Threading.ThreadMethodEntry.Finalize">
            <summary>
            Destroys a <see cref="T:Ez.Threading.ThreadMethodEntry"/> class instance.
            </summary>
        </member>
        <member name="T:Ez.Threading.ThreadMethodExecutor">
            <summary>
            A thread that consumes delegates and invokes them.
            </summary>
        </member>
        <member name="M:Ez.Threading.ThreadMethodExecutor.#ctor(System.Boolean)">
            <summary>
            Initializes a new <see cref="T:Ez.Threading.ThreadMethodExecutor"/> class.
            </summary>
            <param name="autostart">Auto starts the thread.</param>
        </member>
        <member name="M:Ez.Threading.ThreadMethodExecutor.Finalize">
            <summary>
            Destroys a <see cref="T:Ez.Threading.ThreadMethodExecutor"/> class instance.
            </summary>
        </member>
        <member name="E:Ez.Threading.ThreadMethodExecutor.Awake">
            <summary>
            Occurs when the thread is started, before the <see cref="E:Ez.Threading.ThreadMethodExecutor.Start"/> event.
            </summary>
        </member>
        <member name="E:Ez.Threading.ThreadMethodExecutor.Start">
            <summary>
            Occurs when the thread is started, after the <see cref="E:Ez.Threading.ThreadMethodExecutor.Awake"/> event.
            </summary>
        </member>
        <member name="E:Ez.Threading.ThreadMethodExecutor.BeforeInvoking">
            <summary>
            Occurs just before a consumed delegate is invoked.
            </summary>
        </member>
        <member name="E:Ez.Threading.ThreadMethodExecutor.AfterInvoking">
            <summary>
            Occurs just after a consumed delegate is invoked.
            </summary>
        </member>
        <member name="M:Ez.Threading.ThreadMethodExecutor.StartThread">
            <summary>
            Starts the execution of this <see cref="T:Ez.Threading.ThreadMethodExecutor"/>.
            </summary>
        </member>
        <member name="M:Ez.Threading.ThreadMethodExecutor.Invoke(System.Action)">
            <summary>
            Synchronously executes the <paramref name="action"/> on this <see cref="T:Ez.Threading.ThreadMethodExecutor"/>.
            </summary>
            <param name="action">A <see cref="T:System.Action"/> delegate that contains a method to call in this <see cref="T:Ez.Threading.ThreadMethodExecutor"/>.</param>
        </member>
        <member name="M:Ez.Threading.ThreadMethodExecutor.Invoke(System.EventHandler,System.Object,System.EventArgs)">
            <summary>
            Synchronously executes the <paramref name="eventHandler"/> on this <see cref="T:Ez.Threading.ThreadMethodExecutor"/>.
            </summary>
            <param name="eventHandler">A <see cref="T:System.EventHandler"/> delegate that contains a method to call in this <see cref="T:Ez.Threading.ThreadMethodExecutor"/>.</param>
            <param name="sender">The sender parameter of <see cref="T:System.EventHandler"/> to pass to the given method.</param>
            <param name="args">The e parameter of the <see cref="T:System.EventHandler"/> to pass to the given method.</param>
        </member>
        <member name="M:Ez.Threading.ThreadMethodExecutor.Invoke(System.Threading.WaitCallback,System.Object)">
            <summary>
            Synchronously executes the <paramref name="waitCallback"/> on this <see cref="T:Ez.Threading.ThreadMethodExecutor"/>.
            </summary>
            <param name="waitCallback">A <see cref="T:System.Threading.WaitCallback"/> delegate that contains a method to call in this <see cref="T:Ez.Threading.ThreadMethodExecutor"/>.</param>
            <param name="state">The state parameter of <see cref="T:System.Threading.WaitCallback"/> to pass to the given method.</param>
        </member>
        <member name="M:Ez.Threading.ThreadMethodExecutor.Invoke(System.Delegate,System.Object[])">
            <summary>
            Synchronously executes the <paramref name="method"/> on this <see cref="T:Ez.Threading.ThreadMethodExecutor"/>.
            </summary>
            <param name="method">A <see cref="T:System.Delegate"/> that contains a method to call in this <see cref="T:Ez.Threading.ThreadMethodExecutor"/>.</param>
            <param name="args">An array of type <see cref="T:System.Object"/> that represents the arguments to pass to the given method.</param>
            <returns>An <see cref="T:System.Object"/> that represents the return value from the delegate being invoked, or <see langword="null"/> 
            if the delegate has no return value</returns>
        </member>
        <member name="M:Ez.Threading.ThreadMethodExecutor.Invoke``1(System.Func{``0})">
            <summary>
            Synchronously executes the <paramref name="func"/> on this <see cref="T:Ez.Threading.ThreadMethodExecutor"/>.
            </summary>
            <typeparam name="T">The type of return value.</typeparam>
            <param name="func">A <see cref="T:System.Func`1"/> delegate that contains a method to call in this <see cref="T:Ez.Threading.ThreadMethodExecutor"/>.</param>
            <returns>The return value from the delegate being invoked.</returns>
        </member>
        <member name="M:Ez.Threading.ThreadMethodExecutor.Invoke``1(System.Delegate,System.Object[])">
            <summary>
            Synchronously executes the <paramref name="method"/> on this <see cref="T:Ez.Threading.ThreadMethodExecutor"/>.
            </summary>
            <typeparam name="T">The type of return value.</typeparam>
            <param name="method">A <see cref="T:System.Delegate"/> that contains a method to call in this <see cref="T:Ez.Threading.ThreadMethodExecutor"/>.</param>
            <param name="args">An array of type <see cref="T:System.Object"/> that represents the arguments to pass to the given method.</param>
            <returns>The return value from the delegate being invoked, or <see langword="null"/> if the delegate has no return value.</returns>
        </member>
        <member name="M:Ez.Threading.ThreadMethodExecutor.BeginInvoke(System.Action)">
            <summary>
            Asynchronously executes the <see cref="T:System.Action"/> delegate on the thread that created this object.
            </summary>
            <param name="action">A <see cref="T:System.Action"/> that contains a method to call in this <see cref="T:Ez.Threading.ThreadMethodExecutor"/>.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> interface that represents the asynchronous operation started by calling this method.</returns>
        </member>
        <member name="M:Ez.Threading.ThreadMethodExecutor.BeginInvoke(System.Delegate,System.Object[])">
            <summary>
            Asynchronously executes the <see cref="T:System.Delegate"/> on the thread that created this object.
            </summary>
            <param name="method">A <see cref="T:System.Delegate"/> that contains a method to call in this <see cref="T:Ez.Threading.ThreadMethodExecutor"/>.</param>
            <param name="args">An array of type <see cref="T:System.Object"/> that represents the arguments to pass to the given method.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> interface that represents the asynchronous operation started by calling this method.</returns>
        </member>
        <member name="M:Ez.Threading.ThreadMethodExecutor.EndInvoke(System.IAsyncResult)">
            <summary>
            Waits until the process started by calling <see cref="M:Ez.Threading.ThreadMethodExecutor.BeginInvoke(System.Action)"/> or  <see cref="M:Ez.Threading.ThreadMethodExecutor.BeginInvoke(System.Delegate,System.Object[])"/> completes, 
            and then returns the value generated by the process.
            </summary>
            <param name="result">An <see cref="T:System.IAsyncResult"/> interface that represents the asynchronous operation started by calling 
            <see cref="M:Ez.Threading.ThreadMethodExecutor.BeginInvoke(System.Action)"/> or <see cref="M:Ez.Threading.ThreadMethodExecutor.BeginInvoke(System.Delegate,System.Object[])"/>.</param>
            <returns>An <see cref="T:System.Object"/> that represents the return value generated by the asynchronous operation.</returns>
        </member>
        <member name="M:Ez.Threading.ThreadMethodExecutor.EndInvoke``1(System.IAsyncResult)">
            <summary>
            Waits until the process started by calling <see cref="M:Ez.Threading.ThreadMethodExecutor.BeginInvoke(System.Action)"/> or  <see cref="M:Ez.Threading.ThreadMethodExecutor.BeginInvoke(System.Delegate,System.Object[])"/> completes, 
            and then returns the value generated by the process.
            </summary>
            <typeparam name="T">The type of return value.</typeparam>
            <param name="result">n <see cref="T:System.IAsyncResult"/> interface that represents the asynchronous operation started by calling 
            <see cref="M:Ez.Threading.ThreadMethodExecutor.BeginInvoke(System.Action)"/> or <see cref="M:Ez.Threading.ThreadMethodExecutor.BeginInvoke(System.Delegate,System.Object[])"/>.</param>
            <returns>An T value that represents the return value generated by the asynchronous operation.</returns>
        </member>
        <member name="M:Ez.Threading.ThreadMethodExecutor.Dispose">
            <summary>
            Release all resources used by this instance.
            </summary>
        </member>
    </members>
</doc>
