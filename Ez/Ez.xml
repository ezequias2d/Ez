<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Ez</name>
    </assembly>
    <members>
        <member name="T:Ez.Assets.AssetManager">
            <summary>
            Represents that implementation a cached <see cref="T:Ez.Assets.IAssetManager"/>.
            </summary>
        </member>
        <member name="M:Ez.Assets.AssetManager.#ctor(Ez.Assets.IAssetSource)">
            <summary>
            Initializes a new instance of the <see cref="T:Ez.Assets.AssetManager"/> class 
            with a <see cref="T:Ez.Assets.IAssetSource"/>.
            </summary>
            <param name="assetSource"></param>
        </member>
        <member name="M:Ez.Assets.AssetManager.Finalize">
            <summary>
            Destroys a instance of <see cref="T:Ez.Assets.AssetManager"/> class.
            </summary>
        </member>
        <member name="M:Ez.Assets.AssetManager.Dispose">
            <summary>
            Releases all resources used by the <see cref="T:Ez.Assets.AssetManager"/> class.
            </summary>
        </member>
        <member name="M:Ez.Assets.AssetManager.Unload">
            <summary>
            Disposes all data that was loaded by this <see cref="T:Ez.Assets.AssetManager"/>.
            </summary>
        </member>
        <member name="M:Ez.Assets.AssetManager.GetAsset``1(System.String)">
            <summary>
            Get the first loaded asset, if it is already loaded, otherwise load the asset from physical memory 
            </summary>
            <typeparam name="T">Type of asset.</typeparam>
            <param name="assetName">Asset name.</param>
            <returns>The first asset from asset name.</returns>
        </member>
        <member name="M:Ez.Assets.AssetManager.LoadAsset``1(System.String,``0@)">
            <summary>
            Loads an asset to the content manager.
            </summary>
            <typeparam name="T">The type of asset to be loaded.</typeparam>
            <param name="assetName">The name of the asset to be loaded.</param>
            <param name="asset">The asset to be loaded.</param>
        </member>
        <member name="M:Ez.Assets.AssetManager.UnloadAsset``1(System.String)">
            <summary>
            Unloads an asset by type and name in a <see cref="T:Ez.Assets.IAssetManager"/> instance.
            </summary>
            <typeparam name="T">The type of asset to unload.</typeparam>
            <param name="assetName">The name of the asset to be unloaded.</param>
        </member>
        <member name="T:Ez.Assets.AssetReaderCollection">
            <summary>
            A collection of <see cref="T:Ez.Assets.IAssetReader"/>.
            </summary>
        </member>
        <member name="M:Ez.Assets.AssetReaderCollection.#ctor(System.String)">
            <summary>
            Creates a new instance of <see cref="T:Ez.Assets.AssetReaderCollection"/> class.
            </summary>
            <param name="displayName">The value of <see cref="P:Ez.Magics.IMagicSupport.DisplayName"/>
            in <see cref="P:Ez.Assets.AssetReaderCollection.MagicSupport"/>.</param>
        </member>
        <member name="P:Ez.Assets.AssetReaderCollection.MagicSupport">
            <summary>
            Gets <see cref="T:Ez.Magics.IMagicSupport"/> of the <see cref="T:Ez.Assets.AssetReaderCollection"/>
            </summary>
        </member>
        <member name="P:Ez.Assets.AssetReaderCollection.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:Ez.Assets.AssetReaderCollection"/>.
            </summary>
        </member>
        <member name="P:Ez.Assets.AssetReaderCollection.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:Ez.Assets.AssetReaderCollection"/> is read-only.
            </summary>
        </member>
        <member name="M:Ez.Assets.AssetReaderCollection.Add(Ez.Assets.IAssetReader)">
            <summary>
            Adds an item to the <see cref="T:Ez.Assets.AssetReaderCollection"/>.
            </summary>
            <param name="item">The object to add to the <see cref="T:Ez.Assets.AssetReaderCollection"/>.</param>
        </member>
        <member name="M:Ez.Assets.AssetReaderCollection.Clear">
            <summary>
            Removes all items from the <see cref="T:Ez.Assets.AssetReaderCollection"/>.
            </summary>
        </member>
        <member name="M:Ez.Assets.AssetReaderCollection.Contains(Ez.Assets.IAssetReader)">
            <summary>
            Determines whether the <see cref="T:Ez.Assets.AssetReaderCollection"/> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:Ez.Assets.AssetReaderCollection"/>.</param>
            <returns><see langword="true"/> if item is found in the <see cref="T:Ez.Assets.AssetReaderCollection"/>; 
            otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ez.Assets.AssetReaderCollection.CopyTo(Ez.Assets.IAssetReader[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:Ez.Assets.AssetReaderCollection"/> to an <see cref="T:System.Array"/>, 
            starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of 
            the elements copied from <see cref="T:Ez.Assets.AssetReaderCollection"/>. The <see cref="T:System.Array"/> must
            have zero-based indexing.</param>
            <param name="arrayIndex"></param>
        </member>
        <member name="M:Ez.Assets.AssetReaderCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:Ez.Assets.AssetReaderCollection"/>.
            </summary>
            <returns>An enumerator that can be used to iterate through the <see cref="T:Ez.Assets.AssetReaderCollection"/>.</returns>
        </member>
        <member name="M:Ez.Assets.AssetReaderCollection.Remove(Ez.Assets.IAssetReader)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:Ez.Assets.AssetReaderCollection"/>.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Ez.Assets.AssetReaderCollection.TryRead``1(System.IO.Stream,``0@)">
            <summary>
            Based on the <see cref="P:Ez.Magics.IMagiced.MagicSupport"/> property it takes the first 
            <see cref="T:Ez.Assets.IAssetReader"/> of the <see cref="T:Ez.Assets.AssetReaderCollection"/> that supports
            type <typeparamref name="T"/> and tries to read an <paramref name="value"/> of the stream.
            </summary>
            <typeparam name="T">The type of instance to be readed.</typeparam>
            <param name="stream">The stream to read from.</param>
            <param name="value">When this method returns, contains the readed instance, if it is 
            available, otherwise <see langword="null"/>.</param>
            <returns><see langword="true"/> if the value was read; otherwise,
            <see langword="false"/>.</returns>
        </member>
        <member name="T:Ez.Assets.AssetWriterCollection">
            <summary>
            A collection of <see cref="T:Ez.Assets.IAssetWriter"/>.
            </summary>
        </member>
        <member name="M:Ez.Assets.AssetWriterCollection.#ctor(System.String)">
            <summary>
            Creates a new instance of <see cref="T:Ez.Assets.AssetWriterCollection"/> class.
            </summary>
            <param name="displayName">The value of <see cref="P:Ez.Magics.IMagicSupport.DisplayName"/>
            in <see cref="P:Ez.Assets.AssetWriterCollection.MagicSupport"/>.</param>
        </member>
        <member name="P:Ez.Assets.AssetWriterCollection.MagicSupport">
            <summary>
            Gets <see cref="T:Ez.Magics.IMagicSupport"/> of the <see cref="T:Ez.Assets.AssetWriterCollection"/>.
            </summary>
        </member>
        <member name="P:Ez.Assets.AssetWriterCollection.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:Ez.Assets.AssetWriterCollection"/>.
            </summary>
        </member>
        <member name="P:Ez.Assets.AssetWriterCollection.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:Ez.Assets.AssetWriterCollection"/> is read-only.
            </summary>
        </member>
        <member name="M:Ez.Assets.AssetWriterCollection.Add(Ez.Assets.IAssetWriter)">
            <summary>
            Adds an item to the <see cref="T:Ez.Assets.AssetWriterCollection"/>.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Ez.Assets.AssetWriterCollection.Clear">
            <summary>
            Removes all items from the <see cref="T:Ez.Assets.AssetWriterCollection"/>.
            </summary>
        </member>
        <member name="M:Ez.Assets.AssetWriterCollection.Contains(Ez.Assets.IAssetWriter)">
            <summary>
            Determines whether the <see cref="T:Ez.Assets.AssetWriterCollection"/> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:Ez.Assets.AssetWriterCollection"/>.</param>       
            <returns><see langword="true"/> if item is found in the <see cref="T:Ez.Assets.AssetWriterCollection"/>;
            otherwise, <see langword="false"/></returns>
        </member>
        <member name="M:Ez.Assets.AssetWriterCollection.CopyTo(Ez.Assets.IAssetWriter[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:Ez.Assets.AssetWriterCollection"/> to an <see cref="T:System.Array"/>,
            starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of 
            the elements copied from <see cref="T:Ez.Assets.AssetWriterCollection"/>. The <see cref="T:System.Array"/> must
            have zero-based indexing.</param>
            <param name="arrayIndex"></param>
        </member>
        <member name="M:Ez.Assets.AssetWriterCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:Ez.Assets.AssetWriterCollection"/>.
            </summary>
            <returns>An enumerator that can be used to iterate through the <see cref="T:Ez.Assets.AssetWriterCollection"/>.</returns>
        </member>
        <member name="M:Ez.Assets.AssetWriterCollection.Remove(Ez.Assets.IAssetWriter)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:Ez.Assets.AssetWriterCollection"/>.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Ez.Assets.AssetWriterCollection.TryWrite``1(``0@,System.IO.Stream)">
            <summary>
            Based on the <see cref="P:Ez.Magics.IMagiced.MagicSupport"/> property it takes the first 
            <see cref="T:Ez.Assets.IAssetWriter"/> of the <see cref="T:Ez.Assets.AssetWriterCollection"/> that supports
            type <typeparamref name="T"/> and tries to write an <paramref name="value"/> to the stream.
            </summary>
            <typeparam name="T">The type of <paramref name="value"/>.</typeparam>
            <param name="value">The instance to be written.</param>
            <param name="stream">The destination stream.</param>
            <returns><see langword="true"/> if the value was written; otherwise,
            <see langword="false"/>.</returns>
        </member>
        <member name="T:Ez.Assets.IAssetManager">
            <summary>
            Represents a content manager that provides an interface for acquiring assets.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Ez.Assets.IAssetManager.GetAsset``1(System.String)" -->
        <member name="M:Ez.Assets.IAssetManager.LoadAsset``1(System.String,``0@)">
            <summary>
            Loads an asset to the content manager.
            </summary>
            <typeparam name="T">The type of asset to be loaded.</typeparam>
            <param name="assetName">The name of the asset to be loaded.</param>
            <param name="asset">The asset to be loaded.</param>
        </member>
        <member name="M:Ez.Assets.IAssetManager.UnloadAsset``1(System.String)">
            <summary>
            Unloads an asset by type and name in a <see cref="T:Ez.Assets.IAssetManager"/> instance.
            </summary>
            <typeparam name="T">The type of asset to unload.</typeparam>
            <param name="assetName">The name of the asset to be unloaded.</param>
        </member>
        <member name="M:Ez.Assets.IAssetManager.Unload">
            <summary>
            Unloads all assets in a <see cref="T:Ez.Assets.IAssetManager"/> instance.
            </summary>
        </member>
        <member name="T:Ez.Assets.IAssetReader">
            <summary>
            Provides an interface to deserialize.
            </summary>
        </member>
        <member name="M:Ez.Assets.IAssetReader.TryRead``1(System.IO.Stream,``0@)">
            <summary>
            Attempts to read an <paramref name="value"/> from the stream.
            </summary>
            <typeparam name="T">The type of instance to be readed.</typeparam>
            <param name="stream">The stream to read from.</param>
            <param name="value">When this method returns, contains the readed instance,
            if it is available, otherwise <see langword="null"/>.</param>
            <returns><see langword="true"/> if the value was read; otherwise,
            <see langword="false"/>.</returns>
        </member>
        <member name="T:Ez.Assets.IAssetSource">
            <summary>
            Represents a source from which assets can be read and written.
            </summary>
        </member>
        <member name="M:Ez.Assets.IAssetSource.WriteAsset``1(``0@,System.String@)">
            <summary>
            Writes an <paramref name="asset"/> in the <see cref="T:Ez.Assets.IAssetSource"/>.
            </summary>
            <typeparam name="T">The type of asset to be written.</typeparam>
            <param name="asset">The asset to be written.</param>
            <param name="assetName">The name of asset to be written.</param>
        </member>
        <member name="M:Ez.Assets.IAssetSource.ReadAsset``1(System.String,``0@)">
            <summary>
            Reads an asset from the <see cref="T:Ez.Assets.IAssetSource"/>.
            </summary>
            <typeparam name="T">The type of asset to be read.</typeparam>
            <param name="assetName">The name of asset to be read.</param>
            <param name="asset">The asset read from the source, otherwise, <see langword="default"/>.</param>
            <returns><see langword="true"/>, if the asset was read correctly, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="T:Ez.Assets.IAssetWriter">
            <summary>
            Provides an interface to serialize.
            </summary>
        </member>
        <member name="M:Ez.Assets.IAssetWriter.TryWrite``1(``0@,System.IO.Stream)">
            <summary>
            Attempts to write an <paramref name="value"/> to the stream.
            </summary>
            <typeparam name="T">The type of <paramref name="value"/>.</typeparam>
            <param name="value">The instance to be written.</param>
            <param name="stream">The destination stream.</param>
            <returns></returns>
        </member>
        <member name="T:Ez.Collections.CollectionExtensions">
            <summary>
            Extensions for collections.
            </summary>
        </member>
        <member name="M:Ez.Collections.CollectionExtensions.AsReadOnly``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            Converts the <paramref name="collection"/> to <see cref="T:System.Collections.Generic.IReadOnlyCollection`1"/>, if implemented, 
            or create a <see cref="T:System.Collections.Generic.IReadOnlyCollection`1"/> wrapper for the <paramref name="collection"/>.
            </summary>
            <typeparam name="T">Type of elements in <paramref name="collection"/>.</typeparam>
            <param name="collection">The <see cref="T:System.Collections.Generic.ICollection`1"/> to turn into <see cref="T:System.Collections.Generic.IReadOnlyCollection`1"/>.</param>
            <returns>The <see cref="T:System.Collections.Generic.IReadOnlyCollection`1"/> representation of <paramref name="collection"/>.</returns>
        </member>
        <member name="M:Ez.Collections.CollectionExtensions.ShallowCopy``1(``0[])">
            <summary>
            Creates a shallow copy of <paramref name="ts"/>.
            </summary>
            <typeparam name="T">Type of each element in array.</typeparam>
            <param name="ts">The array to create a shallow copy.</param>
            <returns>A shallow copy of <paramref name="ts"/>.</returns>
        </member>
        <member name="M:Ez.Collections.CollectionExtensions.ShallowCopy``2(``1[])">
            <summary>
            Creates a shallow copy of <paramref name="us"/> in other format.
            </summary>
            <typeparam name="T">The type of each element in the shallow array copy.</typeparam>
            <typeparam name="U">The type of each element in the <paramref name="us"/> array.</typeparam>
            <param name="us">The array to make a copy.</param>
            <returns>A shallow copy of <paramref name="us"/> with T type.</returns>
        </member>
        <member name="M:Ez.Collections.CollectionExtensions.ShallowCopy``2(``0[])">
            <summary>
            Creates a shallow copy of <paramref name="us"/> in other format.
            </summary>
            <typeparam name="U">The type of each element in the <paramref name="us"/> array.</typeparam>
            <typeparam name="T">The type of each element in the shallow array copy.</typeparam>
            <param name="us">The array to make a copy.</param>
            <returns>A shallow copy of <paramref name="us"/> with T type.</returns>
        </member>
        <member name="M:Ez.Collections.CollectionExtensions.MinimumArray``1(``0[]@,System.Int32)">
            <summary>
            Resize <paramref name="array"/> to <paramref name="size"/>, or creates a new array, if <paramref name="array"/> is null.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array"></param>
            <param name="size"></param>
        </member>
        <member name="T:Ez.Collections.ConcurrentList`1">
            <summary>
            Represents a thread-safe wrapping for <see cref="T:System.Collections.Generic.IList`1"/>
            </summary>
            <typeparam name="T">Type of elements using in <see cref="T:Ez.Collections.ISynchronizedList`1"/> interface.</typeparam>
        </member>
        <member name="M:Ez.Collections.ConcurrentList`1.#ctor(System.Collections.Generic.IList{`0},System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Ez.Collections.ConcurrentList`1"/> class that wraps a <see cref="T:System.Collections.Generic.IList`1"/> instance and define an instance to be used as synchronize.
            </summary>
            <param name="list">Wrapped instance.</param>
            <param name="sync">Sync instance.</param>
        </member>
        <member name="M:Ez.Collections.ConcurrentList`1.#ctor(System.Collections.Generic.IList{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Ez.Collections.ConcurrentList`1"/> class that wraps a <see cref="T:System.Collections.Generic.IList`1"/> instance.
            </summary>
            <param name="list">Wrapped instance.</param>
        </member>
        <member name="M:Ez.Collections.ConcurrentList`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ez.Collections.ConcurrentList`1"/> class that wraps a new instance of <see cref="T:System.Collections.Generic.List`1"/> class.
            </summary>
        </member>
        <member name="M:Ez.Collections.ConcurrentList`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Ez.Collections.ConcurrentList`1"/> class that wraps a new instance of <see cref="T:System.Collections.Generic.List`1"/> class that contains elements copied from the specified collection.
            </summary>
            <param name="collection">Collection</param>
        </member>
        <member name="P:Ez.Collections.ConcurrentList`1.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <returns>The element at the specified index.</returns>
        </member>
        <member name="P:Ez.Collections.ConcurrentList`1.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:Ez.Collections.ConcurrentList`1"/>.
            </summary>
        </member>
        <member name="P:Ez.Collections.ConcurrentList`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:Ez.Collections.ConcurrentList`1"/> is read-only.
            </summary>
        </member>
        <member name="P:Ez.Collections.ConcurrentList`1.Sync">
            <summary>
            The sync object.
            </summary>
        </member>
        <member name="M:Ez.Collections.ConcurrentList`1.Add(`0)">
            <summary>
            Adds an item to the <see cref="T:Ez.Collections.ConcurrentList`1"/>.
            </summary>
            <param name="item">The object to add to the <see cref="T:Ez.Collections.ConcurrentList`1"/>.</param>
        </member>
        <member name="M:Ez.Collections.ConcurrentList`1.Clear">
            <summary>
            Removes all items from the <see cref="T:Ez.Collections.ConcurrentList`1"/>.
            </summary>
        </member>
        <member name="M:Ez.Collections.ConcurrentList`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:Ez.Collections.ConcurrentList`1"/> to an <see cref="T:System.Array"/>,
            starting at a particular index.
            </summary>
            <param name="array">The one-dimensional Array that is the destination of the elements copied
            from <see cref="T:Ez.Collections.ConcurrentList`1"/>. The <see cref="T:System.Array"/> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.</param>
        </member>
        <member name="M:Ez.Collections.ConcurrentList`1.Insert(System.Int32,`0)">
            <summary>
            Inserts an item to the <see cref="T:Ez.Collections.ConcurrentList`1"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="item"/> should be inserted.</param>
            <param name="item">The object to insert into the <see cref="T:Ez.Collections.ConcurrentList`1"/>.</param>
        </member>
        <member name="M:Ez.Collections.ConcurrentList`1.Remove(`0)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:Ez.Collections.ConcurrentList`1"/>.
            </summary>
            <param name="item">The object to remove from the <see cref="T:Ez.Collections.ConcurrentList`1"/>.</param>
            <returns><see langword="true"/> if item was successfully removed from the 
            <see cref="T:Ez.Collections.ConcurrentList`1"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ez.Collections.ConcurrentList`1.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:Ez.Collections.ConcurrentList`1"/> item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param>
        </member>
        <member name="M:Ez.Collections.ConcurrentList`1.Contains(`0)">
            <summary>
            Determines whether the <see cref="T:Ez.Collections.ConcurrentList`1"/> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:Ez.Collections.ConcurrentList`1"/>.</param>
            <returns><see langword="true"/> if item is found in the <see cref="T:Ez.Collections.ConcurrentList`1"/>; otherwise, 
            <see langword="false"/>.</returns>
        </member>
        <member name="M:Ez.Collections.ConcurrentList`1.IndexOf(`0)">
            <summary>
            Determines the index of a specific item in the <see cref="T:Ez.Collections.ConcurrentList`1"/>.
            </summary>
            <param name="item">The object to locate in the <see cref="T:Ez.Collections.ConcurrentList`1"/>.</param>
            <returns>The index of <paramref name="item"/> if found in the list; otherwise, -1.</returns>
        </member>
        <member name="M:Ez.Collections.ConcurrentList`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1"/> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Ez.Collections.ConcurrentList`1.GetOperationList">
            <summary>
            Create a instance of <see cref="T:Ez.Collections.ConcurrentOperationList`1"/> for this <see cref="T:Ez.Collections.ConcurrentList`1"/>.
            </summary>
            <returns>Instance of <see cref="T:Ez.Collections.ConcurrentOperationList`1"/></returns>
        </member>
        <member name="T:Ez.Collections.ConcurrentOperationList`1">
            <summary>
            A wrapper for the list that synchronizes using a "Sync" object until it is disposed.
            </summary>
            <typeparam name="T">Type of elements using in <see cref="T:Ez.Collections.ISynchronizedList`1"/> interface.</typeparam>
        </member>
        <member name="M:Ez.Collections.ConcurrentOperationList`1.#ctor(System.Collections.Generic.IList{`0},System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Ez.Collections.ConcurrentOperationList`1"/> class that wraps a <see cref="T:System.Collections.Generic.IList`1"/> instance and define a <see cref="P:Ez.Collections.ConcurrentOperationList`1.Sync"/> object.
            </summary>
            <param name="list">Wrapped instance.</param>
            <param name="sync">Sync instance.</param>
        </member>
        <member name="M:Ez.Collections.ConcurrentOperationList`1.Finalize">
            <summary>
            Destroys a instance of the <see cref="T:Ez.Collections.ConcurrentOperationList`1"/> class.
            </summary>
        </member>
        <member name="P:Ez.Collections.ConcurrentOperationList`1.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <returns>The element at the specified index.</returns>
        </member>
        <member name="P:Ez.Collections.ConcurrentOperationList`1.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:Ez.Collections.ConcurrentOperationList`1"/>.
            </summary>
        </member>
        <member name="P:Ez.Collections.ConcurrentOperationList`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:Ez.Collections.ConcurrentOperationList`1"/> is read-only.
            </summary>
        </member>
        <member name="P:Ez.Collections.ConcurrentOperationList`1.Sync">
            <summary>
            The sync object.
            </summary>
        </member>
        <member name="M:Ez.Collections.ConcurrentOperationList`1.Add(`0)">
            <summary>
            Adds an item to the <see cref="T:Ez.Collections.ConcurrentOperationList`1"/>.
            </summary>
            <param name="item">The object to add to the <see cref="T:Ez.Collections.ConcurrentOperationList`1"/>.</param>
        </member>
        <member name="M:Ez.Collections.ConcurrentOperationList`1.Clear">
            <summary>
            Removes all items from the <see cref="T:Ez.Collections.ConcurrentOperationList`1"/>.
            </summary>
        </member>
        <member name="M:Ez.Collections.ConcurrentOperationList`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:Ez.Collections.ConcurrentOperationList`1"/> to an <see cref="T:System.Array"/>,
            starting at a particular index.
            </summary>
            <param name="array">The one-dimensional Array that is the destination of the elements copied
            from <see cref="T:Ez.Collections.ConcurrentOperationList`1"/>. The <see cref="T:System.Array"/> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.</param>
        </member>
        <member name="M:Ez.Collections.ConcurrentOperationList`1.Insert(System.Int32,`0)">
            <summary>
            Inserts an item to the <see cref="T:Ez.Collections.ConcurrentOperationList`1"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="item"/> should be inserted.</param>
            <param name="item">The object to insert into the <see cref="T:Ez.Collections.ConcurrentOperationList`1"/>.</param>
        </member>
        <member name="M:Ez.Collections.ConcurrentOperationList`1.Remove(`0)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:Ez.Collections.ConcurrentOperationList`1"/>.
            </summary>
            <param name="item">The object to remove from the <see cref="T:Ez.Collections.ConcurrentOperationList`1"/>.</param>
            <returns><see langword="true"/> if item was successfully removed from the 
            <see cref="T:Ez.Collections.ConcurrentOperationList`1"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ez.Collections.ConcurrentOperationList`1.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:Ez.Collections.ConcurrentOperationList`1"/> item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param>
        </member>
        <member name="M:Ez.Collections.ConcurrentOperationList`1.Dispose">
            <summary>
            Releases the sync object.
            </summary>
        </member>
        <member name="M:Ez.Collections.ConcurrentOperationList`1.Contains(`0)">
            <summary>
            Determines whether the <see cref="T:Ez.Collections.ConcurrentOperationList`1"/> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:Ez.Collections.ConcurrentOperationList`1"/>.</param>
            <returns><see langword="true"/> if item is found in the <see cref="T:Ez.Collections.ConcurrentOperationList`1"/>; otherwise, 
            <see langword="false"/>.</returns>
        </member>
        <member name="M:Ez.Collections.ConcurrentOperationList`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1"/> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Ez.Collections.ConcurrentOperationList`1.IndexOf(`0)">
            <summary>
            Determines the index of a specific item in the <see cref="T:Ez.Collections.ConcurrentOperationList`1"/>.
            </summary>
            <param name="item">The object to locate in the <see cref="T:Ez.Collections.ConcurrentOperationList`1"/>.</param>
            <returns>The index of <paramref name="item"/> if found in the list; otherwise, -1.</returns>
        </member>
        <member name="T:Ez.Collections.DiscontiguousList`1">
            <summary>
            A discontinuous list of values.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Ez.Collections.DiscontiguousList`1.DefragAction">
            <summary>
            Encapsulates a method that remaps an old index to a new one .
            </summary>
            <param name="olderIndex"></param>
            <param name="newerIndex"></param>
        </member>
        <member name="M:Ez.Collections.DiscontiguousList`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ez.Collections.DiscontiguousList`1"/> class.
            </summary>
        </member>
        <member name="M:Ez.Collections.DiscontiguousList`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Ez.Collections.DiscontiguousList`1"/> class that 
            contains elements copied from the specified collection.
            </summary>
            <param name="collection">The collection whose elements are copied to the new list.</param>
        </member>
        <member name="P:Ez.Collections.DiscontiguousList`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:Ez.Collections.DiscontiguousList`1"/> is read-only.
            </summary>
        </member>
        <member name="P:Ez.Collections.DiscontiguousList`1.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:Ez.Collections.DiscontiguousList`1"/>.
            </summary>
        </member>
        <member name="P:Ez.Collections.DiscontiguousList`1.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Ez.Collections.DiscontiguousList`1.Add(`0@)">
            <summary>
            Adds an item to the <see cref="T:Ez.Collections.DiscontiguousList`1"/>.
            </summary>
            <param name="item">The objejct to add to the <see cref="T:Ez.Collections.DiscontiguousList`1"/>.</param>
            <returns>The index of <paramref name="item"/> item in the list.</returns>
        </member>
        <member name="M:Ez.Collections.DiscontiguousList`1.Clear">
            <summary>
            Removes all items form the <see cref="T:Ez.Collections.DiscontiguousList`1"/>.
            </summary>
        </member>
        <member name="M:Ez.Collections.DiscontiguousList`1.Contains(`0)">
            <summary>
            Determines wheter the <see cref="T:Ez.Collections.DiscontiguousList`1"/> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:Ez.Collections.DiscontiguousList`1"/>.</param>
            <returns></returns>
        </member>
        <member name="M:Ez.Collections.DiscontiguousList`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:Ez.Collections.DiscontiguousList`1"/> to an <see cref="T:System.Array"/>,
            starting at a particular index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the 
            elements copied from <see cref="T:Ez.Collections.DiscontiguousList`1"/>.</param>
            <param name="arrayIndex"></param>
        </member>
        <member name="M:Ez.Collections.DiscontiguousList`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Ez.Collections.DiscontiguousList`1.IndexOf(`0)">
            <summary>
            Determines the index of a specific item in the <see cref="T:Ez.Collections.DiscontiguousList`1"/>.
            </summary>
            <param name="item">The object to locate in the <see cref="T:Ez.Collections.DiscontiguousList`1"/>.</param>
            <returns>The index of <paramref name="item"/> if found in the list; otherwise, -1.</returns>
        </member>
        <member name="M:Ez.Collections.DiscontiguousList`1.Insert(System.Int32,`0)">
            <summary>
            Not implemented.
            </summary>
        </member>
        <member name="M:Ez.Collections.DiscontiguousList`1.Remove(`0)">
            <summary>
            Removes the first occurence of a specific object from the <see cref="T:Ez.Collections.DiscontiguousList`1"/>.
            </summary>
            <param name="item">The object to remove from the <see cref="T:Ez.Collections.DiscontiguousList`1"/>.</param>
            <returns><see langword="true"/> if <paramref name="item"/> was successfully removed 
            from the <see cref="T:Ez.Collections.DiscontiguousList`1"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ez.Collections.DiscontiguousList`1.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:Ez.Collections.DiscontiguousList`1"/> item at the specified index.
            </summary>
            <param name="index">The zero-bsed index of the item to remove.</param>
        </member>
        <member name="M:Ez.Collections.DiscontiguousList`1.Defrag(Ez.Collections.DiscontiguousList{`0}.DefragAction)">
            <summary>
            Degragment the <see cref="T:Ez.Collections.DiscontiguousList`1"/>.
            </summary>
            <param name="action">Function used to remap indexes externally.</param>
        </member>
        <member name="T:Ez.Collections.ISelfIndexedDictionary`2">
            <summary>
            Describes a dictionary that can auto-index a type that auto-indexes.
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="T:Ez.Collections.ISelfIndexedElement`1">
            <summary>
            An element that can be auto indexing.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Ez.Collections.ISelfIndexedElement`1.Key">
            <summary>
            The index for a <see cref="T:Ez.Collections.ISelfIndexedElement`1"/>.
            </summary>
        </member>
        <member name="E:Ez.Collections.ISelfIndexedElement`1.KeyPropertyChange">
            <summary>
            Action(T oldKey)
            </summary>
        </member>
        <member name="T:Ez.Collections.ISynchronizable">
            <summary>
            Interface that specifies that an object of the class can be synced using the object provided by Sync.
            </summary>
        </member>
        <member name="P:Ez.Collections.ISynchronizable.Sync">
            <summary>
            Object used for sync.
            </summary>
        </member>
        <member name="T:Ez.Collections.ISynchronizedList`1">
            <summary>
            A List that implements synchronization using ISynchronizable interface.
            </summary>
            <typeparam name="T">Type of elements using in <see cref="T:System.Collections.Generic.IList`1"/> interface.</typeparam>
        </member>
        <member name="T:Ez.Collections.MultiValueDicionary`2">
            <summary>
            Represents a colleciton of keys and values that each key can have more than one value.
            </summary>
            <typeparam name="TKey">The type of the keys in the dictionary.</typeparam>
            <typeparam name="TValue">The type of the values in the dictionary.</typeparam>
        </member>
        <member name="F:Ez.Collections.MultiValueDicionary`2.NewCollectionFactory">
            <summary>
            The function to construct a new <see cref="T:System.Collections.Generic.ICollection`1"/>
            </summary>
        </member>
        <member name="M:Ez.Collections.MultiValueDicionary`2.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Ez.Collections.MultiValueDicionary`2"/> class that is empty.
            </summary>
        </member>
        <member name="M:Ez.Collections.MultiValueDicionary`2.#ctor(System.Collections.Generic.IDictionary{`0,System.Collections.Generic.ICollection{`1}},System.Func{System.Collections.Generic.ICollection{`1}})">
            <summary>
            Initializes a new instance of <see cref="T:Ez.Collections.MultiValueDicionary`2"/> class that wraps a
            <see cref="T:System.Collections.Generic.IDictionary`2"/> dictionary and with a custom function to create a sub-collection.
            </summary>
            <param name="dictionary">The dictionary to wraps.</param>
            <param name="newCollectionFactory">A delegate to create a new sub-collection used in
            <see cref="T:Ez.Collections.MultiValueDicionary`2"/></param>
        </member>
        <member name="P:Ez.Collections.MultiValueDicionary`2.Item(`0)">
            <summary>
            Gets the values associated with the specified key.
            </summary>
            <param name="key">The key of the values to get.</param>
            <returns>The value associated with the specified key. If the specified key is not found, 
            a get operation throws a <see cref="T:System.Collections.Generic.KeyNotFoundException"/>.</returns>
        </member>
        <member name="P:Ez.Collections.MultiValueDicionary`2.Keys">
            <summary>
            Gets an enumerable collection that contains the keys in the read-only dictionary.
            </summary>
        </member>
        <member name="P:Ez.Collections.MultiValueDicionary`2.Values">
            <summary>
            Gets an enumerable collection that contains the values in the read-only multi-value dictionary.
            </summary>
        </member>
        <member name="P:Ez.Collections.MultiValueDicionary`2.Count">
            <summary>
             Gets the number of elements in the collection.
            </summary>
        </member>
        <member name="P:Ez.Collections.MultiValueDicionary`2.AllElements">
            <summary>
            Get an enumerable collection that contains all the values in the read-only multi-value dictionary.
            </summary>
        </member>
        <member name="M:Ez.Collections.MultiValueDicionary`2.Add(`0,`1)">
            <summary>
            Adds the specified key and value to the dictionary.
            </summary>
            <param name="key">The key of the element to add.</param>
            <param name="value">The value of the element to add. The value can be null for reference types.</param>
        </member>
        <member name="M:Ez.Collections.MultiValueDicionary`2.AddRange(`0,System.Collections.Generic.IEnumerable{`1})">
            <summary>
            Adds the specified key and multiple values to the dictionary.
            </summary>
            <param name="key">The key of elements to add.</param>
            <param name="values">The values of elements to add.</param>
        </member>
        <member name="M:Ez.Collections.MultiValueDicionary`2.Remove(`0,`1)">
            <summary>
            Removes the value with the specified key from the <see cref="T:Ez.Collections.MultiValueDicionary`2"/>.
            </summary>
            <param name="key">The key of the element to remove.</param>
            <param name="value">The value of the element to remove.</param>
            <returns><see langword="true"/> if the element is successfully found and removed; otherwise, 
            <see langword="false"/>. This method returns <see langword="false"/> if <paramref name="key"/> 
            is not found in the <see cref="T:Ez.Collections.MultiValueDicionary`2"/>.</returns>
        </member>
        <member name="M:Ez.Collections.MultiValueDicionary`2.RemoveKey(`0)">
            <summary>
            Removes all values with the specified <paramref name="key"/> from the 
            <see cref="T:Ez.Collections.MultiValueDicionary`2"/>.
            </summary>
            <param name="key">The key of the elements to remove.</param>
            <returns><see langword="true"/> if the element is successfully found and removed; otherwise, 
            <see langword="false"/>. This method returns <see langword="false"/> if <paramref name="key"/> 
            is not found in the <see cref="T:Ez.Collections.MultiValueDicionary`2"/>.</returns>
        </member>
        <member name="M:Ez.Collections.MultiValueDicionary`2.Contains(`0,`1)">
            <summary>
            Determines wheter the <see cref="T:Ez.Collections.MultiValueDicionary`2"/> contains 
            specific linked <paramref name="key"/> and <paramref name="value"/>.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Ez.Collections.MultiValueDicionary`2.Clear">
            <summary>
            Removes all items from the <see cref="T:Ez.Collections.MultiValueDicionary`2"/>.
            </summary>
        </member>
        <member name="M:Ez.Collections.MultiValueDicionary`2.ContainsKey(`0)">
            <summary>
            Determines whether the <see cref="T:Ez.Collections.MultiValueDicionary`2"/> contains the specified key.
            </summary>
            <param name="key">The key to locate in the <see cref="T:Ez.Collections.MultiValueDicionary`2"/>.</param>
            <returns><see langword="true"/> if the <see cref="T:Ez.Collections.MultiValueDicionary`2"/>
            contains an element with the specified key; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ez.Collections.MultiValueDicionary`2.ContainsValue(`1)">
            <summary>
            Determines wheter the <see cref="T:Ez.Collections.MultiValueDicionary`2"/> contains a specific value.
            </summary>
            <param name="value">The value to locate in the <see cref="T:Ez.Collections.MultiValueDicionary`2"/>.
            The value can be null for reference types.</param>
            <returns><see langword="true"/> if the <see cref="T:Ez.Collections.MultiValueDicionary`2"/>
            contains an element with the specified value; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ez.Collections.MultiValueDicionary`2.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:Ez.Collections.MultiValueDicionary`2"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ez.Collections.MultiValueDicionary`2.TryGetValue(`0,System.Collections.Generic.IReadOnlyCollection{`1}@)">
            <summary>
            Gets values associated with the specified key.
            </summary>
            <param name="key">The key of the values to get.</param>
            <param name="value">When this method returns, contains the value associated withthe specified key,
            if the key is foumd; otherwise, null.</param>
            <returns><see langword="true"/> if the <see cref="T:Ez.Collections.MultiValueDicionary`2"/> contains an
            element with the specified key; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="T:Ez.Collections.Pools.IObjectPoolAssistant`2">
            <summary>
            An interface to implement a assistant used by an <see cref="T:Ez.Collections.Pools.ObjectPool`2"/> to evaluate, create, register an object and decide when to clean objects from the pool.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TSpecs"></typeparam>
        </member>
        <member name="M:Ez.Collections.Pools.IObjectPoolAssistant`2.Evaluate(`0@,`1@,System.Int32)">
            <summary>
            Evaluates whether a <paramref name="item"/> has <paramref name="specs"/> specifications.
            </summary>
            <param name="item">The item to evaluates.</param>
            <param name="specs">The specifications used to evaluate.</param>
            <param name="currentTolerance">Current tolerance, to avoid false negatives put 0.</param>
            <returns><see langword="false"/>, if the item does not meet the specifications or is a false 
            negative based on internal logic using the current tolerance as the main factor, otherwise <see langword="true"/>.</returns>
        </member>
        <member name="M:Ez.Collections.Pools.IObjectPoolAssistant`2.Create(`1@)">
            <summary>
            Creates a new T item that <paramref name="specs"/> describes.
            </summary>
            <param name="specs">The specifications for creating.</param>
            <returns>A new T item.</returns>
        </member>
        <member name="M:Ez.Collections.Pools.IObjectPoolAssistant`2.RegisterReturn(`0@)">
            <summary>
            Registers an <paramref name="item"/> returning to the <see cref="T:Ez.Collections.Pools.ObjectPool`2"/>.
            </summary>
            <param name="item">An item to register.</param>
        </member>
        <member name="M:Ez.Collections.Pools.IObjectPoolAssistant`2.RegisterGet(`0@)">
            <summary>
            Registers an <paramref name="item"/> leaving the <see cref="T:Ez.Collections.Pools.ObjectPool`2"/>.
            </summary>
            <param name="item">An item to register.</param>
        </member>
        <member name="M:Ez.Collections.Pools.IObjectPoolAssistant`2.IsClear">
            <summary>
            Checks if the pool is clean enough to remain uncleaned.
            </summary>
            <returns><see langword="true"/> if it is clean enough, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="T:Ez.Collections.Pools.ObjectPool`2">
            <summary>
            A pool of objects.
            </summary>
            <typeparam name="T">T object</typeparam>
            <typeparam name="TSpecs">Wrapper of T object</typeparam>
        </member>
        <member name="M:Ez.Collections.Pools.ObjectPool`2.#ctor(Ez.Collections.Pools.IObjectPoolAssistant{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Ez.Collections.Pools.ObjectPool`2"/> class that is empty.
            </summary>
            <param name="assistant"></param>
        </member>
        <member name="P:Ez.Collections.Pools.ObjectPool`2.Count">
            <summary>
            Number of elements in the <see cref="T:Ez.Collections.Pools.ObjectPool`2"/>.
            </summary>
        </member>
        <member name="M:Ez.Collections.Pools.ObjectPool`2.Get(`1,System.Int32)">
            <summary>
            Get a wrapper with a T object.
            </summary>
            <param name="specs">Specifications for the object taken from the pool.</param>
            <param name="tolerance">Maximum number of attempts to acquire an object with specifications.</param>
            <returns>A <see cref="T:Ez.Collections.Pools.PooledObject`1"/> object that the <see cref="P:Ez.Collections.Pools.PooledObject`1.Value"/> is validated with <paramref name="specs"/>.</returns>
        </member>
        <member name="M:Ez.Collections.Pools.ObjectPool`2.GetT(`1,System.Int32)">
            <summary>
            Get a T object.
            </summary>
            <param name="specs">Specifications for the object taken from the pool.</param>
            <param name="tolerance">Number of attempts to get an object corresponding to <paramref name="specs"/>.</param>
            <returns>A T object that is validated with <paramref name="specs"/>.</returns>
        </member>
        <member name="M:Ez.Collections.Pools.ObjectPool`2.TryGet(Ez.Collections.Pools.PooledObject{`0}@,`1@,System.Int32)">
            <summary>
            Try get a wrapper with a T object.
            </summary>
            <param name="pooledObject">A wrapper with a T object.</param>
            <param name="specs">Specifications for the object taken from the pool.</param>
            <param name="tolerance">Number of attempts to get an object corresponding to <paramref name="specs"/>.</param>
            <returns>
            If tolerance &lt; 0, or
             failure <paramref name="tolerance"/> times to find an object whose <paramref name="specs"/> are valid,
             then returns <see langword="false"/> and <paramref name="pooledObject"/> = <see langword="null"/>,
            otherwise, returns <see langword="true"/> and a <see cref="T:Ez.Collections.Pools.PooledObject`1"/> with a valid <see cref="P:Ez.Collections.Pools.PooledObject`1.Value"/> 
            in <paramref name="pooledObject"/>.
            </returns>
        </member>
        <member name="M:Ez.Collections.Pools.ObjectPool`2.TryGetT(`0@,`1@,System.Int32@)">
            <summary>
            Try get a T object.
            </summary>
            <param name="value">When this method returns <see langword="true"/>, contains the value that had got.</param>
            <param name="specs">Specifications for the object taken from the pool.</param>
            <param name="tolerance">Number of attempts to get an object corresponding to <paramref name="specs"/>.</param>
            <returns>If tolerance &lt; 0, or
             failure <paramref name="tolerance"/> times to find an object whose <paramref name="specs"/> are valid,
             then returns <see langword="false"/> and <paramref name="value"/> = <see langword="default"/>,
            otherwise, returns <see langword="true"/> and a valid <paramref name="value"/>.</returns>
        </member>
        <member name="M:Ez.Collections.Pools.ObjectPool`2.Return(`0@)">
            <summary>
            Only return a T object.
            </summary>
            <param name="item">Value saved in pool.</param>
        </member>
        <member name="M:Ez.Collections.Pools.ObjectPool`2.Return(Ez.Collections.Pools.PooledObject{`0,`1}@)">
            <summary>
            Only return a wrapper for a T object.
            </summary>
            <param name="wrapper">Wrapper of a T object.</param>
        </member>
        <member name="M:Ez.Collections.Pools.ObjectPool`2.Clear">
            <summary>
            Removes and disposes all of <see cref="T:Ez.Collections.Pools.PooledObject`1"/> and your values in this <see cref="T:Ez.Collections.Pools.ObjectPool`2"/>.
            </summary>
        </member>
        <member name="M:Ez.Collections.Pools.ObjectPool`2.ClearWrappers">
            <summary>
            Removes and disposes all of unused <see cref="T:Ez.Collections.Pools.PooledObject`1"/> in this <see cref="T:Ez.Collections.Pools.ObjectPool`2"/>
            </summary>
        </member>
        <member name="T:Ez.Collections.Pools.ObjectPoolAssistant`2">
            <summary>
            An default implementation of <see cref="T:Ez.Collections.Pools.IObjectPoolAssistant`2"/> that uses
            delegates for <see cref="M:Ez.Collections.Pools.ObjectPoolAssistant`2.Create(`1@)"/> and <see cref="M:Ez.Collections.Pools.ObjectPoolAssistant`2.Evaluate(`0@,`1@,System.Int32)"/>.
            </summary>
            <typeparam name="T">The type that assistant evaluates and creates.</typeparam>
            <typeparam name="TSpecs">The type of data used to evaluate an item.</typeparam>
        </member>
        <member name="T:Ez.Collections.Pools.ObjectPoolAssistant`2.CreateFunction">
            <summary>
            A delegate that wraps a create function based on a TSpecs value.
            </summary>
            <param name="value">A value used to describe how the created item is.</param>
            <returns>A new T item.</returns>
        </member>
        <member name="T:Ez.Collections.Pools.ObjectPoolAssistant`2.EvaluateFunction">
            <summary>
            
            </summary>
            <param name="item"></param>
            <param name="specs"></param>
            <param name="currentTolerance"></param>
            <returns></returns>
        </member>
        <member name="M:Ez.Collections.Pools.ObjectPoolAssistant`2.#ctor(Ez.Collections.Pools.ObjectPoolAssistant{`0,`1}.CreateFunction,Ez.Collections.Pools.ObjectPoolAssistant{`0,`1}.EvaluateFunction,System.UInt32)">
            <summary>
            Initializes a new instance of <see cref="T:Ez.Collections.Pools.ObjectPoolAssistant`2"/> thats wraps a create function and evaluate function.
            </summary>
            <param name="create">The create function of a T item.</param>
            <param name="evaluate">The evaluate function of a T item.</param>
            <param name="clearCount">The number of elements counted for <see cref="M:Ez.Collections.Pools.ObjectPoolAssistant`2.IsClear"/> returns <see langword="false"/>.</param>
        </member>
        <member name="M:Ez.Collections.Pools.ObjectPoolAssistant`2.Create(`1@)">
            <summary>
            Creates a new T item that <paramref name="specs"/> describes.
            </summary>
            <param name="specs">The specifications for creating.</param>
            <returns>A new T item.</returns>
        </member>
        <member name="M:Ez.Collections.Pools.ObjectPoolAssistant`2.Evaluate(`0@,`1@,System.Int32)">
            <summary>
            Evaluates whether an <paramref name="item"/> has <paramref name="specs"/> specifications.
            </summary>
            <param name="item">The item to evaluates.</param>
            <param name="specs">The specifications used to evaluate.</param>
            <param name="currentTolerance">Current tolerance, to avoid false negatives put 0.</param>
            <returns><see langword="false"/>, if the item does not meet the specifications or is a false 
            negative based on internal logic using the current tolerance as the main factor, otherwise <see langword="true"/>.</returns>
        </member>
        <member name="M:Ez.Collections.Pools.ObjectPoolAssistant`2.IsClear">
            <summary>
            Checks if the pool is clean enough to remain uncleaned.
            </summary>
            <returns><see langword="true"/> if it is clean enough, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Ez.Collections.Pools.ObjectPoolAssistant`2.RegisterReturn(`0@)">
            <summary>
            Registers an <paramref name="item"/> returning to the <see cref="T:Ez.Collections.Pools.ObjectPool`2"/>.
            </summary>
            <param name="item">An item to register.</param>
        </member>
        <member name="M:Ez.Collections.Pools.ObjectPoolAssistant`2.RegisterGet(`0@)">
            <summary>
            Registers an <paramref name="item"/> leaving the <see cref="T:Ez.Collections.Pools.ObjectPool`2"/>.
            </summary>
            <param name="item">An item to register.</param>
        </member>
        <member name="T:Ez.Collections.Pools.PooledObject`2">
            <summary>
            An object that contains a value and is saved in an object pool.
            </summary>
            <typeparam name="T">Type of value into pool.</typeparam>
            <typeparam name="TSpecs">Type of TSpec in <see cref="P:Ez.Collections.Pools.PooledObject`2.Source"/>.</typeparam>
        </member>
        <member name="P:Ez.Collections.Pools.PooledObject`2.Source">
            <summary>
            The source <see cref="T:Ez.Collections.Pools.ObjectPool`2"/> of this <see cref="T:Ez.Collections.Pools.PooledObject`2"/>.
            </summary>
        </member>
        <member name="T:Ez.Collections.Pools.PooledObject`1">
            <summary>
            An object that contains a value and is saved in an object pool.
            </summary>
            <typeparam name="T">Value type</typeparam>
        </member>
        <member name="M:Ez.Collections.Pools.PooledObject`1.Finalize">
            <summary>
            Destroys this instance of <see cref="T:Ez.Collections.Pools.PooledObject`1"/>.
            </summary>
        </member>
        <member name="P:Ez.Collections.Pools.PooledObject`1.IsTemporaryUse">
            <summary>
            Flag indicating whether the value should be returned to the pool(true) when discarded with Dispose or not(false).
            </summary>
        </member>
        <member name="P:Ez.Collections.Pools.PooledObject`1.Value">
            <summary>
            Gets
            </summary>
        </member>
        <member name="M:Ez.Collections.Pools.PooledObject`1.Reset">
            <summary>
            Reset the <see cref="P:Ez.Collections.Pools.PooledObject`1.Value"/> if it implements IResettable.
            </summary>
        </member>
        <member name="M:Ez.Collections.Pools.PooledObject`1.Set">
            <summary>
            Set the <see cref="P:Ez.Collections.Pools.PooledObject`1.Value"/> if it implements IResettable.
            </summary>
        </member>
        <member name="M:Ez.Collections.Pools.PooledObject`1.Dispose">
            <summary>
            Releases
            </summary>
        </member>
        <member name="M:Ez.Collections.Pools.PooledObject`1.Dispose(System.Boolean)">
            <summary>
            Disposes the <see cref="T:Ez.Collections.Pools.PooledObject`1"/>.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="T:Ez.Collections.ReadOnlyUnsafeList`1">
            <summary>
            Represents a strongly typed unsafe read-only list that can be accessed by index.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Ez.Collections.ReadOnlyUnsafeList`1.#ctor(System.IntPtr,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Ez.Collections.ReadOnlyUnsafeList`1"/> class that 
            uses a specific fixed area of the memory.
            </summary>
            <param name="ptr">Pointer to the fixed memory.</param>
            <param name="count">Number of T elements in the <see cref="T:Ez.Collections.ReadOnlyUnsafeList`1"/>.</param>
        </member>
        <member name="P:Ez.Collections.ReadOnlyUnsafeList`1.Item(System.Int32)">
            <summary>
            Gets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get.</param>
            <returns>The element of the specified index.</returns>
        </member>
        <member name="P:Ez.Collections.ReadOnlyUnsafeList`1.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:Ez.Collections.ReadOnlyUnsafeList`1"/>.
            </summary>
        </member>
        <member name="M:Ez.Collections.ReadOnlyUnsafeList`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:Ez.Collections.ReadOnlyUnsafeList`1"/>.
            </summary>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerator`1"/> for the <see cref="T:Ez.Collections.ReadOnlyUnsafeList`1"/>.</returns>
        </member>
        <member name="T:Ez.Collections.SafeEnumerator`1">
            <summary>
            A wrapper that makes an enumerator secure using a synchronization object.
            </summary>
            <typeparam name="T">The type of objects to enumerate.</typeparam>
        </member>
        <member name="M:Ez.Collections.SafeEnumerator`1.#ctor(System.Collections.Generic.IEnumerator{`0},System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Ez.Collections.SafeEnumerator`1"/> class that 
            contains an <see cref="T:System.Collections.Generic.IEnumerator`1"/> and a sync object.
            </summary>
            <param name="inner">Wrapped instance.</param>
            <param name="sync">Sync instance.</param>
        </member>
        <member name="M:Ez.Collections.SafeEnumerator`1.Finalize">
            <summary>
            Destroys a instance of <see cref="T:Ez.Collections.SafeEnumerator`1"/> class.
            </summary>
        </member>
        <member name="P:Ez.Collections.SafeEnumerator`1.Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
        </member>
        <member name="P:Ez.Collections.SafeEnumerator`1.Sync">
            <summary>
            Gets the sync object.
            </summary>
        </member>
        <member name="M:Ez.Collections.SafeEnumerator`1.Dispose">
            <summary>
            Dispose a instance of <see cref="T:Ez.Collections.SafeEnumerator`1"/> class and release the <see cref="P:Ez.Collections.SafeEnumerator`1.Sync"/> object.
            </summary>
        </member>
        <member name="M:Ez.Collections.SafeEnumerator`1.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns><see langword="true"/> if the enumerator was successfully advanced to 
            the next element; <see langword="false"/> if the enumerator has passed the end 
            of the collection.</returns>
        </member>
        <member name="M:Ez.Collections.SafeEnumerator`1.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="T:Ez.Collections.SelfIndexedDictionary`2">
            <summary>
            A dictionary with elements that self-index through a <typeparamref name="TKey"/> Key property.
            </summary>
            <typeparam name="TKey">The type of the keys in the dictionary.</typeparam>
            <typeparam name="TValue">The type of the values in the dictionary.</typeparam>
        </member>
        <member name="M:Ez.Collections.SelfIndexedDictionary`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ez.Collections.SelfIndexedDictionary`2"/> class that is empty.
            </summary>
        </member>
        <member name="M:Ez.Collections.SelfIndexedDictionary`2.#ctor(System.Collections.Generic.IEnumerable{`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Ez.Collections.SelfIndexedDictionary`2"/> class that contains elements copied from the specified collection.
            </summary>
            <param name="collection">The collection whose elements are copied to the new dictionary.</param>
        </member>
        <member name="M:Ez.Collections.SelfIndexedDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Ez.Collections.SelfIndexedDictionary`2"/> class that wraps the <paramref name="inner"/> dictionary.
            </summary>
            <param name="inner">The dictionary to wrap.</param>
        </member>
        <member name="P:Ez.Collections.SelfIndexedDictionary`2.Item(`0)">
            <summary>
            Gets the value associated with the specified <paramref name="key"/>.
            </summary>
            <param name="key">The key of the value to get.</param>
            <returns>The value associated with the <paramref name="key"/>.</returns>
        </member>
        <member name="P:Ez.Collections.SelfIndexedDictionary`2.Keys">
            <summary>
            Gets a collection containing the keys in the <see cref="T:Ez.Collections.SelfIndexedDictionary`2"/>.
            </summary>
        </member>
        <member name="P:Ez.Collections.SelfIndexedDictionary`2.Values">
            <summary>
            Gets a collection containing the values in the <see cref="T:Ez.Collections.SelfIndexedDictionary`2"/>.
            </summary>
        </member>
        <member name="P:Ez.Collections.SelfIndexedDictionary`2.Count">
            <summary>
            Gets the number of key/value pairs contained in the <see cref="T:Ez.Collections.SelfIndexedDictionary`2"/>.
            </summary>
        </member>
        <member name="P:Ez.Collections.SelfIndexedDictionary`2.IsReadOnly">
            <summary>
            Gets a value that indicates whether the <see cref="T:Ez.Collections.SelfIndexedDictionary`2"/> is read-only.
            </summary>
        </member>
        <member name="M:Ez.Collections.SelfIndexedDictionary`2.Add(`1)">
            <summary>
            Adds an item to the <see cref="T:Ez.Collections.SelfIndexedDictionary`2"/>.
            </summary>
            <param name="item">The object to add to the <see cref="T:Ez.Collections.SelfIndexedDictionary`2"/>.</param>
        </member>
        <member name="M:Ez.Collections.SelfIndexedDictionary`2.Clear">
            <summary>
            Removes all items from the <see cref="T:Ez.Collections.SelfIndexedDictionary`2"/>.
            </summary>
        </member>
        <member name="M:Ez.Collections.SelfIndexedDictionary`2.Contains(`1)">
            <summary>
            Determines whether the <see cref="T:Ez.Collections.SelfIndexedDictionary`2"/> contains a specific value.
            </summary>
            <param name="item"></param>
            <returns><see langword="true"/> if item is found in the <see cref="T:Ez.Collections.SelfIndexedDictionary`2"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ez.Collections.SelfIndexedDictionary`2.ContainsKey(`0)">
            <summary>
            Determines whether the <see cref="T:Ez.Collections.SelfIndexedDictionary`2"/> contains an element with the specified <paramref name="key"/>.
            </summary>
            <param name="key">The key to locate in the <see cref="T:Ez.Collections.SelfIndexedDictionary`2"/></param>
            <returns><see langword="true"/> if the <see cref="T:Ez.Collections.SelfIndexedDictionary`2"/> contains an element with the <paramref name="key"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ez.Collections.SelfIndexedDictionary`2.CopyTo(`1[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:Ez.Collections.SelfIndexedDictionary`2"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from 
            <see cref="T:Ez.Collections.SelfIndexedDictionary`2"/>. The <see cref="T:System.Array"/> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.</param>
        </member>
        <member name="M:Ez.Collections.SelfIndexedDictionary`2.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ez.Collections.SelfIndexedDictionary`2.Remove(`0)">
            <summary>
            Removes the element with the specified key from the <see cref="T:Ez.Collections.SelfIndexedDictionary`2"/>.
            </summary>
            <param name="key">The key of the element to remove.</param>
            <returns><see langword="true"/> if the element is successfully removed; otherwise, <see langword="false"/>. 
            This method also returns <see langword="false"/> if key was not found in the original
            <see cref="T:Ez.Collections.SelfIndexedDictionary`2"/>.</returns>
        </member>
        <member name="M:Ez.Collections.SelfIndexedDictionary`2.Remove(`1)">
            <summary>
            Removes the element with <see cref="P:Ez.Collections.ISelfIndexedElement`1.Key"/> from the <see cref="T:Ez.Collections.SelfIndexedDictionary`2"/>.
            </summary>
            <param name="item">The item that contains the key to remove.</param>
            <returns><see langword="true"/> if the element is successfully removed; otherwise, <see langword="false"/>. 
            This method also returns <see langword="false"/> if key was not found in the original
            <see cref="T:Ez.Collections.SelfIndexedDictionary`2"/>.</returns>
        </member>
        <member name="M:Ez.Collections.SelfIndexedDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="key">The key whose value to get.</param>
            <param name="value">When this method returns, the value associated with the specified key, 
            if the key is found; otherwise, the default value for the type of the <paramref name="value"/> 
            parameter. This parameter is passed uninitialized.</param>
            <returns><see langword="true"/> if the object that implements <see cref="T:Ez.Collections.SelfIndexedDictionary`2"/> 
            contains an element with the specified key; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="T:Ez.EzException">
            <summary>
            The execption that is thrown by Ez namespace.
            </summary>
        </member>
        <member name="M:Ez.EzException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ez.EzException"/> class.
            </summary>
        </member>
        <member name="M:Ez.EzException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Ez.EzException"/> class with a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Ez.EzException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Ez.EzException"/> class with serialized data.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a <see langword="null"/>
            reference if no inner exception is specified.</param>
        </member>
        <member name="M:Ez.EzException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Ez.EzException"/> class with a specified
            error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object 
            data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information 
            about the source or destination.</param>
        </member>
        <member name="T:Ez.Graphics.API.BufferRange">
            <summary>
            A <see cref="T:Ez.Graphics.API.Resources.IBindableResource"/> that represents a section of a <see cref="!:DeviceBuffer"/>. This can be used in place of
            a <see cref="!:DeviceBuffer"/> when creating a <see cref="!:ResourceSet"/> to make only a subset of the Buffer available to
            shaders.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.BufferRange.Buffer">
            <summary>
            The underlying <see cref="T:Ez.Graphics.API.Resources.IBuffer"/> that this range refers to.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.BufferRange.Offset">
            <summary>
            The offset, in bytes, from the beginning of the buffer that this range starts at.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.BufferRange.Size">
            <summary>
            The total number of bytes that this range encompasses.
            </summary>
        </member>
        <member name="M:Ez.Graphics.API.BufferRange.#ctor(Ez.Graphics.API.Resources.IBuffer,System.UInt64,System.UInt64)">
            <summary>
            Constructs a new <see cref="T:Ez.Graphics.API.BufferRange"/>.
            </summary>
            <param name="buffer">The underlying <see cref="T:Ez.Graphics.API.Resources.IBuffer"/> that this range will refer to.</param>
            <param name="offset">The offset, in bytes, from the beginning of the buffer that this range will start at.</param>
            <param name="size">The total number of bytes that this range will encompass.</param>
        </member>
        <member name="M:Ez.Graphics.API.BufferRange.Equals(Ez.Graphics.API.BufferRange)">
            <summary>
            Element-wise equality.
            </summary>
            <param name="other">The instance to compare to.</param>
            <returns>True if all elements are equal; false otherswise.</returns>
        </member>
        <member name="M:Ez.Graphics.API.BufferRange.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="T:Ez.Graphics.API.Descriptons.BlendAttachmentDescription">
            <summary>
            Describe the properties of blend in a color-target of <see cref="!:IPipeline"/> and <see cref="!:IFramebuffer"/>.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.Descriptons.BlendAttachmentDescription.BlendEnabled">
            <summary>
            Defines whether the blend is enabled.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.Descriptons.BlendAttachmentDescription.SourceColorFactor">
            <summary>
            The factor of source color components in blend function.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.Descriptons.BlendAttachmentDescription.DestinationColorFactor">
            <summary>
            The factor of destiantion color components in blend function.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.Descriptons.BlendAttachmentDescription.ColorFunction">
            <summary>
            The function used to combine the source and destination colors components.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.Descriptons.BlendAttachmentDescription.SourceAlphaFactor">
            <summary>
            The factor of source alpha component in blend function. 
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.Descriptons.BlendAttachmentDescription.DestinationAlphaFactor">
            <summary>
            The factor of the destination alpha component in blend function.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.Descriptons.BlendAttachmentDescription.AlphaFunction">
            <summary>
            The function used to combine the source and destination alpha component.
            </summary>
        </member>
        <member name="M:Ez.Graphics.API.Descriptons.BlendAttachmentDescription.#ctor(System.Boolean,Ez.Graphics.API.BlendFactor,Ez.Graphics.API.BlendFactor,Ez.Graphics.API.BlendFunction,Ez.Graphics.API.BlendFactor,Ez.Graphics.API.BlendFactor,Ez.Graphics.API.BlendFunction)">
            <summary>
            Constructs a new <see cref="T:Ez.Graphics.API.Descriptons.BlendAttachmentDescription"/>.
            </summary>
            <param name="enabled">Defines whether the blend is enabled.</param>
            <param name="srcColorFactor">The factor of source color components in blend function.</param>
            <param name="dstColorFactor">The factor of destiantion color components in blend function.</param>
            <param name="colorFunc">The function used to combine the source and destination colors components.</param>
            <param name="srcAlphaFactor">The factor of source alpha component in blend function. </param>
            <param name="dstAlphaFactor">The factor of the destination alpha component in blend function.</param>
            <param name="alphaFunc">The function used to combine the source and destination alpha component.</param>
        </member>
        <member name="F:Ez.Graphics.API.Descriptons.BlendAttachmentDescription.Override">
            <summary>
            A blend description that completely replaces the destination with the source.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.Descriptons.BlendAttachmentDescription.Alpha">
            <summary>
            A blend description that the source and destination are combined in an inverse relationship.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.Descriptons.BlendAttachmentDescription.Additive">
            <summary>
            A blend description that the source is added to the destination based on its alpha channel.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.Descriptons.BlendAttachmentDescription.Disabled">
            <summary>
            A blend description that the blending is disabled.
            </summary>
        </member>
        <member name="T:Ez.Graphics.API.Descriptons.BlendStateDescription">
            <summary>
            Describe the properties of the blend in a <see cref="!:IPipeline"/>.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.Descriptons.BlendStateDescription.BlendFactor">
            <summary>
            A constant color used as blend color in <see cref="F:Ez.Graphics.API.BlendFactor.ConstantColor"/>, <see cref="F:Ez.Graphics.API.BlendFactor.OneMinusConstantColor"/>, <see cref="F:Ez.Graphics.API.BlendFactor.ConstantAlpha"/> or <see cref="F:Ez.Graphics.API.BlendFactor.OneMinusConstantAlpha"/>  
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.Descriptons.BlendStateDescription.AttachmentStates">
            <summary>
            Describe property of blend for earch color target.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.Descriptons.BlendStateDescription.AlphaToCoverageEnabled">
            <summary>
            Enable alpha to coverage.
            </summary>
        </member>
        <member name="M:Ez.Graphics.API.Descriptons.BlendStateDescription.#ctor(Ez.Graphics.Data.ColorSingle,Ez.Graphics.API.Descriptons.BlendAttachmentDescription[])">
            <summary>
            Constructor of a <see cref="T:Ez.Graphics.API.Descriptons.BlendStateDescription"/>
            </summary>
            <param name="blendFactor">The constant blend factor.</param>
            <param name="attachmentStates">The blend attachment states.</param>
        </member>
        <member name="M:Ez.Graphics.API.Descriptons.BlendStateDescription.#ctor(Ez.Graphics.Data.ColorSingle,System.Boolean,Ez.Graphics.API.Descriptons.BlendAttachmentDescription[])">
            <summary>
            Constructor of a <see cref="T:Ez.Graphics.API.Descriptons.BlendStateDescription"/>
            </summary>
            <param name="blendFactor">The constant blend factor.</param>
            <param name="alphaToCoverageEnabled">Enables alpha to coverage.</param>
            <param name="attachmentStates">The blend attachment states.</param>
        </member>
        <member name="F:Ez.Graphics.API.Descriptons.BlendStateDescription.Override">
            <summary>
            Describes a blend state with a unique color target is blended with <see cref="F:Ez.Graphics.API.Descriptons.BlendAttachmentDescription.Override"/>
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.Descriptons.BlendStateDescription.Alpha">
            <summary>
            Describes a blend state with a unique color target is blended with <see cref="F:Ez.Graphics.API.Descriptons.BlendAttachmentDescription.Alpha"/>
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.Descriptons.BlendStateDescription.Additive">
            <summary>
            Describes a blend state with a unique color target is blended with <see cref="F:Ez.Graphics.API.Descriptons.BlendAttachmentDescription.Additive"/>
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.Descriptons.BlendStateDescription.Disabled">
            <summary>
            Describes a blend state with a unique color target is blended with <see cref="F:Ez.Graphics.API.Descriptons.BlendAttachmentDescription.Disabled"/>
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.Descriptons.BlendStateDescription.Empty">
            <summary>
            Describes an empty blend state in which no color targets are used.
            </summary>
        </member>
        <member name="T:Ez.Graphics.API.Descriptons.BufferDescripton">
            <summary>
            Describe a buffer object.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.Descriptons.BufferDescripton.Usage">
            <summary>
            Buffer usage.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.Descriptons.BufferDescripton.Size">
            <summary>
            Size in bytes of buffer.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.Descriptons.BufferDescripton.ElementStride">
            <summary>
            For structured buffers, this value indicate the size in bytes of a single structure element, and must be non-zero.
            For all other buffer types, this value must be zero.
            </summary>
        </member>
        <member name="T:Ez.Graphics.API.Descriptons.ComputePipelineDescription">
            <summary>
            Describes a compute <see cref="T:Ez.Graphics.API.Resources.IPipeline"/>, for creation using a <see cref="T:Ez.Graphics.API.Resources.IResourceFactory"/>.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.Descriptons.ComputePipelineDescription.ComputeShader">
            <summary>
            The compute <see cref="!:Shader"/> to be used in the Pipeline. This must be a Shader with
            <see cref="!:ShaderStages.Compute"/>.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.Descriptons.ComputePipelineDescription.ResourceLayouts">
            <summary>
            An array of <see cref="!:ResourceLayout"/>, which controls the layout of shader resoruces in the <see cref="!:Pipeline"/>.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.Descriptons.ComputePipelineDescription.ThreadGroupSizeX">
            <summary>
            The X dimension of the thread group size.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.Descriptons.ComputePipelineDescription.ThreadGroupSizeY">
            <summary>
            The Y dimension of the thread group size.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.Descriptons.ComputePipelineDescription.ThreadGroupSizeZ">
            <summary>
            The Z dimension of the thread group size.
            </summary>
        </member>
        <member name="M:Ez.Graphics.API.Descriptons.ComputePipelineDescription.#ctor(Ez.Graphics.API.Resources.IShader,Ez.Graphics.API.Resources.IResourceLayout[],System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Constructs a new ComputePipelineDescription.
            </summary>
            <param name="computeShader">The compute <see cref="!:Shader"/> to be used in the Pipeline. This must be a Shader with
            <see cref="!:ShaderStages.Compute"/>.</param>
            <param name="resourceLayouts">The set of resource layouts available to the Pipeline.</param>
            <param name="threadGroupSizeX">The X dimension of the thread group size.</param>
            <param name="threadGroupSizeY">The Y dimension of the thread group size.</param>
            <param name="threadGroupSizeZ">The Z dimension of the thread group size.</param>
        </member>
        <member name="M:Ez.Graphics.API.Descriptons.ComputePipelineDescription.#ctor(Ez.Graphics.API.Resources.IShader,Ez.Graphics.API.Resources.IResourceLayout,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Constructs a new ComputePipelineDescription.
            </summary>
            <param name="shaderStage">The compute <see cref="!:Shader"/> to be used in the Pipeline. This must be a Shader with
            <see cref="!:ShaderStages.Compute"/>.</param>
            <param name="resourceLayout">The resource layout available to the Pipeline.</param>
            <param name="threadGroupSizeX">The X dimension of the thread group size.</param>
            <param name="threadGroupSizeY">The Y dimension of the thread group size.</param>
            <param name="threadGroupSizeZ">The Z dimension of the thread group size.</param>
        </member>
        <member name="M:Ez.Graphics.API.Descriptons.ComputePipelineDescription.Equals(Ez.Graphics.API.Descriptons.ComputePipelineDescription)">
            <summary>
            Element-wise equality.
            </summary>
            <param name="other">The instance to compare to.</param>
            <returns>True if all elements and all array elements are equal; false otherswise.</returns>
        </member>
        <member name="M:Ez.Graphics.API.Descriptons.ComputePipelineDescription.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="T:Ez.Graphics.API.Descriptons.DepthStencilStateDescription">
            <summary>
            Describes the depth and stencil test.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.Descriptons.DepthStencilStateDescription.DepthTestEnabled">
            <summary>
            Defines whether the depth test is enabled.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.Descriptons.DepthStencilStateDescription.DepthWriteEnabled">
            <summary>
            Defines whether writing to the depth buffer is enabled.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.Descriptons.DepthStencilStateDescription.DepthComparison">
            <summary>
            The <see cref="T:Ez.Graphics.API.ComparisonFunction"/> used in depth test.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.Descriptons.DepthStencilStateDescription.StencilTestEnabled">
            <summary>
            Defines whether the stencil test is enabled.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.Descriptons.DepthStencilStateDescription.StencilFront">
            <summary>
            Describes the stencil tests in front faces.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.Descriptons.DepthStencilStateDescription.StencilBack">
            <summary>
            Describes the stencil tests in back faces.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.Descriptons.DepthStencilStateDescription.StencilReadMask">
            <summary>
            The stencil mask used in reading.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.Descriptons.DepthStencilStateDescription.StencilWriteMask">
            <summary>
            The stencil mask used for writing.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.Descriptons.DepthStencilStateDescription.StencilReference">
            <summary>
            The reference value used in <see cref="F:Ez.Graphics.API.StencilOperation.Replace"/> operation.
            </summary>
        </member>
        <member name="M:Ez.Graphics.API.Descriptons.DepthStencilStateDescription.#ctor(System.Boolean,System.Boolean,Ez.Graphics.API.ComparisonFunction,System.Boolean,Ez.Graphics.API.Descriptons.StencilTestDescription,Ez.Graphics.API.Descriptons.StencilTestDescription,System.Byte,System.Byte,System.UInt32)">
            <summary>
            Construct a new <see cref="T:Ez.Graphics.API.Descriptons.DepthStencilStateDescription"/>.
            </summary>
            <param name="depthTestEnabled">Defines whether the depth test is enabled.</param>
            <param name="depthWriteEnabled">Defines whether writing to the depth buffer is enabled.</param>
            <param name="depthComparasion">The <see cref="T:Ez.Graphics.API.ComparisonFunction"/> used in depth test.</param>
            <param name="stencilTestEnabled">Defines whether the stencil test is enabled.</param>
            <param name="stencilFront">Describes the stencil tests in front faces.</param>
            <param name="stencilBack">Describes the stencil tests in back faces.</param>
            <param name="stencilReadMask">The stencil mask used in reading.</param>
            <param name="stencilWriteMask">The stencil mask used for writing.</param>
            <param name="stencilReference">The reference value used in <see cref="F:Ez.Graphics.API.StencilOperation.Replace"/> operation.</param>
        </member>
        <member name="M:Ez.Graphics.API.Descriptons.DepthStencilStateDescription.#ctor(System.Boolean,System.Boolean,Ez.Graphics.API.ComparisonFunction)">
            <summary>
            Constructor of a new <see cref="T:Ez.Graphics.API.Descriptons.DepthStencilStateDescription"/>.
            This only describes the depth test, stencil test is disabled.
            </summary>
            <param name="depthTestEnabled">Defines whether the depth test is enabled.</param>
            <param name="depthWriteEnabled">Defines whether writing to the depth buffer is enabled.</param>
            <param name="depthComparasion">The <see cref="T:Ez.Graphics.API.ComparisonFunction"/> used in depth test.</param>
        </member>
        <member name="F:Ez.Graphics.API.Descriptons.DepthStencilStateDescription.DepthLessEqual">
            <summary>
            Describes a depth which uses a <see cref="F:Ez.Graphics.API.ComparisonFunction.LessEqual"/> comparison.
            Stencil test is disabled.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.Descriptons.DepthStencilStateDescription.DepthLessEqualReadOnly">
            <summary>
            Describes a depth which uses a <see cref="F:Ez.Graphics.API.ComparisonFunction.LessEqual"/> comparison, and the depth buffer is read-only.
            Stencil test is disabled.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.Descriptons.DepthStencilStateDescription.DepthGreaterEqual">
            <summary>
            Describes a depth which uses a <see cref="F:Ez.Graphics.API.ComparisonFunction.GreaterEqual"/> comparison.
            Stencil test is disabled.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.Descriptons.DepthStencilStateDescription.DepthGreaterEqualReadOnly">
            <summary>
            Describes a depth which uses a <see cref="F:Ez.Graphics.API.ComparisonFunction.GreaterEqual"/> comparison, and the depth buffer is read-only.
            Stencil test is disabled.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.Descriptons.DepthStencilStateDescription.Disabled">
            <summary>
            Depth and stencil test is disabled.
            </summary>
        </member>
        <member name="T:Ez.Graphics.API.Descriptons.GraphicsDeviceDescription">
            <summary>
            A structure to pass in <see cref="T:Ez.Graphics.API.IGraphicsDevice"/> creation.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.Descriptons.GraphicsDeviceDescription.Debug">
            <summary>
            Indicates that <see cref="T:Ez.Graphics.API.IGraphicsDevice"/> has the debug features enables.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.Descriptons.GraphicsDeviceDescription.DepthFormat">
            <summary>
            The optional format of the depth target of the Swapchain's Framebuffer.
            If non-null, this must be a valid depth Texture format.
            If null, then no depth target will be created.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.Descriptons.GraphicsDeviceDescription.IsVSync">
            <summary>
            Indicates whether presentation of the Swapchain will be synchronized to the window system's vertical refresh rate.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.Descriptons.GraphicsDeviceDescription.IsSrgbFormat">
            <summary>
            Indicates whether the color target of the Swapchain will use an sRGB PixelFormat.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.Descriptons.GraphicsDeviceDescription.PreferDepthRangeZeroToOne">
            <summary>
            Indicates whether a 0-to-1 depth range mapping is preferred. For OpenGL, this is not the default, and is not available
            on all systems.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.Descriptons.GraphicsDeviceDescription.PreferStandardClipSpaceYDirection">
            <summary>
            Indicates whether a bottom-to-top-increasing clip space Y direction is preferred. For Vulkan, this is not the
            default, and may not be available on all systems.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.Descriptons.GraphicsPipelineDescription.BlendState">
            <summary>
            A description of blend state.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.Descriptons.GraphicsPipelineDescription.DepthStencilState">
            <summary>
            A description of depth stencil state.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.Descriptons.GraphicsPipelineDescription.RasterizerState">
            <summary>
            A description of the rasterizer state.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.Descriptons.GraphicsPipelineDescription.PrimitiveType">
            <summary>
            The <see cref="F:Ez.Graphics.API.Descriptons.GraphicsPipelineDescription.PrimitiveType"/> controls what a vertex stream represents when rendering.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.Descriptons.GraphicsPipelineDescription.ShaderSet">
            <summary>
            The shader set used in <see cref="T:Ez.Graphics.API.Resources.IPipeline"/>.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.Descriptons.GraphicsPipelineDescription.ResourceLayouts">
            <summary>
            An array of <see cref="T:Ez.Graphics.API.Resources.IResourceLayout"/>, which controls the layout of shader resources in the <see cref="T:Ez.Graphics.API.Resources.IPipeline"/>.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.Descriptons.GraphicsPipelineDescription.Outputs">
            <summary>
            A description of the output attachments used by the <see cref="!:Pipeline"/>.
            </summary>
        </member>
        <member name="M:Ez.Graphics.API.Descriptons.GraphicsPipelineDescription.#ctor(Ez.Graphics.API.Descriptons.BlendStateDescription,Ez.Graphics.API.Descriptons.DepthStencilStateDescription,Ez.Graphics.API.Descriptons.RasterizerStateDescription,Ez.Graphics.API.PrimitiveType,Ez.Graphics.API.Descriptons.ShaderSetDescription,Ez.Graphics.API.Resources.IResourceLayout[],Ez.Graphics.API.Descriptons.OutputDescription)">
            <summary>
            Constructs a new <see cref="T:Ez.Graphics.API.Descriptons.GraphicsPipelineDescription"/>.
            </summary>
            <param name="blendState">A description of the blend state, which controls how color values are blended into each
            color target.</param>
            <param name="depthStencilStateDescription">A description of the depth stencil state, which controls depth tests,
            writing, and comparisons.</param>
            <param name="rasterizerState">A description of the rasterizer state, which controls culling, clipping, scissor, and
            polygon-fill behavior.</param> 
            <param name="primitiveType">The <see cref="F:Ez.Graphics.API.Descriptons.GraphicsPipelineDescription.PrimitiveType"/> to use, which controls how a series of input
            vertices is interpreted by the <see cref="T:Ez.Graphics.API.Resources.IPipeline"/>.</param>
            <param name="shaderSet">A description of the shader set to be used.</param>
            <param name="resourceLayouts">An array of <see cref="T:Ez.Graphics.API.Resources.IResourceLayout"/>, which controls the layout of shader resoruces
            in the <see cref="T:Ez.Graphics.API.Resources.IPipeline"/>.</param>
            <param name="outputs">A description of the output attachments used by the <see cref="T:Ez.Graphics.API.Resources.IPipeline"/>.</param>
        </member>
        <member name="M:Ez.Graphics.API.Descriptons.GraphicsPipelineDescription.#ctor(Ez.Graphics.API.Descriptons.BlendStateDescription,Ez.Graphics.API.Descriptons.DepthStencilStateDescription,Ez.Graphics.API.Descriptons.RasterizerStateDescription,Ez.Graphics.API.PrimitiveType,Ez.Graphics.API.Descriptons.ShaderSetDescription,Ez.Graphics.API.Resources.IResourceLayout,Ez.Graphics.API.Descriptons.OutputDescription)">
            <summary>
            Constructs a new <see cref="T:Ez.Graphics.API.Descriptons.GraphicsPipelineDescription"/>.
            </summary>
            <param name="blendState">A description of the blend state, which controls how color values are blended into each
            color target.</param>
            <param name="depthStencilStateDescription">A description of the depth stencil state, which controls depth tests,
            writing, and comparisons.</param>
            <param name="rasterizerState">A description of the rasterizer state, which controls culling, clipping, scissor, and
            polygon-fill behavior.</param>
            <param name="primitiveType">The <see cref="F:Ez.Graphics.API.Descriptons.GraphicsPipelineDescription.PrimitiveType"/> to use, which controls how a series of input
            vertices is interpreted by the <see cref="T:Ez.Graphics.API.Resources.IPipeline"/>.</param>
            <param name="shaderSet">A description of the shader set to be used.</param>
            <param name="resourceLayout">A <see cref="T:Ez.Graphics.API.Resources.IResourceLayout"/>, which controls the layout of shader resoruces in the
            <see cref="!:Pipeline"/>.</param>
            <param name="outputs">A description of the output attachments used by the <see cref="T:Ez.Graphics.API.Resources.IPipeline"/>.</param>
        </member>
        <member name="T:Ez.Graphics.API.Descriptons.OutputAttachmentDescription">
            <summary>
            Describes an individual output attachment and its format.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.Descriptons.OutputAttachmentDescription.Format">
            <summary>
            The format of the <see cref="!:Texture"/> attachment.
            </summary>
        </member>
        <member name="M:Ez.Graphics.API.Descriptons.OutputAttachmentDescription.#ctor(Ez.Graphics.Data.PixelFormat)">
            <summary>
            Constructs a new <see cref="T:Ez.Graphics.API.Descriptons.OutputAttachmentDescription"/>.
            </summary>
            <param name="format">THe format of the <see cref="!:Texture"/> attachment.</param>
        </member>
        <member name="M:Ez.Graphics.API.Descriptons.OutputAttachmentDescription.Equals(Ez.Graphics.API.Descriptons.OutputAttachmentDescription)">
            <summary>
            Element-wise equality.
            </summary>
            <param name="other">The instance to compare to.</param>
            <returns>True if all elements are equal; false otherswise.</returns>
        </member>
        <member name="M:Ez.Graphics.API.Descriptons.OutputAttachmentDescription.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="T:Ez.Graphics.API.Descriptons.OutputDescription">
            <summary>
            Describes a set of output attachments and their formats.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.Descriptons.OutputDescription.DepthAttachment">
            <summary>
            A description of the depth attachment, or null if none exists.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.Descriptons.OutputDescription.ColorAttachments">
            <summary>
            An array of attachment descriptions, one for each color attachment. May be empty.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.Descriptons.OutputDescription.SampleCount">
            <summary>
            The number of samples in each target attachment.
            </summary>
        </member>
        <member name="M:Ez.Graphics.API.Descriptons.OutputDescription.#ctor(System.Nullable{Ez.Graphics.API.Descriptons.OutputAttachmentDescription},Ez.Graphics.API.Descriptons.OutputAttachmentDescription[])">
            <summary>
            Constructs a new <see cref="T:Ez.Graphics.API.Descriptons.OutputDescription"/>.
            </summary>
            <param name="depthAttachment">A description of the depth attachment.</param>
            <param name="colorAttachments">An array of descriptions of each color attachment.</param>
        </member>
        <member name="M:Ez.Graphics.API.Descriptons.OutputDescription.#ctor(System.Nullable{Ez.Graphics.API.Descriptons.OutputAttachmentDescription},Ez.Graphics.API.Descriptons.OutputAttachmentDescription[],Ez.Graphics.API.TextureSampleCount)">
            <summary>
            Constructs a new <see cref="T:Ez.Graphics.API.Descriptons.OutputDescription"/>.
            </summary>
            <param name="depthAttachment">A description of the depth attachment.</param>
            <param name="colorAttachments">An array of descriptions of each color attachment.</param>
            <param name="sampleCount">The number of samples in each target attachment.</param>
        </member>
        <member name="M:Ez.Graphics.API.Descriptons.OutputDescription.Equals(Ez.Graphics.API.Descriptons.OutputDescription)">
            <summary>
            Element-wise equality.
            </summary>
            <param name="other">The instance to compare to.</param>
            <returns>True if all elements and all array elements are equal; false otherswise.</returns>
        </member>
        <member name="M:Ez.Graphics.API.Descriptons.OutputDescription.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="T:Ez.Graphics.API.Descriptons.RasterizerStateDescription">
            <summary>
            Describe the properties of the rasterizer in a <see cref="!:IPipeline"/>.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.Descriptons.RasterizerStateDescription.CullMode">
            <summary>
            Describes face that will be discarded.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.Descriptons.RasterizerStateDescription.FillMode">
            <summary>
            Describes how to fill the polygon.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.Descriptons.RasterizerStateDescription.FrontFace">
            <summary>
            Describes whether the direction of the vertices of a frontal face is clockwise or anticlockwise.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.Descriptons.RasterizerStateDescription.DepthClipEnabled">
            <summary>
            Describes whether the depth clip is enabled.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.Descriptons.RasterizerStateDescription.ScissorTestEnabled">
            <summary>
            Describes whether the scissor test is enabled.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.Descriptons.RasterizerStateDescription.LineWidth">
            <summary>
            The line width in the rasterization. 
            </summary>
        </member>
        <member name="M:Ez.Graphics.API.Descriptons.RasterizerStateDescription.#ctor(Ez.Graphics.API.FaceCullMode@,Ez.Graphics.API.PolygonFillMode@,Ez.Graphics.API.FrontFace@,System.Boolean@,System.Boolean@,System.Single@)">
            <summary>
            Constructs of a new <see cref="T:Ez.Graphics.API.Descriptons.RasterizerStateDescription"/>.
            </summary>
            <param name="cullMode">Describes face that will be discarded.</param>
            <param name="fillMode">Describes how to fill the polygon.</param>
            <param name="frontFace">Describes whether the direction of the vertices of a frontal face is clockwise or anticlockwise.</param>
            <param name="depthClipEnabled">Describes whether the depth clip is enabled.</param>
            <param name="scissorTestEnabled">Describes whether the scissor test is enabled.</param>
            <param name="lineWidth">The line width in the rasterization.</param>
        </member>
        <member name="M:Ez.Graphics.API.Descriptons.RasterizerStateDescription.GetHashCode">
            <summary>
            Gets the hash code of this instance.
            </summary>
            <returns>A 32-bit signed integer hash code of this instance.</returns>
        </member>
        <member name="F:Ez.Graphics.API.Descriptons.RasterizerStateDescription.Default">
            <summary>
            A <see cref="T:Ez.Graphics.API.Descriptons.RasterizerStateDescription"/> setted as:
                CullMode = FaceCullMode.Back
                FillMode = PolygonFillMode.Fill
                FrontFace = FrontFace.Clockwise
                DepthClipEnabled = true
                ScissorTestEnabled = false
                LineWidth = 1f
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.Descriptons.RasterizerStateDescription.NoCull">
            <summary>
            A <see cref="T:Ez.Graphics.API.Descriptons.RasterizerStateDescription"/> setted as:
                CullMode = FaceCullMode.None
                FillMode = PolygonFillMode.Fill
                FrontFace = FrontFace.Clockwise
                DepthClipEnabled = true
                ScissorTestEnabled = false
                LineWidth = 1f
            </summary>
        </member>
        <member name="T:Ez.Graphics.API.Descriptons.ResourceLayoutDescription">
            <summary>
            Describes a <see cref="!:IResourceLayout"/> object for a <see cref="!:IPipeline"/>
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.Descriptons.ResourceLayoutDescription.Elements">
            <summary>
            An array of <see cref="T:Ez.Graphics.API.Descriptons.ResourceLayoutElementDescription"/> objects, describing the properties of each resource
            element in the <see cref="!:ResourceLayout"/>.
            </summary>
        </member>
        <member name="M:Ez.Graphics.API.Descriptons.ResourceLayoutDescription.#ctor(Ez.Graphics.API.Descriptons.ResourceLayoutElementDescription[])">
            <summary>
            Constructs a new ResourceLayoutDescription.
            </summary>
            <param name="elements">An array of <see cref="T:Ez.Graphics.API.Descriptons.ResourceLayoutElementDescription"/> objects, describing the properties
            of each resource element in the <see cref="!:ResourceLayout"/>.</param>
        </member>
        <member name="M:Ez.Graphics.API.Descriptons.ResourceLayoutDescription.Equals(Ez.Graphics.API.Descriptons.ResourceLayoutDescription)">
            <summary>
            Element-wise equality.
            </summary>
            <param name="other">The instance to compare to.</param>
            <returns>True if all array elements are equal; false otherswise.</returns>
        </member>
        <member name="M:Ez.Graphics.API.Descriptons.ResourceLayoutDescription.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="T:Ez.Graphics.API.Descriptons.ResourceLayoutElementDescription">
            <summary>
            Describes an individual resource element in a <see cref="!:IResourceLayout"/>.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.Descriptons.ResourceLayoutElementDescription.Identifier">
            <summary>
            The identifier value.
            (Binding value for uniform buffer)
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.Descriptons.ResourceLayoutElementDescription.Kind">
            <summary>
            The kind of resource.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.Descriptons.ResourceLayoutElementDescription.Stages">
            <summary>
            The stage of <see cref="T:Ez.Graphics.API.ShaderTypes"/> in which this element is used.
            </summary>
        </member>
        <member name="P:Ez.Graphics.API.Descriptons.ResourceLayoutElementDescription.Options">
            <summary>
            Miscellaneous resource options for this element.
            </summary>
        </member>
        <member name="M:Ez.Graphics.API.Descriptons.ResourceLayoutElementDescription.#ctor(System.UInt32,Ez.Graphics.API.ResourceKind,Ez.Graphics.API.ShaderTypes)">
            <summary>
            Constructs a new ResourceLayoutElementDescription.
            </summary>
            <param name="identifier">The identifier of the element.</param>
            <param name="kind">The kind of resource.</param>
            <param name="stages">The stages of <see cref="T:Ez.Graphics.API.ShaderTypes"/> in which this element is used.</param>
        </member>
        <member name="M:Ez.Graphics.API.Descriptons.ResourceLayoutElementDescription.#ctor(System.UInt32,Ez.Graphics.API.ResourceKind,Ez.Graphics.API.ShaderTypes,Ez.Graphics.API.ResourceLayoutElementOptions)">
            <summary>
            Constructs a new ResourceLayoutElementDescription.
            </summary>
            <param name="identifier">The identifier of the element.</param>
            <param name="kind">The kind of resource.</param>
            <param name="stages">The stage of <see cref="!:ShaderStages"/> in which this element is used.</param>
            <param name="options">Miscellaneous resource options for this element.</param>
        </member>
        <member name="T:Ez.Graphics.API.Descriptons.ResourceSetDescription">
            <summary>
            Describes a <see cref="T:Ez.Graphics.API.Resources.IResourceSet"/>, for creation using a <see cref="T:Ez.Graphics.API.Resources.IResourceFactory"/>.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.Descriptons.ResourceSetDescription.Layout">
            <summary>
            The <see cref="!:ResourceLayout"/> describing the number and kind of resources used.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.Descriptons.ResourceSetDescription.BoundResources">
            <summary>
            An array of <see cref="!:BindableResource"/> objects.
            The number and type of resources must match those specified in the <see cref="!:ResourceLayout"/>.
            </summary>
        </member>
        <member name="M:Ez.Graphics.API.Descriptons.ResourceSetDescription.#ctor(Ez.Graphics.API.Resources.IResourceLayout,Ez.Graphics.API.Resources.IBindableResource[])">
            <summary>
            Constructs a new ResourceSetDescription.
            </summary>
            <param name="layout">The <see cref="T:Ez.Graphics.API.Resources.IResourceLayout"/> describing the number and kind of resources used.</param>
            <param name="boundResources">An array of <see cref="T:Ez.Graphics.API.Resources.IBindableResource"/> objects.
            The number and type of resources must match those specified in the <see cref="!:ResourceLayout"/>.</param>
        </member>
        <member name="T:Ez.Graphics.API.Descriptons.SamplerDescription">
            <summary>
            Describes a <see cref="!:ISampler"/>, for creation using a <see cref="!:IResourceFactory"/>.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.Descriptons.SamplerDescription.EdgeSampleU">
            <summary>
            The <see cref="T:Ez.Graphics.API.EdgeSample"/> mode to use for the U (or S) coordinate.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.Descriptons.SamplerDescription.EdgeSampleV">
            <summary>
            The <see cref="T:Ez.Graphics.API.EdgeSample"/> mode to use for the V (or T) coordinate.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.Descriptons.SamplerDescription.EdgeSampleW">
            <summary>
            The <see cref="T:Ez.Graphics.API.EdgeSample"/> mode to use for the W (or R) coordinate.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.Descriptons.SamplerDescription.Filter">
            <summary>
            The filter used when sampling.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.Descriptons.SamplerDescription.ComparisonFunction">
            <summary>
            An optional value controlling the kind of comparison to use when sampling. If null, comparison sampling is not used.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.Descriptons.SamplerDescription.MaximumAnisotropy">
            <summary>
            The maximum anisotropy of the filter, when <see cref="F:Ez.Graphics.API.SamplerFilter.Anisotropic"/> is used, or otherwise ignored.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.Descriptons.SamplerDescription.MinimumLod">
            <summary>
            The minimum level of detail.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.Descriptons.SamplerDescription.MaximumLod">
            <summary>
            The maximum level of detail.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.Descriptons.SamplerDescription.LodBias">
            <summary>
            The level of detail bias.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.Descriptons.SamplerDescription.BorderColor">
            <summary>
            The constant color that is sampled when <see cref="F:Ez.Graphics.API.EdgeSample.ClampToBorder"/> is used, or otherwise ignored.
            </summary>
        </member>
        <member name="M:Ez.Graphics.API.Descriptons.SamplerDescription.#ctor(Ez.Graphics.API.EdgeSample@,Ez.Graphics.API.EdgeSample@,Ez.Graphics.API.EdgeSample@,Ez.Graphics.API.SamplerFilter@,System.Nullable{Ez.Graphics.API.ComparisonFunction}@,System.UInt32@,System.UInt32@,System.UInt32@,System.Int32@,System.Drawing.Color@)">
            <summary>
            Constructs a new SamplerDescription.
            </summary>
            <param name="edgeSampleU">The <see cref="T:Ez.Graphics.API.EdgeSample"/> to use for the U (or R) coordinate.</param>
            <param name="edgeSampleV">The <see cref="T:Ez.Graphics.API.EdgeSample"/> to use for the V (or S) coordinate.</param>
            <param name="edgeSampleW">The <see cref="T:Ez.Graphics.API.EdgeSample"/> to use for the W (or T) coordinate.</param>
            <param name="filter">The filter used when sampling.</param>
            <param name="comparisonFunction">An optional value controlling the kind of comparison to use when sampling. If null,
            comparison sampling is not used.</param>
            <param name="maximumAnisotropy">The maximum anisotropy of the filter, when <see cref="F:Ez.Graphics.API.SamplerFilter.Anisotropic"/> is
            used, or otherwise ignored.</param>
            <param name="minimumLod">The minimum level of detail.</param>
            <param name="maximumLod">The maximum level of detail.</param>
            <param name="lodBias">The level of detail bias.</param>
            <param name="borderColor">The constant color that is sampled when <see cref="F:Ez.Graphics.API.EdgeSample.ClampToBorder"/> is used, or
            otherwise ignored.</param>
        </member>
        <member name="F:Ez.Graphics.API.Descriptons.SamplerDescription.Nearest">
            <summary>
            Describes a common nearest-filter sampler, with repeat edge sampling.
            Settings:
                EdgeSampleU = EdgeSample.Repeat
                EdgeSampleV = EdgeSample.Repeat
                EdgeSampleW = EdgeSample.Repeat
                Filter = SamplerFilter.MinNearest | SamplerFilter.MagNearest | SamplerFilter.MipmapNearest
                LodBias = 0
                MinimumLod = 0
                MaximumLod = uint.MaxValue
                MaximumAnisotropy = 0
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.Descriptons.SamplerDescription.Linear">
            <summary>
            Describes a common linear-filter sampler, with repeat edge sampling.
            Settings:
                EdgeSampleU = EdgeSample.Repeat
                EdgeSampleV = EdgeSample.Repeat
                EdgeSampleW = EdgeSample.Repeat
                Filter = SamplerFilter.MinNearest | SamplerFilter.MagNearest | SamplerFilter.MipmapNearest
                LodBias = 0
                MinimumLod = 0
                MaximumLod = uint.MaxValue
                MaximumAnisotropy = 0
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.Descriptons.SamplerDescription.AnisotropicLinear4">
            <summary>
            Describes a common 4x-anisotropic-linear-filter sampler, with repeat edge sampling.
            Settings:
                EdgeSampleU = EdgeSample.Repeat
                EdgeSampleV = EdgeSample.Repeat
                EdgeSampleW = EdgeSample.Repeat
                Filter = SamplerFilter.MinNearest | SamplerFilter.MagNearest | SamplerFilter.MipmapNearest | SamplerFilter.Anisotropic
                LodBias = 0
                MinimumLod = 0
                MaximumLod = uint.MaxValue
                MaximumAnisotropy = 0
            </summary>
        </member>
        <member name="M:Ez.Graphics.API.Descriptons.SamplerDescription.Equals(Ez.Graphics.API.Descriptons.SamplerDescription)">
            <summary>
            Element-wise equality.
            </summary>
            <param name="other">The instance to compare to.</param>
            <returns>True if all elements are equal; false otherswise.</returns>
        </member>
        <member name="M:Ez.Graphics.API.Descriptons.SamplerDescription.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="F:Ez.Graphics.API.Descriptons.ShaderSetDescription.VertexLayouts">
            <summary>
            An array of <see cref="T:Ez.Graphics.API.Descriptons.VertexLayoutDescription"/> describing the set of vertex layouts.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.Descriptons.ShaderSetDescription.Shaders">
            <summary>
            A array of <see cref="T:Ez.Graphics.API.Resources.IShader"/> objects used in the <see cref="T:Ez.Graphics.API.Resources.IPipeline"/>.
            </summary>
        </member>
        <member name="M:Ez.Graphics.API.Descriptons.ShaderSetDescription.#ctor(Ez.Graphics.API.Descriptons.VertexLayoutDescription[],Ez.Graphics.API.Resources.IShader[])">
            <summary>
            Constructor of a new <see cref="T:Ez.Graphics.API.Descriptons.ShaderSetDescription"/>.
            </summary>
            <param name="vertexLayouts">An array of <see cref="T:Ez.Graphics.API.Descriptons.VertexLayoutDescription"/> describing the set of vertex layouts.</param>
            <param name="shaders">A array of <see cref="T:Ez.Graphics.API.Resources.IShader"/> objects used in the <see cref="T:Ez.Graphics.API.Resources.IPipeline"/>.</param>
        </member>
        <member name="F:Ez.Graphics.API.Descriptons.StencilTestDescription.StencilComparison">
            <summary>
            The <see cref="T:Ez.Graphics.API.ComparisonFunction"/> used in stencil test.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.Descriptons.StencilTestDescription.Fail">
            <summary>
            The operation when fail the stencil test.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.Descriptons.StencilTestDescription.Pass">
            <summary>
            The operation when pass the stencil test.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.Descriptons.StencilTestDescription.DepthFail">
            <summary>
            The operation when pass the stencil test but fail the depth test.
            </summary>
        </member>
        <member name="T:Ez.Graphics.API.Descriptons.SwapchainDescription">
            <summary>
            Describes a <see cref="!:ISwapchain"/>, for creation via a <see cref="T:Ez.Graphics.API.IGraphicsDevice"/>.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.Descriptons.SwapchainDescription.Source">
            <summary>
            The <see cref="T:Ez.Graphics.API.ISwapchainSource"/> which will be used as the target of rendering operations.
            This is a window-system-specific object which differs by platform.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.Descriptons.SwapchainDescription.Width">
            <summary>
            The initial width of the Swapchain surface.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.Descriptons.SwapchainDescription.Height">
            <summary>
            The initial height of the Swapchain surface.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.Descriptons.SwapchainDescription.DepthFormat">
            <summary>
            The optional format of the depth target of the Swapchain's Framebuffer.
            If non-null, this must be a valid depth Texture format.
            If null, then no depth target will be created.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.Descriptons.SwapchainDescription.IsVSync">
            <summary>
            Indicates whether presentation of the Swapchain will be synchronized to the window system's vertical refresh rate.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.Descriptons.SwapchainDescription.IsSrgbColor">
            <summary>
            Indicates whether the color target of the Swapchain will use an sRGB PixelFormat.
            </summary>
        </member>
        <member name="M:Ez.Graphics.API.Descriptons.SwapchainDescription.#ctor(Ez.Graphics.API.ISwapchainSource,System.UInt32,System.UInt32,System.Nullable{Ez.Graphics.Data.PixelFormat},System.Boolean,System.Boolean)">
            <summary>
            onstructs a new <see cref="T:Ez.Graphics.API.Descriptons.SwapchainDescription"/>.
            </summary>
            <param name="source">The <see cref="!:SwapchainSource"/> which will be used as the target of rendering operations.
            This is a window-system-specific object which differs by platform.</param>
            <param name="width">The initial width of the Swapchain surface.</param>
            <param name="height">The initial height of the Swapchain surface.</param>
            <param name="depthFormat">The optional format of the depth target of the Swapchain's Framebuffer.
            If non-null, this must be a valid depth Texture format.
            If null, then no depth target will be created.</param>
            <param name="isVSync">Indicates whether presentation of the Swapchain will be synchronized to the window
            system's vertical refresh rate.</param>
            <param name="isSrgbColor">Indicates whether the color target of the Swapchain will use an sRGB PixelFormat.</param>
        </member>
        <member name="M:Ez.Graphics.API.Descriptons.SwapchainDescription.#ctor(Ez.Graphics.API.ISwapchainSource,System.UInt32,System.UInt32,System.Nullable{Ez.Graphics.Data.PixelFormat},System.Boolean)">
            <summary>
            onstructs a new <see cref="T:Ez.Graphics.API.Descriptons.SwapchainDescription"/>.
            </summary>
            <param name="source">The <see cref="!:SwapchainSource"/> which will be used as the target of rendering operations.
            This is a window-system-specific object which differs by platform.</param>
            <param name="width">The initial width of the Swapchain surface.</param>
            <param name="height">The initial height of the Swapchain surface.</param>
            <param name="depthFormat">The optional format of the depth target of the Swapchain's Framebuffer.
            If non-null, this must be a valid depth Texture format.
            If null, then no depth target will be created.</param>
            <param name="isVSync">Indicates whether presentation of the Swapchain will be synchronized to the window
            system's vertical refresh rate.</param>
        </member>
        <member name="T:Ez.Graphics.API.Descriptons.TextureViewDescription">
            <summary>
            Describes a <see cref="T:Ez.Graphics.API.Resources.ITextureView"/>, for creation using a <see cref="T:Ez.Graphics.API.Resources.IResourceFactory"/>.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.Descriptons.TextureViewDescription.Texture">
            <summary>
            The desired target <see cref="T:Ez.Graphics.API.Resources.ITexture"/>.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.Descriptons.TextureViewDescription.BaseLevel">
            <summary>
            The base mip level visible in the view. Must be less than <see cref="P:Ez.Graphics.API.Resources.ITexture.MipmapLevels"/>.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.Descriptons.TextureViewDescription.Levels">
            <summary>
            The number of mip levels visible in the view.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.Descriptons.TextureViewDescription.BaseLayer">
            <summary>
            The base array layer visible in the view.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.Descriptons.TextureViewDescription.Layers">
            <summary>
            The number of array layers visible in the view.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.Descriptons.TextureViewDescription.Format">
            <summary>
            An optional <see cref="T:Ez.Graphics.Data.PixelFormat"/> which specifies how the data within <see cref="T:Ez.Graphics.API.Resources.ITexture"/> will be viewed.
            If this value is null, then the created TextureView will use the same <see cref="T:Ez.Graphics.Data.PixelFormat"/> as the target
            <see cref="T:Ez.Graphics.API.Resources.ITexture"/>. If not null, this format must be "compatible" with the target Texture's. For uncompressed
            formats, the overall size and number of components in this format must be equal to the underlying format. For
            compressed formats, it is only possible to use the same PixelFormat or its sRGB/non-sRGB counterpart.
            </summary>
        </member>
        <member name="M:Ez.Graphics.API.Descriptons.TextureViewDescription.#ctor(Ez.Graphics.API.Resources.ITexture)">
            <summary>
            Constructs a new TextureViewDescription.
            </summary>
            <param name="target">The desired target <see cref="T:Ez.Graphics.API.Resources.ITexture"/>. This <see cref="T:Ez.Graphics.API.Resources.ITexture"/> must have been created
            with the <see cref="F:Ez.Graphics.API.TextureUsage.Sampled"/> usage flag.</param>
        </member>
        <member name="M:Ez.Graphics.API.Descriptons.TextureViewDescription.#ctor(Ez.Graphics.API.Resources.ITexture,Ez.Graphics.Data.PixelFormat)">
            <summary>
            Constructs a new TextureViewDescription.
            </summary>
            <param name="target">The desired target <see cref="T:Ez.Graphics.API.Resources.ITexture"/>. This <see cref="T:Ez.Graphics.API.Resources.ITexture"/> must have been created
            with the <see cref="F:Ez.Graphics.API.TextureUsage.Sampled"/> usage flag.</param>
            <param name="format">Specifies how the data within the target Texture will be viewed.
            This format must be "compatible" with the target Texture's. For uncompressed formats, the overall size and number of
            components in this format must be equal to the underlying format. For compressed formats, it is only possible to use
            the same PixelFormat or its sRGB/non-sRGB counterpart.</param>
        </member>
        <member name="M:Ez.Graphics.API.Descriptons.TextureViewDescription.#ctor(Ez.Graphics.API.Resources.ITexture,System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Constructs a new TextureViewDescription.
            </summary>
            <param name="target">The desired target <see cref="T:Ez.Graphics.API.Resources.ITexture"/>.</param>
            <param name="baseMipLevel">The base mip level visible in the view. Must be less than <see cref="P:Ez.Graphics.API.Resources.ITexture.MipmapLevels"/>.
            </param>
            <param name="mipLevels">The number of mip levels visible in the view.</param>
            <param name="baseArrayLayer">The base array layer visible in the view.</param>
            <param name="arrayLayers">The number of array layers visible in the view.</param>
        </member>
        <member name="M:Ez.Graphics.API.Descriptons.TextureViewDescription.#ctor(Ez.Graphics.API.Resources.ITexture,Ez.Graphics.Data.PixelFormat,System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Constructs a new TextureViewDescription.
            </summary>
            <param name="target">The desired target <see cref="T:Ez.Graphics.API.Resources.ITexture"/>.</param>
            <param name="format">Specifies how the data within the target Texture will be viewed.
            This format must be "compatible" with the target Texture's. For uncompressed formats, the overall size and number of
            components in this format must be equal to the underlying format. For compressed formats, it is only possible to use
            the same PixelFormat or its sRGB/non-sRGB counterpart.</param>
            <param name="baseMipLevel">The base mip level visible in the view. Must be less than <see cref="P:Ez.Graphics.API.Resources.ITexture.MipmapLevels"/>.
            </param>
            <param name="mipLevels">The number of mip levels visible in the view.</param>
            <param name="baseArrayLayer">The base array layer visible in the view.</param>
            <param name="arrayLayers">The number of array layers visible in the view.</param>
        </member>
        <member name="M:Ez.Graphics.API.Descriptons.TextureViewDescription.Equals(Ez.Graphics.API.Descriptons.TextureViewDescription)">
            <summary>
            Element-wise equality.
            </summary>
            <param name="other">The instance to compare to.</param>
            <returns>True if all elements are equal; false otherswise.</returns>
        </member>
        <member name="M:Ez.Graphics.API.Descriptons.TextureViewDescription.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="T:Ez.Graphics.API.Descriptons.VertexElementDescription">
            <summary>
            Describe a single element of a vertex.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.Descriptons.VertexElementDescription.Format">
            <summary>
            The format of the element.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.Descriptons.VertexElementDescription.Location">
            <summary>
            The element location in Shader.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.Descriptons.VertexElementDescription.Offset">
            <summary>
            The offset in bytes from the beginning of the vertex.
            </summary>
        </member>
        <member name="T:Ez.Graphics.API.Descriptons.VertexLayoutDescription">
            <summary>
            Describe layout of vertex data in an single <see cref="T:Ez.Graphics.API.Resources.IBuffer`1"/> used as a vertex buffer.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.Descriptons.VertexLayoutDescription.Stride">
            <summary>
            The number of bytes between successive elements in the <see>IBuffer</see>.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.Descriptons.VertexLayoutDescription.InstanceStepRate">
            <summary>
            A value controlling how often data for instances is advanced for this element.
            For per-vertex elements, this value should be 0. For example, an InstanceStepRate 
            of 3 indicates that 3 instances will be drawn with the same value for this element. 
            The next 3 instances will be drawn with the next value for this element, and so on.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.Descriptons.VertexLayoutDescription.Elements">
            <summary>
            An array of VertexElementDescription objects, each describing a single element of vertex data.
            </summary>
        </member>
        <member name="M:Ez.Graphics.API.Descriptons.VertexLayoutDescription.#ctor(System.UInt32,Ez.Graphics.API.Descriptons.VertexElementDescription[])">
            <summary>
            Constructs a new VertexLayoutDescription.
            </summary>
            <param name="stride">The number of bytes in between successive elements in the <see cref="!:DeviceBuffer"/>.</param>
            <param name="elements">An array of <see cref="T:Ez.Graphics.API.Descriptons.VertexElementDescription"/> objects, each describing a single element
            of vertex data.</param>
        </member>
        <member name="M:Ez.Graphics.API.Descriptons.VertexLayoutDescription.#ctor(System.UInt32,System.UInt32,Ez.Graphics.API.Descriptons.VertexElementDescription[])">
            <summary>
            Constructs a new VertexLayoutDescription.
            </summary>
            <param name="stride">The number of bytes in between successive elements in the <see cref="!:DeviceBuffer"/>.</param>
            <param name="elements">An array of <see cref="T:Ez.Graphics.API.Descriptons.VertexElementDescription"/> objects, each describing a single element
            of vertex data.</param>
            <param name="instanceStepRate">A value controlling how often data for instances is advanced for this element. For
            per-vertex elements, this value should be 0.
            For example, an InstanceStepRate of 3 indicates that 3 instances will be drawn with the same value for this element.
            The next 3 instances will be drawn with the next value for this element, and so on.</param>
        </member>
        <member name="M:Ez.Graphics.API.Descriptons.VertexLayoutDescription.#ctor(Ez.Graphics.API.Descriptons.VertexElementDescription[])">
            <summary>
            Constructs a new VertexLayoutDescription. The stride is assumed to be the sum of the size of all elements.
            </summary>
            <param name="elements">An array of <see cref="T:Ez.Graphics.API.Descriptons.VertexElementDescription"/> objects, each describing a single element
            of vertex data.</param>
        </member>
        <member name="F:Ez.Graphics.API.BlendFactor.Zero">
            <summary>
            Factor is equal to 0
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.BlendFactor.One">
            <summary>
            Factor is equal to 1
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.BlendFactor.SourceColor">
            <summary>
            Factor is equal to the source color.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.BlendFactor.OneMinusSourceColor">
            <summary>
            Factor is equal to 1 minus the source color.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.BlendFactor.DestinationColor">
            <summary>
            Factor is equal to destination color.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.BlendFactor.OneMinusDestinationColor">
            <summary>
            Factor is equal to 1 minus the destination color.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.BlendFactor.SourceAlpha">
            <summary>
            Factor is equal to alpha component of the source color.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.BlendFactor.OneMinusSourceAlpha">
            <summary>
            Factor is equal to 1 - alpha component of the source color.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.BlendFactor.DestinationAlpha">
            <summary>
            Factor is equal to alpha component of the destination color.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.BlendFactor.OneMinusDestinationAlpha">
            <summary>
            Factor is equal to 1 - alpha component of dest the destination color.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.BlendFactor.ConstantColor">
            <summary>
            Factor is equal to the constant factor color.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.BlendFactor.OneMinusConstantColor">
            <summary>
            Factor is equal to 1 - the constant factor color.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.BlendFactor.ConstantAlpha">
            <summary>
            Factor is equal to the alpha component of the constant factor color.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.BlendFactor.OneMinusConstantAlpha">
            <summary>
            Factor is equal to 1 - alpha component of the constant factor color.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.BlendFunction.Add">
            <summary>
            Color = source + destination 
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.BlendFunction.Subtract">
            <summary>
            Color = source - destination
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.BlendFunction.ReverseSubtract">
            <summary>
            Color = destination - source
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.BlendFunction.Min">
            <summary>
            Color = min(source, destination)
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.BlendFunction.Max">
            <summary>
            Color = max(source, destination)
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.BufferUsage.None">
            <summary>
            Indicates that there is no flag.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.BufferUsage.VertexBuffer">
            <summary>
            Indicates that a <see cref="T:Ez.Graphics.API.Resources.IBuffer"/> can be used as the source of vertex data for drawing commands.<br/>
            Enables the use of the <see cref="T:Ez.Graphics.API.Resources.IBuffer"/> in <see cref="M:Ez.Graphics.API.ICommandBuffer.BindVertexBuffer(System.UInt32@,Ez.Graphics.API.Resources.IBuffer@,System.UInt32@)"/>.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.BufferUsage.IndexBuffer">
            <summary>
            Indicates that a <see cref="T:Ez.Graphics.API.Resources.IBuffer"/> can be used as the source of index data for drawing commands.<br/>
            Enables the use of the <see cref="T:Ez.Graphics.API.Resources.IBuffer"/> in <see cref="M:Ez.Graphics.API.ICommandBuffer.BindIndexBuffer(Ez.Graphics.API.Resources.IBuffer@,Ez.Graphics.API.IndexFormat@,System.UInt32@)"/>.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.BufferUsage.IndirectBuffer">
            <summary>
            Indicates that a <see cref="T:Ez.Graphics.API.Resources.IBuffer"/> can be used as the source of indirect drawing information. <br/>
            Enables the use of a <see cref="T:Ez.Graphics.API.Resources.IBuffer"/> in the <see cref="M:Ez.Graphics.API.ICommandBuffer.DrawIndirect(Ez.Graphics.API.Resources.IBuffer@,System.UInt32@,System.UInt32@,System.UInt32@)"/>,
            <see cref="M:Ez.Graphics.API.ICommandBuffer.DrawIndexedIndirect(Ez.Graphics.API.Resources.IBuffer@,System.UInt32@,System.UInt32@,System.UInt32@)"/> and
            <see cref="M:Ez.Graphics.API.ICommandBuffer.DispatchIndirect(Ez.Graphics.API.Resources.IBuffer@,System.UInt64@)"/>.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.BufferUsage.HostBuffer">
            <summary>
            Indicates that a <see cref="T:Ez.Graphics.API.Resources.IBuffer"/> is host visible.<br/>        
            Host Buffers can use all <see cref="T:Ez.Graphics.API.MapMode"/> values in <see cref="M:Ez.Graphics.API.Resources.IMappableResource`1.Map(Ez.Graphics.API.MapMode,System.UInt32)"/>
            or <see cref="M:Ez.Graphics.API.Resources.IMappableResource.ByteMap(Ez.Graphics.API.MapMode,System.UInt32)"/>.<br/>
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.BufferUsage.UniformBuffer">
            <summary>
            Indicates that a <see cref="T:Ez.Graphics.API.Resources.IBuffer"/> can be used as a uniform Buffer. This flag enables the use of a Buffer in a ResourceSet as a uniform Buffer.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.BufferUsage.StorageBuffer">
            <summary>
            Indicates that a <see cref="T:Ez.Graphics.API.Resources.IBuffer"/> can be usaed as storage buffer.
            This flag enables the use of a Buffer in a <see cref="T:Ez.Graphics.API.Resources.IResourceSet"/> as a storage buffer
            </summary>
        </member>
        <member name="T:Ez.Graphics.API.ComparisonFunction">
            <summary>
            Function for depth or stencil comparison.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.ComparisonFunction.Always">
            <summary>
            The test always passes.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.ComparisonFunction.Never">
            <summary>
            The test never passes.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.ComparisonFunction.Less">
            <summary>
            Passes if the fragment's value is less than the stored value.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.ComparisonFunction.Equal">
            <summary>
            Passess if the fragmnet's value is equal to the stored value.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.ComparisonFunction.LessEqual">
            <summary>
            Passess if the fragment's value is less thant or equal to the stored value.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.ComparisonFunction.Greater">
            <summary>
            Passes if the fragment's value is greater than the stored value.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.ComparisonFunction.NotEqual">
            <summary>
            Passes if the fragment's value is not equal to the stored value.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.ComparisonFunction.GreaterEqual">
            <summary>
            Passes if the fragment's value is greater or equal to the stored value.
            </summary>
        </member>
        <member name="T:Ez.Graphics.API.EdgeSample">
            <summary>
            Edge sampling used when coordinates when are not in the [0, 1] range.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.EdgeSample.Repeat">
            <summary>
            The texture coordinate wraps around the texture.
            So a texture coordinate of -0.2 becomes the equivalent of 0.8.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.EdgeSample.MirrorRepeat">
            <summary>
            The texture coordinate wraps around like a mirror.
            So a texture coordinate of -0.2 becomes 0.2 and -1.2 becomes 0.8.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.EdgeSample.ClampToEdge">
            <summary>
            The texture coordinate is clamped to the [0, 1] range.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.EdgeSample.ClampToBorder">
            <summary>
            The texture coordinate is clamped to the [0, 1] range, but the edge texels are blended with a constant border color.
            </summary>
        </member>
        <member name="T:Ez.Graphics.API.FaceCullMode">
            <summary>
            The face to be discarded.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.FaceCullMode.None">
            <summary>
            No face culling.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.FaceCullMode.Back">
            <summary>
            The back face.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.FaceCullMode.Front">
            <summary>
            The front face.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.FaceCullMode.FrontAndBack">
            <summary>
            The front and back face.
            </summary>
        </member>
        <member name="T:Ez.Graphics.API.FrontFace">
            <summary>
            The order that the vertices of the front face is described in the vertex buffer.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.FrontFace.Clockwise">
            <summary>
            The vertices for the front face are arranged clockwise.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.FrontFace.Anticlockwise">
            <summary>
            The vertices for the front face are arranged anticlockwise.
            </summary>
        </member>
        <member name="T:Ez.Graphics.API.IndexFormat">
            <summary>
            The format of index data used in a <see cref="T:Ez.Graphics.API.Resources.IBuffer`1"/>.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.IndexFormat.Ushort">
            <summary>
            Each index is a 16-bit unsigned integer (System.UInt16).
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.IndexFormat.Uint">
            <summary>
            Each index is a 32-bit unsigned integer (System.UInt32).
            </summary>
        </member>
        <member name="T:Ez.Graphics.API.MapMode">
            <summary>
            Identifies how a <see cref="T:Ez.Graphics.API.Resources.IMappableResource"/> or <see cref="T:Ez.Graphics.API.Resources.IMappableResource`1"/> will be mapped into CPU address space.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.MapMode.Read">
            <summary>
            A read-only resource mapping. The mapped data region is not writable, and cannot be used to transfer data into the
            graphics resource. NOTE: This mode can only be used on resources created with the Staging usage flag.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.MapMode.Write">
            <summary>
            A write-only resource mapping. The mapped data region is writable, and will be transferred into the graphics resource
            when <see cref="M:Ez.Graphics.API.Resources.IMappableResource.Unmap(System.UInt32)"/> or <see cref="M:Ez.Graphics.API.Resources.IMappableResource`1.UnmanagedMap(Ez.Graphics.API.MapMode,System.UInt32)"/> is
            called. NOTE: upon mapping a buffer with this mode, the previous contents of the resource will be erased. This mode 
            can only be used to entirely replace the contents of a resource.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.MapMode.ReadWrite">
            <summary>
            A read-write resource mapping. The mapped data region is both readable and writable. NOTE: this mode can only be used
            on resources created with the <see cref="!:BufferUsage."/>Staging usage flag.
            </summary>
        </member>
        <member name="T:Ez.Graphics.API.PrimitiveType">
            <summary>
            Determine what a vertex stream represents when rendering.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.PrimitiveType.Triangles">
            <summary>
            Vertices 0, 1, and 2 form a triangle. Vertices 3, 4, and 5 form a triangle. And so on.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.PrimitiveType.TriangleStrip">
            <summary>
            Every group of 3 adjacent vertices forms a triangle.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.PrimitiveType.Lines">
            <summary>
            Vertices 0 and 1 are considered a line. Vertices 2 and 3 are considered a line. And so on.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.PrimitiveType.LineStrip">
            <summary>
            The adjacent vertices are considered lines. Thus, if you pass n vertices, you will get n-1 lines. 
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.PrimitiveType.Points">
            <summary>
            Every earch vertex is a point.
            </summary>
        </member>
        <member name="T:Ez.Graphics.API.ResourceKind">
            <summary>
            The kind of a <see cref="T:Ez.Graphics.API.Resources.IMappableResource`1"/> object.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.ResourceKind.UniformBuffer">
            <summary>
            A <see cref="T:Ez.Graphics.API.Resources.IBuffer`1"/> accessed as a uniform buffer. A subset of a buffer can be bound using a
            <see cref="T:Ez.Graphics.API.BufferRange"/>.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.ResourceKind.StorageBuffer">
            <summary>
            A <see cref="T:Ez.Graphics.API.Resources.IBuffer`1"/> accessed as a read-write storage buffer. A subset of a buffer can be bound using a
            <see cref="T:Ez.Graphics.API.BufferRange"/>.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.ResourceKind.SampledImage">
            <summary>
            A read-only <see cref="T:Ez.Graphics.API.Resources.ITexture"/>, accessed through a Texture or <see cref="T:Ez.Graphics.API.Resources.ITextureView"/>.
            <remarks>Binding a <see cref="T:Ez.Graphics.API.Resources.ITexture"/> to a resource slot expecting a TextureReadWrite is equivalent to binding a
            <see cref="T:Ez.Graphics.API.Resources.ITextureView"/> that covers the full mip and array layer range, with the original Texture's
            <see cref="T:Ez.Graphics.Data.PixelFormat"/>.</remarks>
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.ResourceKind.StorageImage">
            <summary>
            A read-write <see cref="T:Ez.Graphics.API.Resources.ITexture"/>, accessed through a Texture or <see cref="T:Ez.Graphics.API.Resources.ITextureView"/>.
            </summary>
            <remarks>Binding a <see cref="T:Ez.Graphics.API.Resources.ITexture"/> to a resource slot expecting a TextureReadWrite is equivalent to binding a
            <see cref="T:Ez.Graphics.API.Resources.ITextureView"/> that covers the full mip and array layer range, with the original Texture's
            <see cref="T:Ez.Graphics.Data.PixelFormat"/>.</remarks>
        </member>
        <member name="F:Ez.Graphics.API.ResourceKind.Sampler">
            <summary>
            A <see cref="T:Ez.Graphics.API.Resources.ISampler"/>.
            </summary>
        </member>
        <member name="T:Ez.Graphics.API.ResourceLayoutElementOptions">
            <summary>
            Miscellaneous options for an element in a <see cref="T:Ez.Graphics.API.Resources.IResourceLayout"/>.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.ResourceLayoutElementOptions.None">
            <summary>
            No special options.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.ResourceLayoutElementOptions.DynamicBinding">
            <summary>
            Can be applied to a buffer type resource (<see cref="F:Ez.Graphics.API.ResourceKind.StorageBuffer"/>,
            <see cref="F:Ez.Graphics.API.ResourceKind.StorageBuffer"/>, or <see cref="F:Ez.Graphics.API.ResourceKind.UniformBuffer"/>), allowing it to be
            bound with a dynamic offset using <see cref="M:Ez.Graphics.API.ICommandBuffer.BindResourceSets(Ez.Graphics.API.PipelineBindPoint@,System.UInt32@,System.ReadOnlySpan{Ez.Graphics.API.Resources.IResourceSet}@,System.ReadOnlySpan{System.UInt32}@)"/>.
            Offsets specified this way must be a multiple of <see cref="!:IGraphicsDevice.UniformBufferMinOffsetAlignment"/> or
            <see cref="!:GraphicsDevice.StructuredBufferMinOffsetAlignment"/>.
            </summary>
        </member>
        <member name="T:Ez.Graphics.API.Resources.ChangedNameEventArgs">
            <summary>
            EventArgs of a <see cref="E:Ez.Graphics.API.Resources.IDeviceResource.ChangedName"/> event.
            Represents the change from one name to another of a <see cref="T:Ez.Graphics.API.Resources.IDeviceResource"/>.
            </summary>
        </member>
        <member name="P:Ez.Graphics.API.Resources.ChangedNameEventArgs.OldName">
            <summary>
            The old <see cref="T:Ez.Graphics.API.Resources.IDeviceResource"/> name.
            </summary>
        </member>
        <member name="P:Ez.Graphics.API.Resources.ChangedNameEventArgs.NewName">
            <summary>
            The new <see cref="T:Ez.Graphics.API.Resources.IDeviceResource"/> name.
            </summary>
        </member>
        <member name="M:Ez.Graphics.API.Resources.ChangedNameEventArgs.#ctor(System.String,System.String)">
            <summary>
            Create a new object <see cref="!:ChangeNameEventArgs"/>.
            </summary>
            <param name="oldName">The old name.</param>
            <param name="newName">The new name.</param>
        </member>
        <member name="T:Ez.Graphics.API.Resources.IBindableResource">
            <summary>
            A resource which can be bound in a <see cref="T:Ez.Graphics.API.Resources.IResourceSet"/> and used in a shader.
            See <see cref="T:Ez.Graphics.API.Resources.IBuffer`1"/>, <see cref="T:Ez.Graphics.API.BufferRange"/>, <see cref="T:Ez.Graphics.API.Resources.ITexture"/>, <see cref="T:Ez.Graphics.API.Resources.ITextureView"/>
            and <see cref="T:Ez.Graphics.API.Resources.ISampler"/>.
            </summary>
        </member>
        <member name="P:Ez.Graphics.API.Resources.IBuffer.Size">
            <summary>
            Size of buffer in bytes.
            </summary>
        </member>
        <member name="P:Ez.Graphics.API.Resources.IBuffer.ElementStride">
            <summary>
            For structured buffers, this value indicate the size in bytes of a single structure element, and is non-zero.
            For all other buffer types, this value is zero.
            </summary>
        </member>
        <member name="P:Ez.Graphics.API.Resources.IBuffer.Usage">
            <summary>
            A bitmask indicating how this instance is permitted to be used.
            </summary>
        </member>
        <member name="M:Ez.Graphics.API.Resources.IBuffer.Update(System.UInt64,System.IntPtr,System.UInt64)">
            <summary>
            Updates a <see cref="T:Ez.Graphics.API.Resources.IBuffer"/> region with new data.
            </summary>
            <param name="bufferOffset">An offset, in bytes, from the beginning of the <see cref="T:Ez.Graphics.API.Resources.IBuffer"/>'s storage, at which new data will be uploaded.</param>
            <param name="source">A pointer to the start of the data to upload.</param>
            <param name="size">The total size of the uploaded data, in bytes.</param>
        </member>
        <member name="M:Ez.Graphics.API.Resources.IBuffer.Update(System.UInt64,System.Void*,System.UInt64)">
            <summary>
            Updates a <see cref="T:Ez.Graphics.API.Resources.IBuffer"/> region with new data.
            </summary>
            <param name="bufferOffset">>An offset, in bytes, from the beginning of the <see cref="T:Ez.Graphics.API.Resources.IBuffer"/>'s storage, at which new data will be uploaded.</param>
            <param name="source">A pointer to the start of the data to upload.</param>
            <param name="size">The total size of the uploaded data, in bytes.</param>
        </member>
        <member name="M:Ez.Graphics.API.Resources.IBuffer.Update``1(System.UInt64,System.ReadOnlySpan{``0})">
            <summary>
            Updates a <see cref="T:Ez.Graphics.API.Resources.IBuffer"/> region with new data.
            </summary>
            <typeparam name="U">The type of data to upload.</typeparam>
            <param name="bufferOffset">An offset, in bytes, from the beginning of the <see cref="T:Ez.Graphics.API.Resources.IBuffer"/>'s storage, at which new data will be uploaded.</param>
            <param name="source">A readonly span containing the data to upload.</param>
        </member>
        <member name="M:Ez.Graphics.API.Resources.IBuffer.Update``1(System.UInt64,``0[])">
            <summary>
            Updates a <see cref="T:Ez.Graphics.API.Resources.IBuffer"/> region with new data.
            <typeparam name="U">The type of data to upload.</typeparam>
            </summary>
            <param name="bufferOffset">An offset, in bytes, from the beginning of the <see cref="T:Ez.Graphics.API.Resources.IBuffer"/>'s storage, at which new data will be uploaded.</param>
            <param name="source">An array containing the data to upload.</param>
        </member>
        <member name="M:Ez.Graphics.API.Resources.IBuffer.Update``1(System.UInt64,``0@,System.UInt64)">
            <summary>
            Updates a <see cref="T:Ez.Graphics.API.Resources.IBuffer"/> region with new data.
            </summary>
            <typeparam name="U">The type of data to upload.</typeparam>
            <param name="bufferOffset">An offset, in bytes, from the beginning of the <see cref="T:Ez.Graphics.API.Resources.IBuffer"/>'s storage, at which new data will be uploaded.</param>
            <param name="source">A reference to the first of a series of values to upload.</param>
            <param name="size">The total size of the uploaded data, in bytes.</param>
        </member>
        <member name="M:Ez.Graphics.API.Resources.IBuffer.Update``1(System.UInt64,``0,System.UInt64)">
            <summary>
            Updates a <see cref="T:Ez.Graphics.API.Resources.IBuffer"/> region with new data.
            </summary>
            <typeparam name="U">The type of data to upload.</typeparam>
            <param name="bufferOffset">An offset, in bytes, from the beginning of the <see cref="T:Ez.Graphics.API.Resources.IBuffer"/>'s storage, at which new data will be uploaded.</param>
            <param name="source">The value to upload.</param>
            <param name="size">The total size of the uploaded data, in bytes.</param>
        </member>
        <member name="M:Ez.Graphics.API.Resources.IBuffer.Update``1(System.UInt64,``0@)">
            <summary>
            Updates a <see cref="T:Ez.Graphics.API.Resources.IBuffer"/> region with new data.
            </summary>
            <typeparam name="U">The type of data to upload.</typeparam>
            <param name="bufferOffset">An offset, in bytes, from the beginning of the <see cref="T:Ez.Graphics.API.Resources.IBuffer"/>'s storage, at which new data will be uploaded.</param>
            <param name="source">A reference to the first of a series of values to upload.</param>
        </member>
        <member name="M:Ez.Graphics.API.Resources.IBuffer.Update``1(System.UInt64,``0)">
            <summary>
            Updates a <see cref="T:Ez.Graphics.API.Resources.IBuffer"/> region with new data.
            </summary>
            <typeparam name="U">The type of data to upload.</typeparam>
            <param name="bufferOffset">An offset, in bytes, from the beginning of the <see cref="T:Ez.Graphics.API.Resources.IBuffer"/>'s storage, at which new data will be uploaded.</param>
            <param name="source">The value to upload.</param>
        </member>
        <member name="T:Ez.Graphics.API.Resources.IBuffer`1">
            <summary>
            A device resource used to store arbitrary graphics data in various formats.
            The size of a <see cref="T:Ez.Graphics.API.Resources.IBuffer`1"/> is fixed upon creation, and resizing is not possible.
            See <see cref="T:Ez.Graphics.API.Descriptons.BufferDescripton"/>.
            </summary>
        </member>
        <member name="P:Ez.Graphics.API.Resources.IBuffer`1.Elements">
            <summary>
            Number of elements of T type in buffer.
            </summary>
        </member>
        <member name="M:Ez.Graphics.API.Resources.IBuffer`1.Update(System.UInt64,System.ReadOnlySpan{`0})">
            <summary>
            Updates a <see cref="T:Ez.Graphics.API.Resources.IBuffer`1"/> region with new data.
            </summary>
            <param name="bufferOffset">An offset, in bytes, from the beginning of the <see cref="T:Ez.Graphics.API.Resources.IBuffer`1"/>'s storage, at which new data will be uploaded.</param>
            <param name="source">A readonly span containing the data to upload.</param>
        </member>
        <member name="M:Ez.Graphics.API.Resources.IBuffer`1.Update(System.UInt64,`0[])">
            <summary>
            Updates a <see cref="T:Ez.Graphics.API.Resources.IBuffer`1"/> region with new data.
            </summary>
            <param name="bufferOffset">An offset, in bytes, from the beginning of the <see cref="T:Ez.Graphics.API.Resources.IBuffer`1"/>'s storage, at which new data will be uploaded.</param>
            <param name="source">An array containing the data to upload.</param>
        </member>
        <member name="P:Ez.Graphics.API.Resources.IDeviceResource.Name">
            <summary>
            A string that identifies this instance.
            </summary>
        </member>
        <member name="P:Ez.Graphics.API.Resources.IDeviceResource.GraphicsDevice">
            <summary>
            The <see cref="T:Ez.Graphics.API.IGraphicsDevice"/> that owns this <see cref="T:Ez.Graphics.API.Resources.IDeviceResource"/>.
            </summary>
        </member>
        <member name="P:Ez.Graphics.API.Resources.IDeviceResource.IsDisposed">
            <summary>
            If this <see cref="T:Ez.Graphics.API.Resources.IDeviceResource"/> has been disposed.
            </summary>
        </member>
        <member name="E:Ez.Graphics.API.Resources.IDeviceResource.ChangedName">
            <summary>
            The event called when the <see cref="P:Ez.Graphics.API.Resources.IDeviceResource.Name"/> is changed.
            </summary>
        </member>
        <member name="P:Ez.Graphics.API.Resources.IFence.Signaled">
            <summary>
            Gets a value indicating whether the Fence is currently signaled. A Fence is signaled after a CommandList finishes execution after it was submitted with a Fence instance.
            </summary>
        </member>
        <member name="M:Ez.Graphics.API.Resources.IFence.Reset">
            <summary>
            Resets the <see cref="T:Ez.Graphics.API.Resources.IFence"/> to the unsignaled state.
            </summary>
        </member>
        <member name="M:Ez.Graphics.API.Resources.IFence.Set">
            <summary>
            Sets the <see cref="T:Ez.Graphics.API.Resources.IFence"/> to the signaled state.
            </summary>
        </member>
        <member name="M:Ez.Graphics.API.Resources.IFence.Wait(System.UInt64@)">
            <summary>
            Wait for fence.
            </summary>
            <param name="timeout">Timeout in nanoseconds.</param>
        </member>
        <member name="P:Ez.Graphics.API.Resources.IFramebuffer.DepthTarget">
            <summary>
            Gets the depth attachment associated with this instance. May be null if no depth texture is used.
            </summary>
        </member>
        <member name="P:Ez.Graphics.API.Resources.IFramebuffer.ColorTargets">
            <summary>
            Gets the collection of color attachments associated with this instance. May be empty.
            </summary>
        </member>
        <member name="P:Ez.Graphics.API.Resources.IFramebuffer.OutputDescription">
            <summary>
            Gets an <see cref="P:Ez.Graphics.API.Resources.IFramebuffer.OutputDescription"/> which describes the number and formats of the depth and color targets
            in this instance.
            </summary>
        </member>
        <member name="P:Ez.Graphics.API.Resources.IFramebuffer.Width">
            <summary>
            Gets the width of the <see cref="T:Ez.Graphics.API.Resources.IFramebuffer"/>.
            </summary>
        </member>
        <member name="P:Ez.Graphics.API.Resources.IFramebuffer.Height">
            <summary>
            Gets the height of the <see cref="T:Ez.Graphics.API.Resources.IFramebuffer"/>.
            </summary>
        </member>
        <member name="T:Ez.Graphics.API.Resources.IManagedMapping">
            <summary>
            Provides an interface that represents a visible mapping to 
            the cpu of part of the gpu's accessible memory in a managed
            manner.
            </summary>
        </member>
        <member name="T:Ez.Graphics.API.Resources.IManagedMapping`1">
            <summary>
            Provides an interface that represents a visible mapping to 
            the cpu of part of the gpu's accessible memory in a managed
            manner.
            </summary>
            <typeparam name="T">The unmanaged type of data.</typeparam>
        </member>
        <member name="M:Ez.Graphics.API.Resources.IMappableResource.ByteMap(Ez.Graphics.API.MapMode,System.UInt32)">
            <summary>
            
            </summary>
            <param name="mode"></param>
            <param name="subresource"></param>
            <returns></returns>
        </member>
        <member name="M:Ez.Graphics.API.Resources.IMappableResource.UnmanagedByteMap(Ez.Graphics.API.MapMode,System.UInt32)">
            <summary>
            Maps the resource to CPU-accessible data region.
            </summary>
            <param name="mode">The <see cref="T:Ez.Graphics.API.MapMode"/> to use.</param>
            <param name="subresource">The subresource to unmap. 
            (For <see cref="T:Ez.Graphics.API.Resources.ITexture"/> are indexed first by mip slice, then by array layer.)</param>
            <returns>The Span of mapped memory.</returns>
        </member>
        <member name="M:Ez.Graphics.API.Resources.IMappableResource.Unmap(System.UInt32)">
            <summary>
            Invalidates a previously-mapped data region for the <see cref="T:Ez.Graphics.API.Resources.IMappableResource`1"/>.
            </summary>
            <param name="subresource">The subresource to unmap. 
            (For <see cref="T:Ez.Graphics.API.Resources.ITexture"/> are indexed first by mip slice, then by array layer.)</param>
        </member>
        <member name="M:Ez.Graphics.API.Resources.IMappableResource`1.Map(Ez.Graphics.API.MapMode,System.UInt32)">
            <summary>
            
            </summary>
            <param name="mode"></param>
            <param name="subresource"></param>
            <returns></returns>
        </member>
        <member name="M:Ez.Graphics.API.Resources.IMappableResource`1.UnmanagedMap(Ez.Graphics.API.MapMode,System.UInt32)">
            <summary>
            Maps the resource to CPU-accessible data region.
            </summary>
            <param name="mode">The <see cref="T:Ez.Graphics.API.MapMode"/> to use.</param>
            <param name="subresource">The subresource to unmap. 
            (For <see cref="T:Ez.Graphics.API.Resources.ITexture"/> are indexed first by mip slice, then by array layer.)</param>
            <returns>The Span of mapped memory.</returns>
        </member>
        <member name="P:Ez.Graphics.API.Resources.IResourceFactory.GraphicsDevice">
            <summary>
            The <see cref="T:Ez.Graphics.API.IGraphicsDevice"/> to which this <see cref="T:Ez.Graphics.API.Resources.IResourceFactory"/> belongs.
            </summary>
        </member>
        <member name="P:Ez.Graphics.API.Resources.IResourceFactory.Resources">
            <summary>
            Get <see cref="T:System.Collections.Generic.IEnumerable`1"/> with all resources created and not released by this <see cref="T:Ez.Graphics.API.Resources.IResourceFactory"/>.
            </summary>
        </member>
        <member name="M:Ez.Graphics.API.Resources.IResourceFactory.TryGetResource``1(System.String,``0@)">
            <summary>
            Try get a resource of type T(<see cref="T:Ez.Graphics.API.Resources.IDeviceResource"/>) with the specific name.
            </summary>
            <typeparam name="T">The type of resource sought.</typeparam>
            <param name="name">Searched resource name.</param>
            <param name="resource">The resource found, if not found, resource will be default value.</param>
            <returns>True if found, otherwise false.</returns>
        </member>
        <member name="M:Ez.Graphics.API.Resources.IResourceFactory.CreatePipeline(Ez.Graphics.API.Descriptons.GraphicsPipelineDescription@)">
            <summary>
            Create a new <see cref="T:Ez.Graphics.API.Resources.IPipeline"/> object from the <see cref="T:Ez.Graphics.API.Descriptons.GraphicsPipelineDescription"/>.
            </summary>
            <param name="description">The description for a graphics pipeline.</param>
            <returns>A new graphics <see cref="T:Ez.Graphics.API.Resources.IPipeline"/>.</returns>
        </member>
        <member name="M:Ez.Graphics.API.Resources.IResourceFactory.CreatePipeline(Ez.Graphics.API.Descriptons.ComputePipelineDescription@)">
            <summary>
            Create a new <see cref="T:Ez.Graphics.API.Resources.IPipeline"/> object from the <see cref="T:Ez.Graphics.API.Descriptons.ComputePipelineDescription"/>.
            </summary>
            <param name="description">The description for a computer <see cref="T:Ez.Graphics.API.Resources.IPipeline"/>.</param>
            <returns>A new compute <see cref="T:Ez.Graphics.API.Resources.IPipeline"/>.</returns>
        </member>
        <member name="M:Ez.Graphics.API.Resources.IResourceFactory.CreateCommandBuffer">
            <summary>
            Create a new <see cref="T:Ez.Graphics.API.ICommandBuffer"/> object.
            </summary>
            <returns>A <see cref="T:Ez.Graphics.API.ICommandBuffer"/> object.</returns>
        </member>
        <member name="M:Ez.Graphics.API.Resources.IResourceFactory.CreateFramebuffer(Ez.Graphics.API.Descriptons.FramebufferDescripton@)">
            <summary>
            Create a new <see cref="T:Ez.Graphics.API.Resources.IFramebuffer"/> object from the <see cref="T:Ez.Graphics.API.Descriptons.FramebufferDescripton"/>.
            </summary>
            <param name="descripton">The descripton for a <see cref="T:Ez.Graphics.API.Resources.IFramebuffer"/></param>
            <returns>A <see cref="T:Ez.Graphics.API.Resources.IFramebuffer"/> described by a <see cref="T:Ez.Graphics.API.Descriptons.FramebufferDescripton"/>.</returns>
        </member>
        <member name="M:Ez.Graphics.API.Resources.IResourceFactory.CreateTexture(Ez.Graphics.API.Descriptons.TextureDescription@)">
            <summary>
            Create a <see cref="T:Ez.Graphics.API.Resources.ITexture"/> object from a <see cref="T:Ez.Graphics.API.Descriptons.TextureDescription"/>.
            </summary>
            <param name="description">The description of the texture.</param>
            <returns>A <see cref="T:Ez.Graphics.API.Resources.ITexture"/> described by a <see cref="T:Ez.Graphics.API.Descriptons.TextureDescription"/>.</returns>
        </member>
        <member name="M:Ez.Graphics.API.Resources.IResourceFactory.CreateSampler(Ez.Graphics.API.Descriptons.SamplerDescription@)">
            <summary>
            Create a new <see cref="T:Ez.Graphics.API.Resources.ISampler"/> object from the <see cref="T:Ez.Graphics.API.Descriptons.SamplerDescription"/>.
            </summary>
            <param name="description">The descripton for a <see cref="T:Ez.Graphics.API.Resources.ISampler"/>.</param>
            <returns>A <see cref="T:Ez.Graphics.API.Resources.ISampler"/> described by a <see cref="T:Ez.Graphics.API.Descriptons.SamplerDescription"/></returns>
        </member>
        <member name="M:Ez.Graphics.API.Resources.IResourceFactory.CreateShader(Ez.Graphics.API.Descriptons.ShaderDescription@)">
            <summary>
            Create a new <see cref="T:Ez.Graphics.API.Resources.IShader"/> object from the <see cref="T:Ez.Graphics.API.Descriptons.ShaderDescription"/>.
            </summary>
            <param name="description">The descripton for a <see cref="T:Ez.Graphics.API.Resources.IShader"/>.</param>
            <returns>A <see cref="T:Ez.Graphics.API.Resources.IShader"/> described by a <see cref="T:Ez.Graphics.API.Descriptons.ShaderDescription"/></returns>
        </member>
        <member name="M:Ez.Graphics.API.Resources.IResourceFactory.CreateResourceLayout(Ez.Graphics.API.Descriptons.ResourceLayoutDescription@)">
            <summary>
            Create a new <see cref="T:Ez.Graphics.API.Resources.IResourceLayout"/> object from the <see cref="T:Ez.Graphics.API.Descriptons.ResourceLayoutDescription"/>.
            </summary>
            <param name="description">The descripton for a <see cref="T:Ez.Graphics.API.Resources.IResourceLayout"/></param>
            <returns>A <see cref="T:Ez.Graphics.API.Resources.IResourceLayout"/> described by a <see cref="T:Ez.Graphics.API.Descriptons.ResourceLayoutDescription"/></returns>
        </member>
        <member name="M:Ez.Graphics.API.Resources.IResourceFactory.CreateResourceSet(Ez.Graphics.API.Descriptons.ResourceSetDescription@)">
            <summary>
            Create a new <see cref="T:Ez.Graphics.API.Resources.IResourceSet"/> object from the <see cref="T:Ez.Graphics.API.Descriptons.ResourceSetDescription"/>.
            </summary>
            <param name="description">The descripton for a <see cref="T:Ez.Graphics.API.Resources.IResourceSet"/>.</param>
            <returns>A <see cref="T:Ez.Graphics.API.Resources.IResourceSet"/> described by a <see cref="T:Ez.Graphics.API.Descriptons.ResourceSetDescription"/></returns>
        </member>
        <member name="M:Ez.Graphics.API.Resources.IResourceFactory.CreateFence">
            <summary>
            Creates a new <see cref="T:Ez.Graphics.API.Resources.IFence"/>.
            </summary>
            <returns>A new <see cref="T:Ez.Graphics.API.Resources.IFence"/>.</returns>
        </member>
        <member name="M:Ez.Graphics.API.Resources.IResourceFactory.CreateSwapchain(Ez.Graphics.API.Descriptons.SwapchainDescription@)">
            <summary>
            Create a new <see cref="T:Ez.Graphics.API.Resources.ISwapchain"/> object from the <see cref="T:Ez.Graphics.API.Descriptons.SwapchainDescription"/>.
            </summary>
            <param name="description">The description for a <see cref="T:Ez.Graphics.API.Resources.ISwapchain"/>.</param>
            <returns>A <see cref="T:Ez.Graphics.API.Resources.ISwapchain"/> described by a <see cref="T:Ez.Graphics.API.Descriptons.SwapchainDescription"/></returns>
        </member>
        <member name="P:Ez.Graphics.API.Resources.IShader.ShaderType">
            <summary>
            Stages supported in this shader.
            </summary>
        </member>
        <member name="T:Ez.Graphics.API.Resources.ITexture">
            <summary>
            A device resource used to store image data.
            See <see cref="T:Ez.Graphics.API.Descriptons.TextureDescription"/>.
            </summary>
        </member>
        <member name="P:Ez.Graphics.API.Resources.ITexture.Format">
            <summary>
            The format of individual texture elements stored in this instance.
            </summary>
        </member>
        <member name="P:Ez.Graphics.API.Resources.ITexture.Depth">
            <summary>
            The depth in texels.
            </summary>
        </member>
        <member name="P:Ez.Graphics.API.Resources.ITexture.Height">
            <summary>
            The height of texture in texels.
            </summary>
        </member>
        <member name="P:Ez.Graphics.API.Resources.ITexture.Width">
            <summary>
            The width of texture in texels.
            </summary>
        </member>
        <member name="P:Ez.Graphics.API.Resources.ITexture.MipmapLevels">
            <summary>
            The total number of mipmap levels in this instance.
            </summary>
        </member>
        <member name="P:Ez.Graphics.API.Resources.ITexture.ArrayLayers">
            <summary>
            Layers of array.
            </summary>
        </member>
        <member name="P:Ez.Graphics.API.Resources.ITexture.Usage">
            <summary>
            The usage flags given when this instance was created. This property controls how this instance is permitted to be
            used, and it is an error to attempt to use the Texture outside of those contexts.
            </summary>
        </member>
        <member name="P:Ez.Graphics.API.Resources.ITexture.Type">
            <summary>
            The <see cref="T:Ez.Graphics.Data.TextureType"/> of this instance.
            </summary>
        </member>
        <member name="P:Ez.Graphics.API.Resources.ITexture.SampleCount">
            <summary>
            The number of samples in this instance. If this returns any value other than <see cref="F:Ez.Graphics.API.TextureSampleCount.Count1"/>,
            then this instance is a multipsample texture.
            </summary>
        </member>
        <member name="M:Ez.Graphics.API.Resources.ITexture.Update(System.Void*,System.UInt64,System.Int32,System.Int32,System.Int32,System.UInt32,System.UInt32,System.UInt32,System.Int32,System.Int32)">
            <summary>
            Updates a portion of <see cref="T:Ez.Graphics.API.Resources.ITexture"/> with new data.
            </summary>
            <param name="source">A pointer to the start of the data to upload. This must point to tightly-packed pixel data for
            the region specified.</param>
            <param name="size">The number of bytes to upload. This value must match the total size of the texture region
            specified.</param>
            <param name="x">The minimum X value of the updated region.</param>
            <param name="y">The minimum Y value of the updated region.</param>
            <param name="z">The minimum Z value of the updated region.</param>
            <param name="width">The width of the updated region, in texels.</param>
            <param name="height">The height of the updated region, in texels.</param>
            <param name="depth">The depth of the updated region, in texels.</param>
            <param name="mipLevel">The mipmap level to update. Must be less than the total number of mipmaps contained in the
            <see cref="T:Ez.Graphics.API.Resources.ITexture"/>.</param>
            <param name="arrayLayer">The array layer to update. Must be less than the total array layer count contained in the
            <see cref="T:Ez.Graphics.API.Resources.ITexture"/>.</param>
        </member>
        <member name="M:Ez.Graphics.API.Resources.ITexture.Update(System.IntPtr,System.UInt64,System.Int32,System.Int32,System.Int32,System.UInt32,System.UInt32,System.UInt32,System.Int32,System.Int32)">
            <summary>
            Updates a portion of <see cref="T:Ez.Graphics.API.Resources.ITexture"/> with new data.
            </summary>
            <param name="source">A pointer to the start of the data to upload. This must point to tightly-packed pixel data for
            the region specified.</param>
            <param name="size">The number of bytes to upload. This value must match the total size of the texture region
            specified.</param>
            <param name="x">The minimum X value of the updated region.</param>
            <param name="y">The minimum Y value of the updated region.</param>
            <param name="z">The minimum Z value of the updated region.</param>
            <param name="width">The width of the updated region, in texels.</param>
            <param name="height">The height of the updated region, in texels.</param>
            <param name="depth">The depth of the updated region, in texels.</param>
            <param name="mipLevel">The mipmap level to update. Must be less than the total number of mipmaps contained in the
            <see cref="T:Ez.Graphics.API.Resources.ITexture"/>.</param>
            <param name="arrayLayer">The array layer to update. Must be less than the total array layer count contained in the
            <see cref="T:Ez.Graphics.API.Resources.ITexture"/>.</param>
        </member>
        <member name="M:Ez.Graphics.API.Resources.ITexture.Update``1(System.ReadOnlySpan{``0},System.Int32,System.Int32,System.Int32,System.UInt32,System.UInt32,System.UInt32,System.Int32,System.Int32)">
            <summary>
            Updates a portion of <see cref="T:Ez.Graphics.API.Resources.ITexture"/> with new data contained in an array
            </summary>
            <param name="source">An array containing the data to upload. This must contain tightly-packed pixel data for the
            region specified.</param>
            <param name="x">The minimum X value of the updated region.</param>
            <param name="y">The minimum Y value of the updated region.</param>
            <param name="z">The minimum Z value of the updated region.</param>
            <param name="width">The width of the updated region, in texels.</param>
            <param name="height">The height of the updated region, in texels.</param>
            <param name="depth">The depth of the updated region, in texels.</param>
            <param name="mipLevel">The mipmap level to update. Must be less than the total number of mipmaps contained in the
            <see cref="T:Ez.Graphics.API.Resources.ITexture"/>.</param>
            <param name="arrayLayer">The array layer to update. Must be less than the total array layer count contained in the
            <see cref="T:Ez.Graphics.API.Resources.ITexture"/>.</param>
        </member>
        <member name="M:Ez.Graphics.API.Resources.ITexture.Update``1(``0[],System.Int32,System.Int32,System.Int32,System.UInt32,System.UInt32,System.UInt32,System.Int32,System.Int32)">
            <summary>
            Updates a portion of <see cref="T:Ez.Graphics.API.Resources.ITexture"/> with new data contained in an array
            </summary>
            <param name="source">A readonly span containing the data to upload. This must contain tightly-packed pixel data for the
            region specified.</param>
            <param name="x">The minimum X value of the updated region.</param>
            <param name="y">The minimum Y value of the updated region.</param>
            <param name="z">The minimum Z value of the updated region.</param>
            <param name="width">The width of the updated region, in texels.</param>
            <param name="height">The height of the updated region, in texels.</param>
            <param name="depth">The depth of the updated region, in texels.</param>
            <param name="mipLevel">The mipmap level to update. Must be less than the total number of mipmaps contained in the
            <see cref="T:Ez.Graphics.API.Resources.ITexture"/>.</param>
            <param name="arrayLayer">The array layer to update. Must be less than the total array layer count contained in the
            <see cref="T:Ez.Graphics.API.Resources.ITexture"/>.</param>
        </member>
        <member name="T:Ez.Graphics.API.SamplerFilter">
            <summary>
            Determines how texture values are sampled from a texture.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.SamplerFilter.MinNearest">
            <summary>
            Nearest sampling is used for minification.
            This flag cannot be combined with <see cref="F:Ez.Graphics.API.SamplerFilter.MinLinear"/>.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.SamplerFilter.MinLinear">
            <summary>
            Linear sampling is used for minification.
            This flag cannot be combined with <see cref="F:Ez.Graphics.API.SamplerFilter.MinNearest"/>.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.SamplerFilter.MagNearest">
            <summary>
            Nearest sampling is used for magnification.
            This flag cannot be combined with <see cref="F:Ez.Graphics.API.SamplerFilter.MagLinear"/>.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.SamplerFilter.MagLinear">
            <summary>
            Linear sampling is used for magnification.
            This flag cannot be combined with <see cref="F:Ez.Graphics.API.SamplerFilter.MagNearest"/>.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.SamplerFilter.MipmapNearest">
            <summary>
            Nearest sampling is used for mip-level sampling.
            This flag cannot be combined with <see cref="F:Ez.Graphics.API.SamplerFilter.MipmapLinear"/>.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.SamplerFilter.MipmapLinear">
            <summary>
            Linear sampling is used for mip-level sampling.
            This flag cannot be combined with <see cref="F:Ez.Graphics.API.SamplerFilter.MipmapNearest"/>.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.SamplerFilter.NoAnisotropic">
            <summary>
            Anisotropic filtering isn't used.
            This flag cannot be combined with <see cref="F:Ez.Graphics.API.SamplerFilter.Anisotropic"/>.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.SamplerFilter.Anisotropic">
            <summary>
            Anisotropic filtering is used. The maximum anisotropy is controlled by
            <see cref="!:SamplerDescription.MaximumAnisotropy"/>
            This flag cannot be combined with <see cref="F:Ez.Graphics.API.SamplerFilter.NoAnisotropic"/>.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.ShaderBytes.SpirV">
            <summary>
            SPIR-V bytecode.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.ShaderBytes.Glsl">
            <summary>
            ASCII-encoded GLSL text.
            </summary>
        </member>
        <member name="T:Ez.Graphics.API.ShaderConstantType">
            <summary>
            The data type of a shader constant.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.ShaderConstantType.Boolean">
            <summary>
            Boolean type.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.ShaderConstantType.Ushort">
            <summary>
            16-bits unsigned integer.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.ShaderConstantType.Short">
            <summary>
            16-bits signed integer.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.ShaderConstantType.Uint">
            <summary>
            32-bits unsigned integer.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.ShaderConstantType.Int">
            <summary>
            32-bits signed integer.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.ShaderConstantType.Ulong">
            <summary>
            64-bits unsigned integer.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.ShaderConstantType.Long">
            <summary>
            64-bits signed integer.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.ShaderConstantType.Single">
            <summary>
            32-bits float-point.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.ShaderConstantType.Double">
            <summary>
            64-bits float-point.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.StencilOperation.Keep">
            <summary>
            The currently stored stencil value is kept.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.StencilOperation.Zero">
            <summary>
            The stencil value is set to 0.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.StencilOperation.Replace">
            <summary>
            The stencil value is replaced with the <see cref="!:DepthStencilStateDescription.StencilReference"/>.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.StencilOperation.Increment">
            <summary>
            The stencil value is increased by 1 if it is lower than the maximum value.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.StencilOperation.IncrementAndWrap">
            <summary>
            The stencil value is increased by 1, if maximum value is exceeded wraps it back to 0.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.StencilOperation.Decrement">
            <summary>
            The stencil value is decreased by 1 if it is higher than the minimum value.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.StencilOperation.DecrementAndWrap">
            <summary>
            The stencil value is decreased by 1, if value is lower than 0 wraps it back to maximum value.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.StencilOperation.Invert">
            <summary>
            Bitwise inverts the current stencil buffer value.
            </summary>
        </member>
        <member name="T:Ez.Graphics.API.TextureSampleCount">
            <summary>
            Describes the number of samples to use in a <see cref="!:Texture"/>.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.TextureSampleCount.Count1">
            <summary>
            1 sample (no multi-sampling).
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.TextureSampleCount.Count2">
            <summary>
            2 Samples.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.TextureSampleCount.Count4">
            <summary>
            4 Samples.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.TextureSampleCount.Count8">
            <summary>
            8 Samples.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.TextureSampleCount.Count16">
            <summary>
            16 Samples.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.TextureSampleCount.Count32">
            <summary>
            32 Samples.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.TextureUsage.Sampled">
            <summary>
            The Texture can be used as the target of a read-only <see cref="T:Ez.Graphics.API.Resources.ITextureView"/>, and can be accessed from a shader.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.TextureUsage.Storage">
            <summary>
            The Texture can be used as the target of a read-write <see cref="T:Ez.Graphics.API.Resources.ITextureView"/>, and can be accessed from a shader.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.TextureUsage.RenderTarget">
            <summary>
            The Texture can be used as the color target of a <see cref="T:Ez.Graphics.API.Resources.IFramebuffer"/>.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.TextureUsage.DepthStencil">
            <summary>
            The Texture can be used as the depth target of a <see cref="T:Ez.Graphics.API.Resources.IFramebuffer"/>.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.TextureUsage.Cubemap">
            <summary>
            The Texture is a two-dimensional cubemap.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.TextureUsage.Staging">
            <summary>
            The Texture is used as a read-write staging resource for uploading Texture data.
            With this flag, a Texture can be mapped.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.TextureUsage.GenerateMipmaps">
            <summary>
            The Texture supports automatic generation of mipmaps through <see cref="M:Ez.Graphics.API.ICommandBuffer.GenerateMipmaps(Ez.Graphics.API.Resources.ITexture)"/>.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.VertexElementFormat.Byte2">
            <summary>
            Two 1-byte unsigned intergers.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.VertexElementFormat.Byte2Norm">
            <summary>
            Two 1-byte unsigned normalized intergers.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.VertexElementFormat.Byte4">
            <summary>
            Four 1-byte unsigned intergers.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.VertexElementFormat.Byte4Norm">
            <summary>
            Four 1-byte unsigned normalized intergers.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.VertexElementFormat.Single1">
            <summary>
            One 4-byte floating point value.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.VertexElementFormat.Single2">
            <summary>
            Two 4-byte floating point value.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.VertexElementFormat.Single3">
            <summary>
            Three 4-byte floating point value.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.VertexElementFormat.Single4">
            <summary>
            Four 4-byte floating point value.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.VertexElementFormat.Half1">
            <summary>
            One 2-byte floating point value.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.VertexElementFormat.Half2">
            <summary>
            Two 2-byte floating point value.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.VertexElementFormat.Half3">
            <summary>
            Three 2-byte floating point value.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.VertexElementFormat.Half4">
            <summary>
            Four 2-byte floating point value.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.VertexElementFormat.Int1">
            <summary>
            One 4-byte signed interger.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.VertexElementFormat.Int2">
            <summary>
            Two 4-byte signed interger.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.VertexElementFormat.Int3">
            <summary>
            Three 4-byte signed interger.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.VertexElementFormat.Int4">
            <summary>
            Four 4-byte signed interger.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.VertexElementFormat.SByte2">
            <summary>
            Two 1-byte signed interger.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.VertexElementFormat.SByte2Norm">
            <summary>
            Two 1-byte signed normalized interger.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.VertexElementFormat.SByte4">
            <summary>
            Four 1-byte signed interger.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.VertexElementFormat.SByte4Norm">
            <summary>
            Four 1-byte signed normalized interger.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.VertexElementFormat.Short2">
            <summary>
            Two 2-byte signed interger.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.VertexElementFormat.Short2Norm">
            <summary>
            Two 2-byte signed normalized interger.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.VertexElementFormat.Short4">
            <summary>
            Four 2-byte signed interger.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.VertexElementFormat.Short4Norm">
            <summary>
            Four 2-byte signed normalized interger.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.VertexElementFormat.UInt1">
            <summary>
            One 4-byte unsigned interger.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.VertexElementFormat.UInt2">
            <summary>
            Two 4-byte unsigned interger.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.VertexElementFormat.UInt3">
            <summary>
            Three 4-byte unsigned interger.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.VertexElementFormat.UInt4">
            <summary>
            Four 4-byte unsigned interger.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.VertexElementFormat.UShort2">
            <summary>
            Two 2-byte unsigned interger.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.VertexElementFormat.UShort2Norm">
            <summary>
            Two 2-byte unsigned normalized interger.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.VertexElementFormat.UShort4">
            <summary>
            Four 2-byte unsigned interger.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.VertexElementFormat.UShort4Norm">
            <summary>
            Four 2-byte unsigned normalized interger.
            </summary>
        </member>
        <member name="T:Ez.Graphics.API.FramebufferAttachment">
            <summary>
            Represents a single output of a <see cref="T:Ez.Graphics.API.Resources.IFramebuffer"/>. May be a color or depth attachment.
            </summary>
        </member>
        <member name="P:Ez.Graphics.API.FramebufferAttachment.Target">
            <summary>
            The target <see cref="T:Ez.Graphics.API.Resources.ITexture"/> which will be rendered to.
            </summary>
        </member>
        <member name="P:Ez.Graphics.API.FramebufferAttachment.ArrayLayer">
            <summary>
            The target array layer.
            </summary>
        </member>
        <member name="P:Ez.Graphics.API.FramebufferAttachment.MipLevel">
            <summary>
            The target mip level.
            </summary>
        </member>
        <member name="M:Ez.Graphics.API.FramebufferAttachment.#ctor(Ez.Graphics.API.Resources.ITexture,System.UInt32)">
            <summary>
            Constructs a new FramebufferAttachment.
            </summary>
            <param name="target">The target <see cref="T:Ez.Graphics.API.Resources.ITexture"/> which will be rendered to.</param>
            <param name="arrayLayer">The target array layer.</param>
        </member>
        <member name="M:Ez.Graphics.API.FramebufferAttachment.#ctor(Ez.Graphics.API.Resources.ITexture,System.UInt32,System.UInt32)">
            <summary>
            Constructs a new FramebufferAttachment.
            </summary>
            <param name="target">The target <see cref="T:Ez.Graphics.API.Resources.ITexture"/> which will be rendered to.</param>
            <param name="arrayLayer">The target array layer.</param>
            <param name="mipLevel">The target mip level.</param>
        </member>
        <member name="T:Ez.Graphics.API.GraphicsDeviceFeatures">
            <summary>
            Features supported by a given <see cref="T:Ez.Graphics.API.IGraphicsDevice"/>.
            </summary>
        </member>
        <member name="P:Ez.Graphics.API.GraphicsDeviceFeatures.ComputeShader">
            <summary>
            Indicates whether Compute Shaders can be used.
            </summary>
        </member>
        <member name="P:Ez.Graphics.API.GraphicsDeviceFeatures.GeometryShader">
            <summary>
            Indicates whether Geometry Shaders can be used.
            </summary>
        </member>
        <member name="P:Ez.Graphics.API.GraphicsDeviceFeatures.TessellationShaders">
            <summary>
            Indicates whether Tessellation Shaders can be used.
            </summary>
        </member>
        <member name="P:Ez.Graphics.API.GraphicsDeviceFeatures.MultipleViewports">
            <summary>
            Indicates whether multiple independent viewports can be set simultaneously.
            If this is not supported, then only the first Viewport index will be used for all render outputs.
            </summary>
        </member>
        <member name="P:Ez.Graphics.API.GraphicsDeviceFeatures.SamplerLodBias">
            <summary>
            Indicates whether <see cref="F:Ez.Graphics.API.Descriptons.SamplerDescription.LodBias"/> can be non-zero.
            If false, it is an error to attempt to use a non-zero bias value.
            </summary>
        </member>
        <member name="P:Ez.Graphics.API.GraphicsDeviceFeatures.DrawBaseVertex">
            <summary>
            Indicates whether a non-zero "vertexStart" value can be used in
            <see cref="M:Ez.Graphics.API.ICommandBuffer.Draw(System.UInt32@,System.UInt32@,System.UInt32@,System.UInt32@)"/> and
            <see cref="M:Ez.Graphics.API.ICommandBuffer.DrawIndexed(System.UInt32@,System.UInt32@,System.UInt32@,System.UInt32@,System.UInt32@)"/>.
            </summary>
        </member>
        <member name="P:Ez.Graphics.API.GraphicsDeviceFeatures.DrawBaseInstance">
            <summary>
            Indicates whether a non-zero "instanceStart" value can be used in
            <see cref="M:Ez.Graphics.API.ICommandBuffer.Draw(System.UInt32@,System.UInt32@,System.UInt32@,System.UInt32@)"/> and
            <see cref="M:Ez.Graphics.API.ICommandBuffer.DrawIndexed(System.UInt32@,System.UInt32@,System.UInt32@,System.UInt32@,System.UInt32@)"/>.
            </summary>
        </member>
        <member name="P:Ez.Graphics.API.GraphicsDeviceFeatures.DrawIndirect">
            <summary>
            Indicates whether indirect draw commands can be issued.
            </summary>
        </member>
        <member name="P:Ez.Graphics.API.GraphicsDeviceFeatures.DrawIndirectBaseInstance">
            <summary>
            Indicates whether indirect draw structures stored in an Indirect DeviceBuffer can contain
            a non-zero FirstInstance value.
            </summary>
        </member>
        <member name="P:Ez.Graphics.API.GraphicsDeviceFeatures.FillModeWireframe">
            <summary>
            Indicates whether <see cref="F:Ez.Graphics.API.PolygonFillMode.Line"/> is supported.
            </summary>
        </member>
        <member name="P:Ez.Graphics.API.GraphicsDeviceFeatures.SamplerAnisotropy">
            <summary>
            Indicates whether <see cref="F:Ez.Graphics.API.SamplerFilter.Anisotropic"/> is supported.
            </summary>
        </member>
        <member name="P:Ez.Graphics.API.GraphicsDeviceFeatures.DepthClipDisable">
            <summary>
            Indicates whether <see cref="F:Ez.Graphics.API.Descriptons.RasterizerStateDescription.DepthClipEnabled"/> can be set to false.
            </summary>
        </member>
        <member name="P:Ez.Graphics.API.GraphicsDeviceFeatures.Texture1D">
            <summary>
            Indicates whether a <see cref="T:Ez.Graphics.API.Resources.ITexture"/> can be created with <see cref="!:TextureType.Texture1D"/>.
            </summary>
        </member>
        <member name="P:Ez.Graphics.API.GraphicsDeviceFeatures.IndependentBlend">
            <summary>
            Indicates whether a <see cref="T:Ez.Graphics.API.Descriptons.BlendStateDescription"/> can be used which has multiple different
            <see cref="T:Ez.Graphics.API.Descriptons.BlendAttachmentDescription"/> values for each attachment. If false, all attachments must have the same
            blend state.
            </summary>
        </member>
        <member name="P:Ez.Graphics.API.GraphicsDeviceFeatures.StorageBuffer">
            <summary>
            Indicates whether <see cref="F:Ez.Graphics.API.BufferUsage.StorageBuffer"/> can be used. If false, structured buffers cannot be created.
            </summary>
        </member>
        <member name="P:Ez.Graphics.API.GraphicsDeviceFeatures.SubsetTextureView">
            <summary>
            Indicates whether a <see cref="T:Ez.Graphics.API.Resources.ITextureView"/> can be created which does not view the full set of mip levels and array
            layers contained in its target Texture, or uses a different <see cref="!:PixelFormat"/> from the underlying Texture.
            </summary>
        </member>
        <member name="P:Ez.Graphics.API.GraphicsDeviceFeatures.CommandListDebugMarkers">
            <summary>
            Indicates whether <see cref="T:Ez.Graphics.API.ICommandBuffer"/> instances created with this device support the
            <see cref="!:ICommandBuffer.PushDebugGroup(string)"/>, <see cref="!:ICommandBuffer.PopDebugGroup"/>, and
            <see cref="!:ICommandBuffer.InsertDebugMarker(string)"/> methods. If not, these methods will have no effect.
            </summary>
        </member>
        <member name="P:Ez.Graphics.API.GraphicsDeviceFeatures.BufferRangeBinding">
            <summary>
            Indicates whether uniform and structured buffers can be bound with an offset and a size. If false, buffer resources
            must be bound with their full range.
            </summary>
        </member>
        <member name="P:Ez.Graphics.API.GraphicsDeviceFeatures.ShaderFloat64">
            <summary>
            Indicates whether 64-bit floating point integers can be used in shaders.
            </summary>
        </member>
        <member name="T:Ez.Graphics.API.IndirectDrawArguments">
            <summary>
            A structure describing the format expected by indirect draw commands contained in an indirect <see cref="T:Ez.Graphics.API.Resources.IBuffer`1"/>.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.IndirectDrawArguments.VertexCount">
            <summary>
            The number of vertices to draw.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.IndirectDrawArguments.InstanceCount">
            <summary>
            The number of instances to draw.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.IndirectDrawArguments.FirstVertex">
            <summary>
            The first vertex to draw. Subsequent vertices are incremented by 1.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.IndirectDrawArguments.FirstInstance">
            <summary>
            The first instance to draw. Subsequent instances are incrmented by 1.
            </summary>
        </member>
        <member name="T:Ez.Graphics.API.IndirectDrawIndexedArguments">
            <summary>
            A structure describing the format expected by indirect, indexed draw commands contained in an indirect <see cref="T:Ez.Graphics.API.Resources.IBuffer`1"/>.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.IndirectDrawIndexedArguments.IndexCount">
            <summary>
            The number of indices to use in the indexed draw.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.IndirectDrawIndexedArguments.InstanceCount">
            <summary>
            The number of instances to draw.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.IndirectDrawIndexedArguments.FirstIndex">
            <summary>
            The value which is used as the start of the indices used for the draw.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.IndirectDrawIndexedArguments.VertexOffset">
            <summary>
            An offset which is added to each vertex element referenced by the index <see cref="T:Ez.Graphics.API.Resources.IBuffer`1"/>.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.IndirectDrawIndexedArguments.FirstInstance">
            <summary>
            The first instance to draw. Subsequent instances (if InstanceCount > 1) are incremented by 1.
            </summary>
        </member>
        <member name="T:Ez.Graphics.API.ISwapchainSource">
            <summary>
            A platform-specific object representing a renderable surface.
            A SwapchainSource is used to describe a Swapchain (see <see cref="T:Ez.Graphics.API.Descriptons.SwapchainDescription"/>).
            </summary>
        </member>
        <member name="T:Ez.Graphics.API.PixelFormatProperties">
            <summary>
            Describes the properties that are supported for a particular combination of <see cref="!:PixelFormat"/>,
            <see cref="!:TextureType"/>, and <see cref="T:Ez.Graphics.API.TextureUsage"/> by a <see cref="T:Ez.Graphics.API.IGraphicsDevice"/>.
            See <see cref="!:GraphicsDevice.TryGetPixelFormatSupport(PixelFormat, TextureType, TextureUsage, out PixelFormatProperties)"/>.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.PixelFormatProperties.MaxWidth">
            <summary>
            The maximum supported width.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.PixelFormatProperties.MaxHeight">
            <summary>
            The maximum supported height.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.PixelFormatProperties.MaxDepth">
            <summary>
            The maximum supported depth.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.PixelFormatProperties.MaxMipLevels">
            <summary>
            The maximum supported number of mipmap levels.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.PixelFormatProperties.MaxArrayLayers">
            <summary>
            The maximum supported number of array layers.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.PixelFormatProperties.MaxSampleCount">
            <summary>
            The maximum supported sample count.
            </summary>
        </member>
        <member name="M:Ez.Graphics.API.ICommandBuffer.Begin">
            <summary>
            Puts this <see cref="T:Ez.Graphics.API.ICommandBuffer"/> into the initial state.
            This function must be called before other graphics commands can be issued.
            Begin must only be called if it has not been previously called, if <see cref="M:Ez.Graphics.API.ICommandBuffer.End"/> has been called,
            or if <see cref="M:Ez.Graphics.API.IGraphicsDevice.Submit(Ez.Graphics.API.ICommandBuffer)"/> has been called on this instance.
            </summary>
        </member>
        <member name="M:Ez.Graphics.API.ICommandBuffer.End">
            <summary>
            Completes this list of graphics commands, putting it into an executable state for a <see cref="T:Ez.Graphics.API.IGraphicsDevice"/>.
            This function must only be called after <see cref="M:Ez.Graphics.API.ICommandBuffer.Begin"/> has been called.
            It is an error to call this function in succession, unless <see cref="M:Ez.Graphics.API.ICommandBuffer.Begin"/> has been called in between invocations.
            </summary>
        </member>
        <member name="M:Ez.Graphics.API.ICommandBuffer.GenerateMipmaps(Ez.Graphics.API.Resources.ITexture)">
            <summary>
            Generates mipmaps for the given <see cref="T:Ez.Graphics.API.Resources.ITexture"/>. The largest mipmap is used to generate all of the lower mipmap
            levels contained in the Texture. The previous contents of all lower mipmap levels are overwritten by this operation.
            The target Texture must have been created with <see cref="T:Ez.Graphics.API.TextureUsage"/>.<see cref="F:Ez.Graphics.API.TextureUsage.GenerateMipmaps"/>.
            </summary>
            <param name="texture">The <see cref="T:Ez.Graphics.API.Resources.ITexture"/> to generate mipmaps for. This Texture must have been created with
            <see cref="T:Ez.Graphics.API.TextureUsage"/>.<see cref="F:Ez.Graphics.API.TextureUsage.GenerateMipmaps"/>.</param>
        </member>
        <member name="M:Ez.Graphics.API.ICommandBuffer.BindPipeline(Ez.Graphics.API.Resources.IPipeline@)">
            <summary>
            Sets the active <see cref="T:Ez.Graphics.API.Resources.IPipeline"/> used for rendering.
            When drawing, the active <see cref="T:Ez.Graphics.API.Resources.IPipeline"/> must be compatible with the bound <see cref="!:Framebuffer"/>,
            <see cref="!:ResourceSet"/>, and <see cref="T:Ez.Graphics.API.Resources.IBuffer`1"/> objects.
            When a new Pipeline is set, the previously-bound ResourceSets on this CommandList become invalidated and must be
            re-bound.
            </summary>
            <param name="pipeline">The new <see cref="T:Ez.Graphics.API.Resources.IPipeline"/> object.</param>
        </member>
        <member name="M:Ez.Graphics.API.ICommandBuffer.BindVertexBuffer(System.UInt32@,Ez.Graphics.API.Resources.IBuffer@,System.UInt32@)">
            <summary>
            Sets the active <see cref="T:Ez.Graphics.API.Resources.IBuffer`1"/> for the given index.
            When drawing, the bound <see cref="T:Ez.Graphics.API.Resources.IBuffer`1"/> objects must be compatible with the bound <see cref="T:Ez.Graphics.API.Resources.IPipeline"/>.
            The given buffer must be non-null. It is not necessary to un-bind vertex buffers for Pipelines which will not
            use them. All extra vertex buffers are simply ignored.
            </summary>
            <typeparam name="T">Internal type of buffer.</typeparam>
            <param name="index">The buffer slot.</param>
            <param name="buffer">The new <see cref="!:DeviceBuffer"/>.</param>
            <param name="offset">The offset from the start of the buffer, in bytes, from which data will start to be read.</param>
        </member>
        <member name="M:Ez.Graphics.API.ICommandBuffer.BindIndexBuffer(Ez.Graphics.API.Resources.IBuffer@,Ez.Graphics.API.IndexFormat@,System.UInt32@)">
            <summary>
            Sets the active <see cref="T:Ez.Graphics.API.Resources.IBuffer`1"/>.
            When drawing, an <see cref="T:Ez.Graphics.API.Resources.IBuffer`1"/> must be bound.
            </summary>
            <typeparam name="T">Internal type of buffer.</typeparam>
            <param name="buffer">The new <see cref="T:Ez.Graphics.API.Resources.IBuffer`1"/>.</param>
            <param name="format">The format of data in the <see cref="T:Ez.Graphics.API.Resources.IBuffer`1"/>.</param>
            <param name="offset">The offset from the start of the buffer, in bytes, from which data will start to be read.</param>
        </member>
        <member name="M:Ez.Graphics.API.ICommandBuffer.BindResourceSets(Ez.Graphics.API.PipelineBindPoint@,System.UInt32@,System.ReadOnlySpan{Ez.Graphics.API.Resources.IResourceSet}@,System.ReadOnlySpan{System.UInt32}@)">
            <summary>
            Binds resource sets to a command buffer
            </summary>
            <param name="pipelineBindPoint">Indicating the type of the pipeline that will use the resource sets. There is a separate set of bind points for each pipeline type, so binding one does not disturb the others.</param>
            <param name="firstSet">The set number of the first resource set to be bound.</param>
            <param name="set">The span of <see cref="T:Ez.Graphics.API.Resources.IResourceSet"/> objects describing the resource sets </param>
            <param name="dynamicOffsets"></param>
        </member>
        <member name="M:Ez.Graphics.API.ICommandBuffer.BindFramebuffer(Ez.Graphics.API.Resources.IFramebuffer@)">
            <summary>
            Sets the active <see cref="T:Ez.Graphics.API.Resources.IFramebuffer"/> which will be rendered to.
            When drawing, the active <see cref="T:Ez.Graphics.API.Resources.IFramebuffer"/> must be compatible with the active <see cref="T:Ez.Graphics.API.Resources.IPipeline"/>.
            A compatible <see cref="T:Ez.Graphics.API.Resources.IPipeline"/> has the same number of output attachments with matching formats.
            </summary>
            <param name="framebuffer">The new <see cref="T:Ez.Graphics.API.Resources.IFramebuffer"/>.</param>
        </member>
        <member name="M:Ez.Graphics.API.ICommandBuffer.ClearColorTarget(System.UInt32@,Ez.Graphics.Data.IColor@)">
            <summary>
            Clears the color target at the given index of the active <see cref="T:Ez.Graphics.API.Resources.IFramebuffer"/>.
            The index given must be less than the number of color attachments in the active <see cref="T:Ez.Graphics.API.Resources.IFramebuffer"/>.
            </summary>
            <param name="index">The color target index.</param>
            <param name="color">The value to clear the target to.</param>
        </member>
        <member name="M:Ez.Graphics.API.ICommandBuffer.ClearDepthStencil(System.Single@,System.Byte@)">
            <summary>
            Clears the depth-stencil target of the active <see cref="T:Ez.Graphics.API.Resources.IFramebuffer"/>.
            The active <see cref="T:Ez.Graphics.API.Resources.IFramebuffer"/> must have a depth attachment.
            </summary>
            <param name="depth">The value to clear the depth buffer to.</param>
            <param name="stencil">The value to clear the stencil buffer to.</param>
        </member>
        <member name="M:Ez.Graphics.API.ICommandBuffer.SetViewport(System.Int32@,Ez.Graphics.API.Viewport@)">
            <summary>
            Sets the <see cref="T:Ez.Graphics.API.Viewport"/> at the given index.
            The <paramref name="index"/> given must be less than the number of color attachments in the active <see cref="T:Ez.Graphics.API.Resources.IFramebuffer"/>.
            </summary>
            <param name="index">Is the index of the viewport whose parameters are updated by the command.</param>
            <param name="viewport">The viewport to set.</param>
        </member>
        <member name="M:Ez.Graphics.API.ICommandBuffer.SetScissor(System.Int32@,System.Drawing.Rectangle@)">
            <summary>
            Set the scissor ractangle.
            The index given must be less than the number of color attachments in the active <see cref="T:Ez.Graphics.API.Resources.IFramebuffer"/>.
            </summary>
            <param name="index">The color target index. (if index &lt; 0 than sets all color targets)</param>
            <param name="rectangle">The rectangle to scissor.</param>
        </member>
        <member name="M:Ez.Graphics.API.ICommandBuffer.Draw(System.UInt32@,System.UInt32@,System.UInt32@,System.UInt32@)">
            <summary>
            Draws primitives from the currently-bound state in this <see cref="T:Ez.Graphics.API.ICommandBuffer"/>. An index Buffer is not used.
            </summary>
            <param name="vertexCount">The number of vertices.</param>
            <param name="vertexStart">The first vertex to use when drawing.</param>
            <param name="instanceCount">The number of instances.</param>
            <param name="instanceStart">The starting instance value.</param>
        </member>
        <member name="M:Ez.Graphics.API.ICommandBuffer.DrawIndexed(System.UInt32@,System.UInt32@,System.UInt32@,System.UInt32@,System.UInt32@)">
            <summary>
            Draws indexed primitives from the currently-bound state in this <see cref="T:Ez.Graphics.API.ICommandBuffer"/>.
            </summary>
            <param name="indexCount">The number of indices.</param>
            <param name="indexStart">The number of indices to skip in the ative index buffer.</param>
            <param name="vertexOffset">The base vertex value, which is added to each index value read from the index buffer.</param>
            <param name="instanceCount">The number of instances.</param>
            <param name="instanceStart">The starting instance value.</param>
        </member>
        <member name="M:Ez.Graphics.API.ICommandBuffer.DrawIndirect(Ez.Graphics.API.Resources.IBuffer@,System.UInt32@,System.UInt32@,System.UInt32@)">
            <summary>
            Issues indirect draw commands based on the information contained in the given indirect <see cref="T:Ez.Graphics.API.Resources.IBuffer`1"/>.
            The information stored in the indirect Buffer should conform to the structure of <see cref="T:Ez.Graphics.API.IndirectDrawArguments"/>.
            </summary>
            <typeparam name="T">Internal type of buffer.</typeparam>
            <param name="indirectBuffer">The indirect buffer used as arguments. Must have been created with the <see cref="!:BufferUsage.Indirect"/> flag.</param>
            <param name="offset">An offset, in bytes, from the start of the indirect buffer from which the draw commands will be read. This value must be a multiple of 4.</param>
            <param name="drawCount">The number of draw commands to read and issue from the indirect buffer.</param>
            <param name="stride">The stride, in bytes, between consecutive draw commands to read and issue from the indirect Buffer. This value must be a multiple of 4, and must be larget thant the size of <see cref="T:Ez.Graphics.API.IndirectDrawArguments"/>.</param>
        </member>
        <member name="M:Ez.Graphics.API.ICommandBuffer.DrawIndexedIndirect(Ez.Graphics.API.Resources.IBuffer@,System.UInt32@,System.UInt32@,System.UInt32@)">
            <summary>
            Issues indirect, indexed draw commands based on the information contained in the given indirect <see cref="T:Ez.Graphics.API.Resources.IBuffer`1"/>.
            The information stored in the indirect Buffer should conform to the structure of <see cref="T:Ez.Graphics.API.IndirectDrawIndexedArguments"/>.
            </summary>
            <typeparam name="T">Internal type of buffer.</typeparam>
            <param name="indirectBuffer">The indirect buffer used as arguments. Must have been created with the <see cref="!:BufferUsage.Indirect"/> flag.</param>
            <param name="offset"></param>
            <param name="drawCount"></param>
            <param name="stride"></param>
        </member>
        <member name="P:Ez.Graphics.API.IGraphicsDevice.NearestSampler">
            <summary>
            Gets a simple point-filtered <see cref="T:Ez.Graphics.API.Resources.ISampler"/> object owned by this instance.
            This object is created with <see cref="F:Ez.Graphics.API.Descriptons.SamplerDescription.Nearest"/>.
            </summary>
        </member>
        <member name="P:Ez.Graphics.API.IGraphicsDevice.LinearSampler">
            <summary>
            Gets a simple linear-filtered <see cref="T:Ez.Graphics.API.Resources.ISampler"/> object owned by this instance.
            This object is created with <see cref="F:Ez.Graphics.API.Descriptons.SamplerDescription.Linear"/>.
            </summary>
        </member>
        <member name="P:Ez.Graphics.API.IGraphicsDevice.AnisotropicLinear4Sampler">
            <summary>
            Gets a simple 4x anisotropic-filtered <see cref="T:Ez.Graphics.API.Resources.ISampler"/> object owned by this instance.
            This object is created with <see cref="F:Ez.Graphics.API.Descriptons.SamplerDescription.AnisotropicLinear4"/>.
            </summary>
        </member>
        <member name="P:Ez.Graphics.API.IGraphicsDevice.IsUvOriginTopLeft">
            <summary>
            Gets a value identifying whether texture coordinates begin in the top left corner of a Texture.
            If true, (0, 0) refers to the top-left texel of a Texture. If false, (0, 0) refers to the bottom-left 
            texel of a Texture. This property is useful for determining how the output of a Framebuffer should be sampled.
            </summary>
        </member>
        <member name="P:Ez.Graphics.API.IGraphicsDevice.IsDepthRangeZeroToOne">
            <summary>
            Gets a value indicating whether this device's depth values range from 0 to 1.
            If false, depth values instead range from -1 to 1.
            </summary>
        </member>
        <member name="P:Ez.Graphics.API.IGraphicsDevice.IsClipSpaceYInverted">
            <summary>
            Gets a value indicating whether this device's clip space Y values increase from top (-1) to bottom (1).
            If false, clip space Y values instead increase from bottom (-1) to top (1).
            </summary>
        </member>
        <member name="P:Ez.Graphics.API.IGraphicsDevice.MinUniformBufferOffsetAlignment">
            <summary>
            The required alignment, in bytes, for uniform buffer offsets. 
            Offset must be a multiple of this value. When binding a ResourceSet 
            to a <see cref="T:Ez.Graphics.API.ICommandBuffer"/> with an overload accepting dynamic offsets,
            each offset must be a multiple of this value.
            </summary>
        </member>
        <member name="P:Ez.Graphics.API.IGraphicsDevice.MinStorageBufferOffsetAlignment">
            <summary>
            The required alignment, in bytes, for structured buffer offsets.
            Offset must be a multiple of this value. When binding a ResourceSet 
            to a <see cref="T:Ez.Graphics.API.ICommandBuffer"/> with an overload accepting dynamic offsets,
            each offset must be a multiple of this value.
            </summary>
        </member>
        <member name="P:Ez.Graphics.API.IGraphicsDevice.ResourceFactory">
            <summary>
            Gets the <see cref="P:Ez.Graphics.API.IGraphicsDevice.ResourceFactory"/> controlled by this instance.
            </summary>
        </member>
        <member name="P:Ez.Graphics.API.IGraphicsDevice.MainSwapchain">
            <summary>
            Retrieves the main Swapchain for this device. This property is only valid if the device was created with a main
            Swapchain, and will return null otherwise.
            </summary>
        </member>
        <member name="M:Ez.Graphics.API.IGraphicsDevice.TryGetPixelFormatProperties(Ez.Graphics.Data.PixelFormat,Ez.Graphics.Data.TextureType,Ez.Graphics.API.TextureUsage,Ez.Graphics.API.PixelFormatProperties@)">
            <summary>
            Gets whether or not the given <see cref="T:Ez.Graphics.Data.PixelFormat"/>, <see cref="T:Ez.Graphics.Data.TextureType"/>, and <see cref="T:Ez.Graphics.API.TextureUsage"/> combination is supported by this instance, and also gets the device-specific properties supported by this instance.
            </summary>
            <param name="format">The <see cref="T:Ez.Graphics.Data.PixelFormat"/> to query.</param>
            <param name="type">The <see cref="T:Ez.Graphics.Data.TextureType"/> to query.</param>
            <param name="usage">The <see cref="T:Ez.Graphics.API.TextureUsage"/> to query.</param>
            <param name="properties">The limits of a Texture created using the given combination of attributes.</param>
            <returns>True if the given combination is supported; false otherwise. If the combination is supported, then properties contains the limits supported by this instance.</returns>
        </member>
        <member name="M:Ez.Graphics.API.IGraphicsDevice.WaitForFences(Ez.Graphics.API.Resources.IFence[],System.Boolean,System.UInt64)">
            <summary>
            Blocks the calling thread util one or all of the given <see cref="T:Ez.Graphics.API.Resources.IFence"/> instances have become signaled,
            or until the giben timeout has been reached.
            </summary>
            <param name="fences">An array of <see cref="T:Ez.Graphics.API.Resources.IFence"/> instances to wait on.</param>
            <param name="waitAll">If true, then this method blocks until all of the given fences become signaled, otherwise, only one needs to be signaled.  </param>
            <param name="timeout">Maximum nanosecond waiting time when waiting for fences.</param>
            <returns>True if the <see cref="T:Ez.Graphics.API.Resources.IFence"/> has been signaled. False if the timeout has been reached.</returns>
        </member>
        <member name="M:Ez.Graphics.API.IGraphicsDevice.WaitForFences(Ez.Graphics.API.Resources.IFence[],System.Boolean,System.TimeSpan)">
            <summary>
            Blocks the calling thread util one or all of the given <see cref="T:Ez.Graphics.API.Resources.IFence"/> instances have become signaled,
            or until the giben timeout has been reached.
            </summary>
            <param name="fences">An array of <see cref="T:Ez.Graphics.API.Resources.IFence"/> instances to wait on.</param>
            <param name="waitAll">If true, then this method blocks until all of the given fences become signaled, otherwise, only one needs to be signaled.  </param>
            <param name="timeout">Maximum waiting time when waiting for fences.</param>
            <returns>True if the <see cref="T:Ez.Graphics.API.Resources.IFence"/> has been signaled. False if the timeout has been reached.</returns>
        </member>
        <member name="M:Ez.Graphics.API.IGraphicsDevice.Wait">
            <summary>
            A blocking method that returns when all submitted <see cref="T:Ez.Graphics.API.ICommandBuffer"/> objects have fully completed.
            </summary>
        </member>
        <member name="T:Ez.Graphics.API.Viewport">
            <summary>
            Describes a 3-dimensional region.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.Viewport.X">
            <summary>
            The minimum X value.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.Viewport.Y">
            <summary>
            The minimum Y value.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.Viewport.Width">
            <summary>
            The width.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.Viewport.Height">
            <summary>
            The height.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.Viewport.MinDepth">
            <summary>
            The minimum depth.
            </summary>
        </member>
        <member name="F:Ez.Graphics.API.Viewport.MaxDepth">
            <summary>
            The maximum depth.
            </summary>
        </member>
        <member name="M:Ez.Graphics.API.Viewport.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Constructs a new Viewport.
            </summary>
            <param name="x">The minimum X value.</param>
            <param name="y">The minimum Y value.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="minDepth">The minimum Z(depth) value.</param>
            <param name="maxDepth">The maximum Z(depth) value.</param>
        </member>
        <member name="M:Ez.Graphics.API.Viewport.#ctor(Ez.Graphics.API.Resources.IFramebuffer@)">
            <summary>
            Constructs a new Viewport to cover the entire Framebuffer.
            </summary>
            <param name="framebuffer">The Framebuffer to cover.</param>
        </member>
        <member name="T:Ez.Graphics.Data.PixelFormat">
            <summary>
            A pixel format enum.
            </summary>
        </member>
        <member name="F:Ez.Graphics.Data.PixelFormat.Undefined">
            <summary>
            Specifies that the format is not specified.
            </summary>
        </member>
        <member name="F:Ez.Graphics.Data.PixelFormat.R4G4B4A4UNorm">
            <summary>
            Specifies a four-component, 16-bit packed unsigned normalized format 
            that has a 4-bit R component in bits 12..15, a 4-bit G component in 
            bits 8..11, a 4-bit B component in bits 4..7, and a 4-bit A component
            in bits 0..3.
            </summary>
        </member>
        <member name="F:Ez.Graphics.Data.PixelFormat.B4G4R4A4UNorm">
            <summary>
            Specifies a four-component, 16-bit packed unsigned normalized format 
            that has a 4-bit B component in bits 12..15, a 4-bit G component in 
            bits 8..11, a 4-bit R component in bits 4..7, and a 4-bit A component 
            in bits 0..3.
            </summary>
        </member>
        <member name="F:Ez.Graphics.Data.PixelFormat.R5G6B5UNorm">
            <summary>
            Specifies a three-component, 16-bit packed unsigned normalized format 
            that has a 5-bit R component in bits 11..15, a 6-bit G component in 
            bits 5..10, and a 5-bit B component in bits 0..4.
            </summary>
        </member>
        <member name="F:Ez.Graphics.Data.PixelFormat.B5G6R5UNorm">
            <summary>
            Specifies a three-component, 16-bit packed unsigned normalized format 
            that has a 5-bit B component in bits 11..15, a 6-bit G component in 
            bits 5..10, and a 5-bit R component in bits 0..4.
            </summary>
        </member>
        <member name="F:Ez.Graphics.Data.PixelFormat.R5G5B5A1UNorm">
            <summary>
            Specifies a four-component, 16-bit packed unsigned normalized format 
            that has a 5-bit R component in bits 11..15, a 5-bit G component in 
            bits 6..10, a 5-bit B component in bits 1..5, and a 1-bit A component
            in bit 0.
            </summary>
        </member>
        <member name="F:Ez.Graphics.Data.PixelFormat.B5G5R5A1UNorm">
            <summary>
            Specifies a four-component, 16-bit packed unsigned normalized format 
            that has a 5-bit B component in bits 11..15, a 5-bit G component in 
            bits 6..10, a 5-bit R component in bits 1..5, and a 1-bit A component
            in bit 0.
            </summary>
        </member>
        <member name="F:Ez.Graphics.Data.PixelFormat.A1R5G5B5UNorm">
            <summary>
            Specifies a four-component, 16-bit packed unsigned normalized format 
            that has a 1-bit A component in bit 15, a 5-bit R component in bits 
            10..14, a 5-bit G component in bits 5..9, and a 5-bit B component in 
            bits 0..4.
            </summary>
        </member>
        <member name="F:Ez.Graphics.Data.PixelFormat.R11G11B10UFloat">
            <summary>
            Specifies a three-component, 32-bit packed unsigned floating-point format that has a 10-bit B 
            component in bits 22..31, an 11-bit G component in bits 11..21, an 11-bit R component in bits 
            0..10.
            </summary>
        </member>
        <member name="F:Ez.Graphics.Data.PixelFormat.R9G9B9E5UFloat">
            <summary>
            Specifies a three-component, 32-bit packed unsigned floating-point format that has a 5-bit 
            shared exponent in bits 27..31, a 9-bit B component mantissa in bits 18..26, a 9-bit G component 
            mantissa in bits 9..17, and a 9-bit R component mantissa in bits 0..8.
            </summary>
        </member>
        <member name="F:Ez.Graphics.Data.PixelFormat.R8UNorm">
            <summary>
            Specifies a one-component, 8-bit unsigned normalized format that has 
            a single 8-bit R component.
            </summary>
        </member>
        <member name="F:Ez.Graphics.Data.PixelFormat.R8SNorm">
            <summary>
            Specifies a one-component, 8-bit signed normalized format that has a 
            single 8-bit R component.
            </summary>
        </member>
        <member name="F:Ez.Graphics.Data.PixelFormat.R8UInt">
            <summary>
            Specifies a one-component, 8-bit unsigned integer format that has a 
            single 8-bit R component.
            </summary>
        </member>
        <member name="F:Ez.Graphics.Data.PixelFormat.R8SInt">
            <summary>
            Specifies a one-component, 8-bit signed integer format that has a 
            single 8-bit R component.
            </summary>
        </member>
        <member name="F:Ez.Graphics.Data.PixelFormat.R8G8UNorm">
            <summary>
            Specifies a two-component, 16-bit unsigned normalized format that has
            an 8-bit R component in byte 0, and an 8-bit G component in byte 1.
            </summary>
        </member>
        <member name="F:Ez.Graphics.Data.PixelFormat.R8G8SNorm">
            <summary>
            Specifies a two-component, 16-bit signed normalized format that has an
            8-bit R component in byte 0, and an 8-bit G component in byte 1.
            </summary>
        </member>
        <member name="F:Ez.Graphics.Data.PixelFormat.R8G8UInt">
            <summary>
            Specifies a two-component, 16-bit unsigned integer format that has an 
            8-bit R component in byte 0, and an 8-bit G component in byte 1.
            </summary>
        </member>
        <member name="F:Ez.Graphics.Data.PixelFormat.R8G8SInt">
            <summary>
            Specifies a two-component, 16-bit signed integer format that has an 
            8-bit R component in byte 0, and an 8-bit G component in byte 1.
            </summary>
        </member>
        <member name="F:Ez.Graphics.Data.PixelFormat.R8G8B8A8UNorm">
            <summary>
            Specifies a four-component, 32-bit unsigned normalized format that has an 
            8-bit R component in byte 0, an 8-bit G component in byte 1, an 8-bit B 
            component in byte 2, and an 8-bit A component in byte 3.
            </summary>
        </member>
        <member name="F:Ez.Graphics.Data.PixelFormat.R8G8B8A8SNorm">
            <summary>
            Specifies a four-component, 32-bit signed normalized format that has an 
            8-bit R component in byte 0, an 8-bit G component in byte 1, an 8-bit B 
            component in byte 2, and an 8-bit A component in byte 3.
            </summary>
        </member>
        <member name="F:Ez.Graphics.Data.PixelFormat.R8G8B8A8UInt">
            <summary>
            Specifies a four-component, 32-bit unsigned integer format that has an 
            8-bit R component in byte 0, an 8-bit G component in byte 1, an 8-bit B 
            component in byte 2, and an 8-bit A component in byte 3.
            </summary>
        </member>
        <member name="F:Ez.Graphics.Data.PixelFormat.R8G8B8A8SInt">
            <summary>
            Specifies a four-component, 32-bit signed integer format that has an 8-bit
            R component in byte 0, an 8-bit G component in byte 1, an 8-bit B component 
            in byte 2, and an 8-bit A component in byte 3.
            </summary>
        </member>
        <member name="F:Ez.Graphics.Data.PixelFormat.R8G8B8A8Srgb">
            <summary>
            Specifies a four-component, 32-bit unsigned normalized format that has an 
            8-bit R component stored with sRGB nonlinear encoding in byte 0, an 8-bit 
            G component stored with sRGB nonlinear encoding in byte 1, an 8-bit B 
            component stored with sRGB nonlinear encoding in byte 2, and an 8-bit A 
            component in byte 3.
            </summary>
        </member>
        <member name="F:Ez.Graphics.Data.PixelFormat.B8G8R8A8UNorm">
            <summary>
            Specifies a four-component, 32-bit unsigned normalized format that has an 
            8-bit B component in byte 0, an 8-bit G component in byte 1, an 8-bit R 
            component in byte 2, and an 8-bit A component in byte 3.
            </summary>
        </member>
        <member name="F:Ez.Graphics.Data.PixelFormat.B8G8R8A8Srgb">
            <summary>
            Specifies a four-component, 32-bit unsigned normalized format that has an 
            8-bit B component stored with sRGB nonlinear encoding in byte 0, an 8-bit 
            G component stored with sRGB nonlinear encoding in byte 1, an 8-bit R 
            component stored with sRGB nonlinear encoding in byte 2, and an 8-bit A 
            component in byte 3.
            </summary>
        </member>
        <member name="F:Ez.Graphics.Data.PixelFormat.B10G10R10A2UNorm">
            <summary>
            Specifies a four-component, 32-bit packed unsigned normalized format that
            has a 2-bit A component in bits 30..31, a 10-bit R component in bits 20..29, 
            a 10-bit G component in bits 10..19, and a 10-bit B component in bits 0..9.
            </summary>
        </member>
        <member name="F:Ez.Graphics.Data.PixelFormat.B10G10R10A2UInt">
            <summary>
            Specifies a four-component, 32-bit packed unsigned integer format that has
            a 2-bit A component in bits 30..31, a 10-bit R component in bits 20..29, a 
            10-bit G component in bits 10..19, and a 10-bit B component in bits 0..9.
            </summary>
        </member>
        <member name="F:Ez.Graphics.Data.PixelFormat.R10G10B10A2UNorm">
            <summary>
            Specifies a four-component, 32-bit packed unsigned normalized format that 
            has a 2-bit A component in bits 30..31, a 10-bit B component in bits 20..29, 
            a 10-bit G component in bits 10..19, and a 10-bit R component in bits 0..9.
            </summary>
        </member>
        <member name="F:Ez.Graphics.Data.PixelFormat.R10G10B10A2UInt">
            <summary>
            Specifies a four-component, 32-bit packed unsigned integer format that has
            a 2-bit A component in bits 30..31, a 10-bit B component in bits 20..29, a
            10-bit G component in bits 10..19, and a 10-bit R component in bits 0..9.
            </summary>
        </member>
        <member name="F:Ez.Graphics.Data.PixelFormat.R16UNorm">
            <summary>
            Specifies a one-component, 16-bit unsigned normalized format that has a 
            single 16-bit R component.
            </summary>
        </member>
        <member name="F:Ez.Graphics.Data.PixelFormat.R16SNorm">
            <summary>
            Specifies a one-component, 16-bit signed normalized format that has a 
            single 16-bit R component.
            </summary>
        </member>
        <member name="F:Ez.Graphics.Data.PixelFormat.R16UInt">
            <summary>
            Specifies a one-component, 16-bit unsigned integer format that has a
            single 16-bit R component.
            </summary>
        </member>
        <member name="F:Ez.Graphics.Data.PixelFormat.R16SInt">
            <summary>
            Specifies a one-component, 16-bit signed integer format that has a single
            16-bit R component.
            </summary>
        </member>
        <member name="F:Ez.Graphics.Data.PixelFormat.R16SFloat">
            <summary>
            Specifies a one-component, 16-bit signed floating-point format that has a
            single 16-bit R component.
            </summary>
        </member>
        <member name="F:Ez.Graphics.Data.PixelFormat.R16G16UNorm">
            <summary>
            Specifies a two-component, 32-bit unsigned normalized format that has a 
            16-bit R component in bytes 0..1, and a 16-bit G component in bytes 2..3.
            </summary>
        </member>
        <member name="F:Ez.Graphics.Data.PixelFormat.R16G16SNorm">
            <summary>
            Specifies a two-component, 32-bit signed normalized format that has a 16-bit
            R component in bytes 0..1, and a 16-bit G component in bytes 2..3.
            </summary>
        </member>
        <member name="F:Ez.Graphics.Data.PixelFormat.R16G16UInt">
            <summary>
            Specifies a two-component, 32-bit unsigned integer format that has a 16-bit
            R component in bytes 0..1, and a 16-bit G component in bytes 2..3.
            </summary>
        </member>
        <member name="F:Ez.Graphics.Data.PixelFormat.R16G16SInt">
            <summary>
            Specifies a two-component, 32-bit signed integer format that has a 16-bit R 
            component in bytes 0..1, and a 16-bit G component in bytes 2..3.
            </summary>
        </member>
        <member name="F:Ez.Graphics.Data.PixelFormat.R16G16SFloat">
            <summary>
            Specifies a two-component, 32-bit signed floating-point format that has a 
            16-bit R component in bytes 0..1, and a 16-bit G component in bytes 2..3.
            </summary>
        </member>
        <member name="F:Ez.Graphics.Data.PixelFormat.R16G16B16A16UNorm">
            <summary>
            Specifies a four-component, 64-bit unsigned normalized format that has a 16-bit
            R component in bytes 0..1, a 16-bit G component in bytes 2..3, a 16-bit B component
            in bytes 4..5, and a 16-bit A component in bytes 6..7.
            </summary>
        </member>
        <member name="F:Ez.Graphics.Data.PixelFormat.R16G16B16A16SNorm">
            <summary>
            Specifies a four-component, 64-bit signed normalized format that has a 16-bit R 
            component in bytes 0..1, a 16-bit G component in bytes 2..3, a 16-bit B component
            in bytes 4..5, and a 16-bit A component in bytes 6..7.
            </summary>
        </member>
        <member name="F:Ez.Graphics.Data.PixelFormat.R16G16B16A16UInt">
            <summary>
            Specifies a four-component, 64-bit unsigned integer format that has a 16-bit R 
            component in bytes 0..1, a 16-bit G component in bytes 2..3, a 16-bit B component 
            in bytes 4..5, and a 16-bit A component in bytes 6..7.
            </summary>
        </member>
        <member name="F:Ez.Graphics.Data.PixelFormat.R16G16B16A16SInt">
            <summary>
            Specifies a four-component, 64-bit signed integer format that has a 16-bit R 
            component in bytes 0..1, a 16-bit G component in bytes 2..3, a 16-bit B component 
            in bytes 4..5, and a 16-bit A component in bytes 6..7.
            </summary>
        </member>
        <member name="F:Ez.Graphics.Data.PixelFormat.R16G16B16A16SFloat">
            <summary>
            Specifies a four-component, 64-bit signed floating-point format that has a 16-bit R 
            component in bytes 0..1, a 16-bit G component in bytes 2..3, a 16-bit B component 
            in bytes 4..5, and a 16-bit A component in bytes 6..7.
            </summary>
        </member>
        <member name="F:Ez.Graphics.Data.PixelFormat.R32UInt">
            <summary>
            Specifies a one-component, 32-bit unsigned integer format that has a single 32-bit 
            R component.
            </summary>
        </member>
        <member name="F:Ez.Graphics.Data.PixelFormat.R32SInt">
            <summary>
            Specifies a one-component, 32-bit signed integer format that has a single 32-bit R
            component.
            </summary>
        </member>
        <member name="F:Ez.Graphics.Data.PixelFormat.R32SFloat">
            <summary>
            Specifies a one-component, 32-bit signed floating-point format that has a single
            32-bit R component.
            </summary>
        </member>
        <member name="F:Ez.Graphics.Data.PixelFormat.R32G32UInt">
            <summary>
            Specifies a two-component, 64-bit unsigned integer format that has a 32-bit R 
            component in bytes 0..3, and a 32-bit G component in bytes 4..7.
            </summary>
        </member>
        <member name="F:Ez.Graphics.Data.PixelFormat.R32G32SInt">
            <summary>
            Specifies a two-component, 64-bit signed integer format that has a 32-bit R 
            component in bytes 0..3, and a 32-bit G component in bytes 4..7.
            </summary>
        </member>
        <member name="F:Ez.Graphics.Data.PixelFormat.R32G32SFloat">
            <summary>
            Specifies a two-component, 64-bit signed floating-point format that has a 32-bit 
            R component in bytes 0..3, and a 32-bit G component in bytes 4..7.
            </summary>
        </member>
        <member name="F:Ez.Graphics.Data.PixelFormat.R32G32B32UInt">
            <summary>
            Specifies a three-component, 96-bit unsigned integer format that has a 32-bit R 
            component in bytes 0..3, a 32-bit G component in bytes 4..7, and a 32-bit B 
            component in bytes 8..11.
            </summary>
        </member>
        <member name="F:Ez.Graphics.Data.PixelFormat.R32G32B32SInt">
            <summary>
            Specifies a three-component, 96-bit signed integer format that has a 32-bit R 
            component in bytes 0..3, a 32-bit G component in bytes 4..7, and a 32-bit B 
            component in bytes 8..11.
            </summary>
        </member>
        <member name="F:Ez.Graphics.Data.PixelFormat.R32G32B32SFloat">
            <summary>
            Specifies a three-component, 96-bit signed floating-point format that has a 32-bit 
            R component in bytes 0..3, a 32-bit G component in bytes 4..7, and a 32-bit B
            component in bytes 8..11.
            </summary>
        </member>
        <member name="F:Ez.Graphics.Data.PixelFormat.R32G32B32A32UInt">
            <summary>
            Specifies a four-component, 128-bit unsigned integer format that has a 32-bit R 
            component in bytes 0..3, a 32-bit G component in bytes 4..7, a 32-bit B component
            in bytes 8..11, and a 32-bit A component in bytes 12..15.
            </summary>
        </member>
        <member name="F:Ez.Graphics.Data.PixelFormat.R32G32B32A32SInt">
            <summary>
            Specifies a four-component, 128-bit signed integer format that has a 32-bit R component 
            in bytes 0..3, a 32-bit G component in bytes 4..7, a 32-bit B component in bytes 8..11,
            and a 32-bit A component in bytes 12..15.
            </summary>
        </member>
        <member name="F:Ez.Graphics.Data.PixelFormat.R32G32B32A32SFloat">
            <summary>
            Specifies a four-component, 128-bit signed floating-point format that has a 32-bit R 
            component in bytes 0..3, a 32-bit G component in bytes 4..7, a 32-bit B component in bytes 
            8..11, and a 32-bit A component in bytes 12..15.
            </summary>
        </member>
        <member name="F:Ez.Graphics.Data.PixelFormat.D16UNorm">
            <summary>
            Specifies a one-component, 16-bit unsigned normalized format that has a single 16-bit depth 
            component.
            </summary>
        </member>
        <member name="F:Ez.Graphics.Data.PixelFormat.D24UNormS8UInt">
            <summary>
            Specifies a two-component, 32-bit packed format that has 8 unsigned integer bits in the stencil 
            component, and 24 unsigned normalized bits in the depth component.
            </summary>
        </member>
        <member name="F:Ez.Graphics.Data.PixelFormat.D32SFloat">
            <summary>
            Specifies a one-component, 32-bit signed floating-point format that has 32-bits in the depth 
            component.
            </summary>
        </member>
        <member name="F:Ez.Graphics.Data.PixelFormat.D32SFloatS8UInt">
            <summary>
            Specifies a two-component format that has 32 signed float bits in the depth component and 8
            unsigned integer bits in the stencil component. There are optionally: 24-bits that are unused.
            </summary>
        </member>
        <member name="F:Ez.Graphics.Data.PixelFormat.S8UInt">
            <summary>
            Specifies a one-component, 8-bit unsigned integer format that has 8-bits in the stencil component.
            </summary>
        </member>
        <member name="F:Ez.Graphics.Data.PixelFormat.BC1RgbaSrgb">
            <summary>
            Specifies a four-component, block-compressed format where each 64-bit compressed texel block 
            encodes a 4×4 rectangle of unsigned normalized RGB texel data with sRGB nonlinear encoding, 
            and provides 1 bit of alpha.
            </summary>
        </member>
        <member name="F:Ez.Graphics.Data.PixelFormat.BC1RgbaUNorm">
            <summary>
            Specifies a four-component, block-compressed format where each 64-bit compressed texel block 
            encodes a 4×4 rectangle of unsigned normalized RGB texel data, and provides 1 bit of alpha.
            </summary>
        </member>
        <member name="F:Ez.Graphics.Data.PixelFormat.BC1RgbSrgb">
            <summary>
            Specifies a three-component, block-compressed format where each 64-bit compressed texel block 
            encodes a 4×4 rectangle of unsigned normalized RGB texel data with sRGB nonlinear encoding.
            This format has no alpha and is considered opaque.
            </summary>
        </member>
        <member name="F:Ez.Graphics.Data.PixelFormat.BC1RgbUNorm">
            <summary>
            Specifies a three-component, block-compressed format where each 64-bit compressed texel block 
            encodes a 4×4 rectangle of unsigned normalized RGB texel data. This format has no alpha and 
            is considered opaque.
            </summary>
        </member>
        <member name="F:Ez.Graphics.Data.PixelFormat.BC2Srgb">
            <summary>
            Specifies a four-component, block-compressed format where each 128-bit compressed texel block 
            encodes a 4×4 rectangle of unsigned normalized RGBA texel data with the first 64 bits encoding
            alpha values followed by 64 bits encoding RGB values with sRGB nonlinear encoding.
            </summary>
        </member>
        <member name="F:Ez.Graphics.Data.PixelFormat.BC2UNorm">
            <summary>
            Specifies a four-component, block-compressed format where each 128-bit compressed texel block 
            encodes a 4×4 rectangle of unsigned normalized RGBA texel data with the first 64 bits encoding
            alpha values followed by 64 bits encoding RGB values.
            </summary>
        </member>
        <member name="F:Ez.Graphics.Data.PixelFormat.BC3Srgb">
            <summary>
            Specifies a four-component, block-compressed format where each 128-bit compressed texel block 
            encodes a 4×4 rectangle of unsigned normalized RGBA texel data with the first 64 bits encoding 
            alpha values followed by 64 bits encoding RGB values with sRGB nonlinear encoding.
            </summary>
        </member>
        <member name="F:Ez.Graphics.Data.PixelFormat.BC3UNorm">
            <summary>
            Specifies a four-component, block-compressed format where each 128-bit compressed texel block 
            encodes a 4×4 rectangle of unsigned normalized RGBA texel data with the first 64 bits encoding 
            alpha values followed by 64 bits encoding RGB values.
            </summary>
        </member>
        <member name="F:Ez.Graphics.Data.PixelFormat.BC4SNorm">
            <summary>
            Specifies a one-component, block-compressed format where each 64-bit compressed texel block 
            encodes a 4×4 rectangle of signed normalized red texel data.
            </summary>
        </member>
        <member name="F:Ez.Graphics.Data.PixelFormat.BC4UNorm">
            <summary>
            Specifies a one-component, block-compressed format where each 64-bit compressed texel block 
            encodes a 4×4 rectangle of unsigned normalized red texel data.
            </summary>
        </member>
        <member name="F:Ez.Graphics.Data.PixelFormat.BC5SNorm">
            <summary>
            Specifies a two-component, block-compressed format where each 128-bit compressed texel block 
            encodes a 4×4 rectangle of signed normalized RG texel data with the first 64 bits encoding 
            red values followed by 64 bits encoding green values.
            </summary>
        </member>
        <member name="F:Ez.Graphics.Data.PixelFormat.BC5UNorm">
            <summary>
            Specifies a two-component, block-compressed format where each 128-bit compressed texel block 
            encodes a 4×4 rectangle of unsigned normalized RG texel data with the first 64 bits encoding
            red values followed by 64 bits encoding green values.
            </summary>
        </member>
        <member name="F:Ez.Graphics.Data.PixelFormat.BC6HSFloat">
            <summary>
            Specifies a three-component, block-compressed format where each 128-bit compressed texel block
            encodes a 4×4 rectangle of signed floating-point RGB texel data.
            </summary>
        </member>
        <member name="F:Ez.Graphics.Data.PixelFormat.BC6HUFloat">
            <summary>
            Specifies a three-component, block-compressed format where each 128-bit compressed texel block
            encodes a 4×4 rectangle of unsigned floating-point RGB texel data.
            </summary>
        </member>
        <member name="F:Ez.Graphics.Data.PixelFormat.BC7Srgb">
            <summary>
            Specifies a four-component, block-compressed format where each 128-bit compressed texel block 
            encodes a 4×4 rectangle of unsigned normalized RGBA texel data with sRGB nonlinear encoding 
            applied to the RGB components.
            </summary>
        </member>
        <member name="F:Ez.Graphics.Data.PixelFormat.BC7UNorm">
            <summary>
            Specifies a four-component, block-compressed format where each 128-bit compressed texel block 
            encodes a 4×4 rectangle of unsigned normalized RGBA texel data.
            </summary>
        </member>
        <member name="F:Ez.Graphics.Data.PixelFormat.EacR11SNorm">
            <summary>
            Specifies a one-component, ETC2 compressed format where each 64-bit compressed texel block 
            encodes a 4×4 rectangle of signed normalized red texel data.
            </summary>
        </member>
        <member name="F:Ez.Graphics.Data.PixelFormat.EacR11UNorm">
            <summary>
            Specifies a one-component, ETC2 compressed format where each 64-bit compressed texel block
            encodes a 4×4 rectangle of unsigned normalized red texel data.
            </summary>
        </member>
        <member name="F:Ez.Graphics.Data.PixelFormat.EacR11G11SNorm">
            <summary>
            Specifies a two-component, ETC2 compressed format where each 128-bit compressed texel block 
            encodes a 4×4 rectangle of signed normalized RG texel data with the first 64 bits encoding 
            red values followed by 64 bits encoding green values.
            </summary>
        </member>
        <member name="F:Ez.Graphics.Data.PixelFormat.EacR11G11UNorm">
            <summary>
            Specifies a two-component, ETC2 compressed format where each 128-bit compressed texel block 
            encodes a 4×4 rectangle of unsigned normalized RG texel data with the first 64 bits encoding 
            red values followed by 64 bits encoding green values.
            </summary>
        </member>
        <member name="F:Ez.Graphics.Data.PixelFormat.Etc2R8G8B8Srgb">
            <summary>
            Specifies a three-component, ETC2 compressed format where each 64-bit compressed texel block 
            encodes a 4×4 rectangle of unsigned normalized RGB texel data with sRGB nonlinear encoding. 
            This format has no alpha and is considered opaque.
            </summary>
        </member>
        <member name="F:Ez.Graphics.Data.PixelFormat.Etc2R8G8B8UNorm">
            <summary>
            Specifies a three-component, ETC2 compressed format where each 64-bit compressed texel block 
            encodes a 4×4 rectangle of unsigned normalized RGB texel data with sRGB nonlinear encoding. 
            This format has no alpha and is considered opaque.
            </summary>
        </member>
        <member name="F:Ez.Graphics.Data.PixelFormat.Etc2R8G8B8A1Srgb">
            <summary>
            Specifies a four-component, ETC2 compressed format where each 64-bit compressed texel block 
            encodes a 4×4 rectangle of unsigned normalized RGB texel data with sRGB nonlinear encoding, 
            and provides 1 bit of alpha.
            </summary>
        </member>
        <member name="F:Ez.Graphics.Data.PixelFormat.Etc2R8G8B8A1UNorm">
            <summary>
            Specifies a four-component, ETC2 compressed format where each 64-bit compressed texel block
            encodes a 4×4 rectangle of unsigned normalized RGB texel data, and provides 1 bit of alpha.
            </summary>
        </member>
        <member name="F:Ez.Graphics.Data.PixelFormat.Etc2R8G8B8A8Srgb">
            <summary>
            Specifies a four-component, ETC2 compressed format where each 128-bit compressed texel block
            encodes a 4×4 rectangle of unsigned normalized RGBA texel data with the first 64 bits encoding
            alpha values followed by 64 bits encoding RGB values with sRGB nonlinear encoding applied.
            </summary>
        </member>
        <member name="F:Ez.Graphics.Data.PixelFormat.Etc2R8G8B8A8UNorm">
            <summary>
            Specifies a four-component, ETC2 compressed format where each 128-bit compressed texel block
            encodes a 4×4 rectangle of unsigned normalized RGBA texel data with the first 64 bits encoding
            alpha values followed by 64 bits encoding RGB values.
            </summary>
        </member>
        <member name="F:Ez.Graphics.Data.PixelFormat.Astc10x10Srgb">
            <summary>
            Specifies a four-component, ASTC compressed format where each 128-bit compressed texel block
            encodes a 10×10 rectangle of unsigned normalized RGBA texel data with sRGB nonlinear encoding
            applied to the RGB components.
            </summary>
        </member>
        <member name="F:Ez.Graphics.Data.PixelFormat.Astc10x10UNorm">
            <summary>
            Specifies a four-component, ASTC compressed format where each 128-bit compressed texel block 
            encodes a 10×10 rectangle of unsigned normalized RGBA texel data.
            </summary>
        </member>
        <member name="F:Ez.Graphics.Data.PixelFormat.Astc10x5Srgb">
            <summary>
            Specifies a four-component, ASTC compressed format where each 128-bit compressed texel block 
            encodes a 10×5 rectangle of unsigned normalized RGBA texel data with sRGB nonlinear encoding
            applied to the RGB components.
            </summary>
        </member>
        <member name="F:Ez.Graphics.Data.PixelFormat.Astc10x5UNorm">
            <summary>
            Specifies a four-component, ASTC compressed format where each 128-bit compressed texel block 
            encodes a 10×5 rectangle of unsigned normalized RGBA texel data.
            </summary>
        </member>
        <member name="F:Ez.Graphics.Data.PixelFormat.Astc10x6Srgb">
            <summary>
            Specifies a four-component, ASTC compressed format where each 128-bit compressed texel block
            encodes a 10×6 rectangle of unsigned normalized RGBA texel data with sRGB nonlinear encoding 
            applied to the RGB components.
            </summary>
        </member>
        <member name="F:Ez.Graphics.Data.PixelFormat.Astc10x6UNorm">
            <summary>
            Specifies a four-component, ASTC compressed format where each 128-bit compressed texel block 
            encodes a 10×6 rectangle of unsigned normalized RGBA texel data.
            </summary>
        </member>
        <member name="F:Ez.Graphics.Data.PixelFormat.Astc10x8Srgb">
            <summary>
            Specifies a four-component, ASTC compressed format where each 128-bit compressed texel block 
            encodes a 10×8 rectangle of unsigned normalized RGBA texel data with sRGB nonlinear encoding 
            applied to the RGB components.
            </summary>
        </member>
        <member name="F:Ez.Graphics.Data.PixelFormat.Astc10x8UNorm">
            <summary>
            Specifies a four-component, ASTC compressed format where each 128-bit compressed texel block
            encodes a 10×8 rectangle of unsigned normalized RGBA texel data.
            </summary>
        </member>
        <member name="F:Ez.Graphics.Data.PixelFormat.Astc12x10Srgb">
            <summary>
            Specifies a four-component, ASTC compressed format where each 128-bit compressed texel block 
            encodes a 12×10 rectangle of unsigned normalized RGBA texel data with sRGB nonlinear encoding
            applied to the RGB components.
            </summary>
        </member>
        <member name="F:Ez.Graphics.Data.PixelFormat.Astc12x10UNorm">
            <summary>
            Specifies a four-component, ASTC compressed format where each 128-bit compressed texel block 
            encodes a 12×10 rectangle of unsigned normalized RGBA texel data.
            </summary>
        </member>
        <member name="F:Ez.Graphics.Data.PixelFormat.Astc12x12Srgb">
            <summary>
            Specifies a four-component, ASTC compressed format where each 128-bit compressed texel block 
            encodes a 12×12 rectangle of unsigned normalized RGBA texel data with sRGB nonlinear encoding 
            applied to the RGB components.
            </summary>
        </member>
        <member name="F:Ez.Graphics.Data.PixelFormat.Astc12x12UNorm">
            <summary>
            Specifies a four-component, ASTC compressed format where each 128-bit compressed texel block 
            encodes a 12×12 rectangle of unsigned normalized RGBA texel data.
            </summary>
        </member>
        <member name="F:Ez.Graphics.Data.PixelFormat.Astc4x4Srgb">
            <summary>
            Specifies a four-component, ASTC compressed format where each 128-bit compressed texel block 
            encodes a 4×4 rectangle of unsigned normalized RGBA texel data with sRGB nonlinear encoding 
            applied to the RGB components.
            </summary>
        </member>
        <member name="F:Ez.Graphics.Data.PixelFormat.Astc4x4UNorm">
            <summary>
            Specifies a four-component, ASTC compressed format where each 128-bit compressed texel block 
            encodes a 4×4 rectangle of unsigned normalized RGBA texel data.
            </summary>
        </member>
        <member name="F:Ez.Graphics.Data.PixelFormat.Astc5x4Srgb">
            <summary>
            Specifies a four-component, ASTC compressed format where each 128-bit compressed texel block
            encodes a 5×4 rectangle of unsigned normalized RGBA texel data with sRGB nonlinear encoding
            applied to the RGB components.
            </summary>
        </member>
        <member name="F:Ez.Graphics.Data.PixelFormat.Astc5x4UNorm">
            <summary>
            Specifies a four-component, ASTC compressed format where each 128-bit compressed texel block 
            encodes a 5×4 rectangle of unsigned normalized RGBA texel data.
            </summary>
        </member>
        <member name="F:Ez.Graphics.Data.PixelFormat.Astc5x5Srgb">
            <summary>
            Specifies a four-component, ASTC compressed format where each 128-bit compressed texel block 
            encodes a 5×5 rectangle of unsigned normalized RGBA texel data with sRGB nonlinear encoding
            applied to the RGB components.
            </summary>
        </member>
        <member name="F:Ez.Graphics.Data.PixelFormat.Astc5x5UNorm">
            <summary>
            Specifies a four-component, ASTC compressed format where each 128-bit compressed texel block 
            encodes a 5×5 rectangle of unsigned normalized RGBA texel data.
            </summary>
        </member>
        <member name="F:Ez.Graphics.Data.PixelFormat.Astc6x5Srgb">
            <summary>
            Specifies a four-component, ASTC compressed format where each 128-bit compressed texel block 
            encodes a 6×5 rectangle of unsigned normalized RGBA texel data with sRGB nonlinear encoding 
            applied to the RGB components.
            </summary>
        </member>
        <member name="F:Ez.Graphics.Data.PixelFormat.Astc6x5UNorm">
            <summary>
            Specifies a four-component, ASTC compressed format where each 128-bit compressed texel block 
            encodes a 6×5 rectangle of unsigned normalized RGBA texel data.
            </summary>
        </member>
        <member name="F:Ez.Graphics.Data.PixelFormat.Astc6x6Srgb">
            <summary>
            Specifies a four-component, ASTC compressed format where each 128-bit compressed texel block 
            encodes a 6×6 rectangle of unsigned normalized RGBA texel data with sRGB nonlinear encoding 
            applied to the RGB components.
            </summary>
        </member>
        <member name="F:Ez.Graphics.Data.PixelFormat.Astc6x6UNorm">
            <summary>
            Specifies a four-component, ASTC compressed format where each 128-bit compressed texel block
            encodes a 6×6 rectangle of unsigned normalized RGBA texel data.
            </summary>
        </member>
        <member name="F:Ez.Graphics.Data.PixelFormat.Astc8x5Srgb">
            <summary>
            Specifies a four-component, ASTC compressed format where each 128-bit compressed texel block 
            encodes an 8×5 rectangle of unsigned normalized RGBA texel data with sRGB nonlinear encoding 
            applied to the RGB components.
            </summary>
        </member>
        <member name="F:Ez.Graphics.Data.PixelFormat.Astc8x5UNorm">
            <summary>
            Specifies a four-component, ASTC compressed format where each 128-bit compressed texel block 
            encodes an 8×5 rectangle of unsigned normalized RGBA texel data.
            </summary>
        </member>
        <member name="F:Ez.Graphics.Data.PixelFormat.Astc8x6Srgb">
            <summary>
            Specifies a four-component, ASTC compressed format where each 128-bit compressed texel block
            encodes an 8×6 rectangle of unsigned normalized RGBA texel data with sRGB nonlinear encoding
            applied to the RGB components.
            </summary>
        </member>
        <member name="F:Ez.Graphics.Data.PixelFormat.Astc8x6UNorm">
            <summary>
            Specifies a four-component, ASTC compressed format where each 128-bit compressed texel block
            encodes an 8×6 rectangle of unsigned normalized RGBA texel data.
            </summary>
        </member>
        <member name="F:Ez.Graphics.Data.PixelFormat.Astc8x8Srgb">
            <summary>
            Specifies a four-component, ASTC compressed format where each 128-bit compressed texel block 
            encodes an 8×8 rectangle of unsigned normalized RGBA texel data with sRGB nonlinear encoding
            applied to the RGB components.
            </summary>
        </member>
        <member name="F:Ez.Graphics.Data.PixelFormat.Astc8x8UNorm">
            <summary>
            Specifies a four-component, ASTC compressed format where each 128-bit compressed texel block
            encodes an 8×8 rectangle of unsigned normalized RGBA texel data.
            </summary>
        </member>
        <member name="T:Ez.Graphics.Data.ColorByte">
            <summary>
            A color struct in 8-bits integer values in RGBA format.
            </summary>
        </member>
        <member name="M:Ez.Graphics.Data.ColorByte.#ctor(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Constructs a new ColorSingle from the given components.
            </summary>
            <param name="r">The red component.</param>
            <param name="g">The green component.</param>
            <param name="b">The blue component.</param>
            <param name="a">The alpha component.</param>
        </member>
        <member name="P:Ez.Graphics.Data.ColorByte.R">
            <summary>
            The red component.
            </summary>
        </member>
        <member name="P:Ez.Graphics.Data.ColorByte.G">
            <summary>
            The green component.
            </summary>
        </member>
        <member name="P:Ez.Graphics.Data.ColorByte.B">
            <summary>
            The blue component.
            </summary>
        </member>
        <member name="P:Ez.Graphics.Data.ColorByte.A">
            <summary>
            The alpha component.
            </summary>
        </member>
        <member name="M:Ez.Graphics.Data.ColorByte.GetColor">
            <summary>
            Gets the representation of a <see cref="T:Ez.Graphics.Data.ColorByte"/> instance as <see cref="T:System.Drawing.Color"/>.
            </summary>
            <returns>A <see cref="T:System.Drawing.Color"/> representation of this <see cref="T:Ez.Graphics.Data.ColorSingle"/>.</returns>
        </member>
        <member name="M:Ez.Graphics.Data.ColorByte.GetColorByte">
            <summary>
            Gets the representation of a <see cref="T:Ez.Graphics.Data.ColorByte"/> instance as <see cref="T:Ez.Graphics.Data.ColorByte"/>.
            </summary>
            <returns>A <see cref="T:Ez.Graphics.Data.ColorByte"/> representation of this <see cref="T:Ez.Graphics.Data.ColorSingle"/>.</returns>
        </member>
        <member name="M:Ez.Graphics.Data.ColorByte.GetColorSingle">
            <summary>
            Gets the representation of a <see cref="T:Ez.Graphics.Data.ColorByte"/> instance as <see cref="T:Ez.Graphics.Data.ColorSingle"/>.
            </summary>
            <returns>A <see cref="T:Ez.Graphics.Data.ColorSingle"/> representation of this <see cref="T:Ez.Graphics.Data.ColorByte"/>.</returns>
        </member>
        <member name="M:Ez.Graphics.Data.ColorByte.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:Ez.Graphics.Data.ColorByte.ToString">
            <summary>
            Returns the string representation of the current <see cref="!:Vector3Key"/> instance.
            </summary>
            <returns>The string representation of the current instance.</returns>
        </member>
        <member name="M:Ez.Graphics.Data.ColorByte.Equals(System.Object)">
            <summary>
            Returns a value that indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">The object to compare with the current instance.</param>
            <returns><see langword="true"/> if the current instance and <paramref name="obj"/> are equal; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ez.Graphics.Data.ColorByte.Equals(Ez.Graphics.Data.ColorByte)">
            <summary>
            Returns a value that indicates whether this instance and another <see cref="T:Ez.Graphics.Data.ColorByte"/> are equal.
            </summary>
            <param name="other">The other <see cref="T:Ez.Graphics.Data.ColorByte"/>.</param>
            <returns><see langword="true"/> if the two <see cref="T:Ez.Graphics.Data.ColorByte"/> are equals; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ez.Graphics.Data.ColorByte.Equals(Ez.Graphics.Data.IColor)">
            <summary>
            Returns a value that indicates whether this instance and another <see cref="T:Ez.Graphics.Data.IColor"/> have equivalent colors in the color space of the first..
            </summary>
            <param name="other">The other <see cref="T:Ez.Graphics.Data.IColor"/>.</param>
            <returns><see langword="true"/> if the two <see cref="T:Ez.Graphics.Data.ColorSingle"/> are equals; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ez.Graphics.Data.ColorByte.op_Equality(Ez.Graphics.Data.ColorByte,Ez.Graphics.Data.ColorByte)">
            <summary>
            Element-wise equality.
            </summary>
            <param name="left">The first value.</param>
            <param name="right">The second value.</param>
        </member>
        <member name="M:Ez.Graphics.Data.ColorByte.op_Inequality(Ez.Graphics.Data.ColorByte,Ez.Graphics.Data.ColorByte)">
            <summary>
            Element-wise inequality.
            </summary>
            <param name="left">The first value.</param>
            <param name="right">The second value.</param>
        </member>
        <member name="M:Ez.Graphics.Data.ColorByte.op_Equality(Ez.Graphics.Data.ColorByte,Ez.Graphics.Data.IColor)">
            <summary>
            Element-wise equality.
            </summary>
            <param name="left">The first value.</param>
            <param name="right">The second value.</param>
        </member>
        <member name="M:Ez.Graphics.Data.ColorByte.op_Inequality(Ez.Graphics.Data.ColorByte,Ez.Graphics.Data.IColor)">
            <summary>
            Element-wise inequality.
            </summary>
            <param name="left">The first value.</param>
            <param name="right">The second value.</param>
        </member>
        <member name="F:Ez.Graphics.Data.ColorByte.Red">
            <summary>
            Red (255, 0, 0, 255)
            </summary>
        </member>
        <member name="F:Ez.Graphics.Data.ColorByte.DarkRed">
            <summary>
            Dark Red (139, 0, 0, 255)
            </summary>
        </member>
        <member name="F:Ez.Graphics.Data.ColorByte.Green">
            <summary>
            Green (0, 255, 0, 255)
            </summary>
        </member>
        <member name="F:Ez.Graphics.Data.ColorByte.Blue">
            <summary>
            Blue (0, 0, 255, 255)
            </summary>
        </member>
        <member name="F:Ez.Graphics.Data.ColorByte.Yellow">
            <summary>
            Yellow (255, 255, 0, 255)
            </summary>
        </member>
        <member name="F:Ez.Graphics.Data.ColorByte.Grey">
            <summary>
            Grey (128, 128, 128, 255)
            </summary>
        </member>
        <member name="F:Ez.Graphics.Data.ColorByte.LightGrey">
            <summary>
            Light Grey (211, 211, 211, 255)
            </summary>
        </member>
        <member name="F:Ez.Graphics.Data.ColorByte.Cyan">
            <summary>
            Cyan (0, 255, 255, 255)
            </summary>
        </member>
        <member name="F:Ez.Graphics.Data.ColorByte.White">
            <summary>
            White (255, 255, 255, 255)
            </summary>
        </member>
        <member name="F:Ez.Graphics.Data.ColorByte.CornflowerBlue">
            <summary>
            Cornflower Blue (100, 149, 237, 255)
            </summary>
        </member>
        <member name="F:Ez.Graphics.Data.ColorByte.Clear">
            <summary>
            Clear (0, 0, 0, 0)
            </summary>
        </member>
        <member name="F:Ez.Graphics.Data.ColorByte.Black">
            <summary>
            Black (0, 0, 0, 255)
            </summary>
        </member>
        <member name="F:Ez.Graphics.Data.ColorByte.Pink">
            <summary>
            Pink (255, 192, 203, 255)
            </summary>
        </member>
        <member name="F:Ez.Graphics.Data.ColorByte.Orange">
            <summary>
            Orange (255, 165, 0, 255)
            </summary>
        </member>
        <member name="T:Ez.Graphics.Data.ColorSingle">
            <summary>
            A color struct in 32-bits floating-point values in RGBA format.
            </summary>
            <summary>
            Provides static methods to <see cref="T:Ez.Graphics.Data.ColorSingle"/> manipulation.
            </summary>
        </member>
        <member name="P:Ez.Graphics.Data.ColorSingle.R">
            <summary>
            The red component.
            </summary>
        </member>
        <member name="P:Ez.Graphics.Data.ColorSingle.G">
            <summary>
            The green component.
            </summary>
        </member>
        <member name="P:Ez.Graphics.Data.ColorSingle.B">
            <summary>
            The blue component.
            </summary>
        </member>
        <member name="P:Ez.Graphics.Data.ColorSingle.A">
            <summary>
            The alpha component.
            </summary>
        </member>
        <member name="M:Ez.Graphics.Data.ColorSingle.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Constructs a new ColorSingle from the given components.
            </summary>
            <param name="r">The red component.</param>
            <param name="g">The green component.</param>
            <param name="b">The blue component.</param>
            <param name="a">The alpha component.</param>
        </member>
        <member name="M:Ez.Graphics.Data.ColorSingle.#ctor(System.Numerics.Vector4)">
            <summary>
            Constructs a new ColorSingle from the XYZW components of a vector.
            </summary>
            <param name="channels">The vector containing the color components.</param>
        </member>
        <member name="M:Ez.Graphics.Data.ColorSingle.ToVector4">
            <summary>
            Converts this ColorSingle into a Vector4.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ez.Graphics.Data.ColorSingle.Equals(Ez.Graphics.Data.ColorSingle)">
            <summary>
            Returns a value that indicates whether this instance and another <see cref="T:Ez.Graphics.Data.ColorSingle"/> are equal.
            </summary>
            <param name="other">The other <see cref="T:Ez.Graphics.Data.ColorSingle"/>.</param>
            <returns><see langword="true"/> if the two <see cref="T:Ez.Graphics.Data.ColorSingle"/> are equals; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ez.Graphics.Data.ColorSingle.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Ez.Graphics.Data.ColorSingle.Equals(Ez.Graphics.Data.IColor)">
            <summary>
            Returns a value that indicates whether this instance and another <see cref="T:Ez.Graphics.Data.IColor"/> have equivalent colors in the color space of the first..
            </summary>
            <param name="other">The other <see cref="T:Ez.Graphics.Data.IColor"/>.</param>
            <returns><see langword="true"/> if the two <see cref="T:Ez.Graphics.Data.ColorSingle"/> are equals; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ez.Graphics.Data.ColorSingle.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:Ez.Graphics.Data.ColorSingle.ToString">
            <summary>
            Returns a string representation of this color.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ez.Graphics.Data.ColorSingle.GetColor">
            <summary>
            Gets the representation of a <see cref="T:Ez.Graphics.Data.ColorSingle"/> instance as <see cref="T:System.Drawing.Color"/>.
            </summary>
            <returns>A <see cref="T:System.Drawing.Color"/> representation of this <see cref="T:Ez.Graphics.Data.ColorSingle"/>.</returns>
        </member>
        <member name="M:Ez.Graphics.Data.ColorSingle.GetColorSingle">
            <summary>
            Gets the representation of a <see cref="T:Ez.Graphics.Data.ColorSingle"/> instance as <see cref="T:Ez.Graphics.Data.ColorSingle"/>.
            </summary>
            <returns>A <see cref="T:Ez.Graphics.Data.ColorSingle"/> representation of this <see cref="T:Ez.Graphics.Data.ColorSingle"/>.</returns>
        </member>
        <member name="M:Ez.Graphics.Data.ColorSingle.GetColorByte">
            <summary>
            Gets the representation of a <see cref="T:Ez.Graphics.Data.ColorSingle"/> instance as <see cref="T:Ez.Graphics.Data.ColorByte"/>.
            </summary>
            <returns>A <see cref="T:Ez.Graphics.Data.ColorByte"/> representation of this <see cref="T:Ez.Graphics.Data.ColorSingle"/>.</returns>
        </member>
        <member name="M:Ez.Graphics.Data.ColorSingle.op_Equality(Ez.Graphics.Data.ColorSingle,Ez.Graphics.Data.ColorSingle)">
            <summary>
            Element-wise equality.
            </summary>
            <param name="left">The first value.</param>
            <param name="right">The second value.</param>
        </member>
        <member name="M:Ez.Graphics.Data.ColorSingle.op_Inequality(Ez.Graphics.Data.ColorSingle,Ez.Graphics.Data.ColorSingle)">
            <summary>
            Element-wise inequality.
            </summary>
            <param name="left">The first value.</param>
            <param name="right">The second value.</param>
        </member>
        <member name="M:Ez.Graphics.Data.ColorSingle.op_UnaryNegation(Ez.Graphics.Data.ColorSingle)">
            <summary>
            Negates the specified color.
            </summary>
            <param name="color">The color to negate.</param>
            <returns>The negated vector.</returns>
        </member>
        <member name="M:Ez.Graphics.Data.ColorSingle.op_Addition(Ez.Graphics.Data.ColorSingle,Ez.Graphics.Data.ColorSingle)">
            <summary>
            Adds two colors together.
            </summary>
            <param name="left">The first color.</param>
            <param name="right">The second color.</param>
            <returns>The summed color.</returns>
        </member>
        <member name="M:Ez.Graphics.Data.ColorSingle.op_Subtraction(Ez.Graphics.Data.ColorSingle,Ez.Graphics.Data.ColorSingle)">
            <summary>
            Subtracts the second color from the first.
            </summary>
            <param name="left">The first color.</param>
            <param name="right">The second color.</param>
            <returns>The color that results from subracting <paramref name="right"/> from <paramref name="left"/>.</returns>
        </member>
        <member name="M:Ez.Graphics.Data.ColorSingle.op_Multiply(Ez.Graphics.Data.ColorSingle,Ez.Graphics.Data.ColorSingle)">
            <summary>
            Multiplies two colors together.
            </summary>
            <param name="left">The first color.</param>
            <param name="right">The second color.</param>
            <returns>The product color.</returns>
        </member>
        <member name="M:Ez.Graphics.Data.ColorSingle.op_Division(Ez.Graphics.Data.ColorSingle,Ez.Graphics.Data.ColorSingle)">
            <summary>
            Divides the first color by the second.
            </summary>
            <param name="left">The first color.</param>
            <param name="right">The second color.</param>
            <returns>The color that results from dividing <paramref name="left"/> by <paramref name="right"/>.</returns>
        </member>
        <member name="M:Ez.Graphics.Data.ColorSingle.op_Multiply(Ez.Graphics.Data.ColorSingle,System.Single)">
            <summary>
            Multiples the specified color by the specified scalar value.
            </summary>
            <param name="left">The color.</param>
            <param name="right">The scalar value.</param>
            <returns>The scaled color.</returns>
        </member>
        <member name="M:Ez.Graphics.Data.ColorSingle.op_Division(Ez.Graphics.Data.ColorSingle,System.Single)">
            <summary>
            Divides the specified color by a specified scalar value.
            </summary>
            <param name="left">The color.</param>
            <param name="right">The scalar value.</param>
            <returns>The result of the division.</returns>
        </member>
        <member name="M:Ez.Graphics.Data.ColorSingle.op_Multiply(System.Single,Ez.Graphics.Data.ColorSingle)">
            <summary>
            Multiples the specified color by the specified scalar value.
            </summary>
            <param name="left">The scalar value.</param>
            <param name="right">The color.</param>
            <returns>The scaled color.</returns>
        </member>
        <member name="F:Ez.Graphics.Data.ColorSingle.Red">
            <summary>
            Red (1, 0, 0, 1)
            </summary>
        </member>
        <member name="F:Ez.Graphics.Data.ColorSingle.DarkRed">
            <summary>
            Dark Red (139f / 255f, 0f, 0f, 1f)
            </summary>
        </member>
        <member name="F:Ez.Graphics.Data.ColorSingle.Green">
            <summary>
            Green (0f, 1f, 0f, 1f)
            </summary>
        </member>
        <member name="F:Ez.Graphics.Data.ColorSingle.Blue">
            <summary>
            Blue (0f, 0f, 1f, 1f)
            </summary>
        </member>
        <member name="F:Ez.Graphics.Data.ColorSingle.Yellow">
            <summary>
            Yellow (1f, 1f, 0f, 1f)
            </summary>
        </member>
        <member name="F:Ez.Graphics.Data.ColorSingle.Grey">
            <summary>
            Grey (128f / 255f, 128f / 255f, 128 / 255f, 1f)
            </summary>
        </member>
        <member name="F:Ez.Graphics.Data.ColorSingle.LightGrey">
            <summary>
            Light Grey (211f / 255f, 211f / 255f, 211f / 255f, 1f)
            </summary>
        </member>
        <member name="F:Ez.Graphics.Data.ColorSingle.Cyan">
            <summary>
            Cyan (0f, 1f, 1f, 1f)
            </summary>
        </member>
        <member name="F:Ez.Graphics.Data.ColorSingle.White">
            <summary>
            White (1f, 1f, 1f, 1f)
            </summary>
        </member>
        <member name="F:Ez.Graphics.Data.ColorSingle.CornflowerBlue">
            <summary>
            Cornflower Blue (100f / 255f, 149f / 255f, 237f / 255f, 1f)
            </summary>
        </member>
        <member name="F:Ez.Graphics.Data.ColorSingle.Clear">
            <summary>
            Clear (0f, 0f, 0f, 0f)
            </summary>
        </member>
        <member name="F:Ez.Graphics.Data.ColorSingle.Black">
            <summary>
            Black (0f, 0f, 0f, 1f)
            </summary>
        </member>
        <member name="F:Ez.Graphics.Data.ColorSingle.Pink">
            <summary>
            Pink (1f, 192f / 255f, 203f / 255f, 1f)
            </summary>
        </member>
        <member name="F:Ez.Graphics.Data.ColorSingle.Orange">
            <summary>
            Orange (1f, 165f / 255f, 0f, 1f)
            </summary>
        </member>
        <member name="M:Ez.Graphics.Data.ColorSingle.Lerp(Ez.Graphics.Data.ColorSingle@,Ez.Graphics.Data.ColorSingle@,System.Single)">
            <summary>
            Linearly interpolates between two colors.
            </summary>
            <param name="a">The first color.</param>
            <param name="b">The second color.</param>
            <param name="t">Influence of the second color on the final result.</param>
            <returns><paramref name="a"/> * (1f - <paramref name="t"/>) + <paramref name="b"/> * <paramref name="t"/>.</returns>
        </member>
        <member name="T:Ez.Graphics.Data.IColor">
            <summary>
            Provides methods that can retrieve representations in <see cref="T:System.Drawing.Color"/>, <see cref="T:Ez.Graphics.Data.ColorSingle"/> and <see cref="T:Ez.Graphics.Data.ColorByte"/>.
            </summary>
        </member>
        <member name="M:Ez.Graphics.Data.IColor.GetColor">
            <summary>
            Gets the representation of a <see cref="T:Ez.Graphics.Data.IColor"/> instance as <see cref="T:System.Drawing.Color"/>.
            </summary>
            <returns>A <see cref="T:System.Drawing.Color"/> representation of this <see cref="T:Ez.Graphics.Data.ColorSingle"/>.</returns>
        </member>
        <member name="M:Ez.Graphics.Data.IColor.GetColorSingle">
            <summary>
            Gets the representation of a <see cref="T:Ez.Graphics.Data.IColor"/> instance as <see cref="T:Ez.Graphics.Data.ColorSingle"/>.
            </summary>
            <returns>A <see cref="T:Ez.Graphics.Data.ColorSingle"/> representation of this <see cref="T:Ez.Graphics.Data.IColor"/>.</returns>
        </member>
        <member name="M:Ez.Graphics.Data.IColor.GetColorByte">
            <summary>
            Gets the representation of a <see cref="T:Ez.Graphics.Data.IColor"/> instance as <see cref="T:Ez.Graphics.Data.ColorByte"/>.
            </summary>
            <returns>A <see cref="T:Ez.Graphics.Data.ColorByte"/> representation of this <see cref="T:Ez.Graphics.Data.IColor"/>.</returns>
        </member>
        <member name="T:Ez.Graphics.Data.IColor`1">
            <summary>
            A color struct in T vluas in RGBA format.
            </summary>
            <typeparam name="T">The type of a color component.</typeparam>
        </member>
        <member name="P:Ez.Graphics.Data.IColor`1.R">
            <summary>
            The red component.
            </summary>
        </member>
        <member name="P:Ez.Graphics.Data.IColor`1.G">
            <summary>
            The green component.
            </summary>
        </member>
        <member name="P:Ez.Graphics.Data.IColor`1.B">
            <summary>
            The blue component.
            </summary>
        </member>
        <member name="P:Ez.Graphics.Data.IColor`1.A">
            <summary>
            The alpha component.
            </summary>
        </member>
        <member name="T:Ez.Graphics.Data.TextureType">
            <summary>
            Specifying the basic dimensionality of an texture.
            </summary>
        </member>
        <member name="F:Ez.Graphics.Data.TextureType.Texture1D">
            <summary>
            Specifies a one-dimensional texture.
            </summary>
        </member>
        <member name="F:Ez.Graphics.Data.TextureType.Texture2D">
            <summary>
            Specifies a two-dimensional texture.
            </summary>
        </member>
        <member name="F:Ez.Graphics.Data.TextureType.Texture3D">
            <summary>
            Specifies a three-dimensional image.
            </summary>
        </member>
        <member name="T:Ez.IClone`1">
            <summary>
            Supports cloning, which creates a new instance of a class with the specific type.
            </summary>
            <typeparam name="T">The type of the clone.</typeparam>
        </member>
        <member name="P:Ez.IClone`1.Clone">
            <summary>
            Creates a new T instance that is a copy of the current instance. 
            </summary>
        </member>
        <member name="T:Ez.IHashable">
            <summary>
            An interface that can hash the contents of the structure or class instance. that implements it .
            </summary>
        </member>
        <member name="P:Ez.IHashable.Hashcode">
            <summary>
            A hashcode for the content of a instance.
            </summary>
        </member>
        <member name="T:Ez.IO.Archives.ArchiveMode">
            <summary>
            Specifies values for interacting with <see cref="T:Ez.IO.Archives.IArchive"/>.
            </summary>
        </member>
        <member name="F:Ez.IO.Archives.ArchiveMode.Read">
            <summary>
            Only reading archive entries is permitted.
            </summary>
        </member>
        <member name="F:Ez.IO.Archives.ArchiveMode.Create">
            <summary>
            Only creating new archive entries is permitted.
            </summary>
        </member>
        <member name="F:Ez.IO.Archives.ArchiveMode.Update">
            <summary>
            Both read and write operations are permitted for archive entries.
            </summary>
        </member>
        <member name="T:Ez.IO.Archives.IArchive">
            <summary>
            Represents a package of resources.
            </summary>
        </member>
        <member name="P:Ez.IO.Archives.IArchive.Mode">
            <summary>
            Gets a value that describes the type of action the zip archive can perform on entries.
            </summary>
        </member>
        <member name="P:Ez.IO.Archives.IArchive.EntryNames">
            <summary>
            Gets the collection of entries that are currently in the archive.
            </summary>
            <exception cref="T:System.NotSupportedException">The archive does not support reading.</exception>
            <exception cref="T:System.ObjectDisposedException">The archive has been disposed.</exception>
            <exception cref="T:System.IO.InvalidDataException">The archive is corrupt, and its entries cannot be retrieved.</exception>
        </member>
        <member name="M:Ez.IO.Archives.IArchive.CreateEntry(System.String)">
            <summary>
            Creates an empty entry that has the specified path and entry name in the archive.
            </summary>
            <param name="entryName">A path, relative to the root of the archive, that specifies the name
            of the entry to be created.</param>
            <returns>An empty <see cref="T:Ez.IO.Archives.IArchiveEntry"/> in the archive.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="entryName"/> is <see cref="F:System.String.Empty"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="entryName"/> is null.</exception>
            <exception cref="T:System.NotSupportedException">The archive does not support writing.</exception>
            <exception cref="T:System.ObjectDisposedException">The archive has been disposed.</exception>
        </member>
        <member name="M:Ez.IO.Archives.IArchive.GetEntry(System.String)">
            <summary>
            Retrieves a wrapper for the specified entry in the archive.
            </summary>
            <param name="entryName">A path, relative to the root of the archive, that identifies the entry
            to retrieve.</param>
            <returns>A wrapper for the specified entry in the archive; null if the entry does not exist in 
            the archive.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="entryName"/> is <see cref="F:System.String.Empty"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="entryName"/> is <see langword="null"/></exception>
            <exception cref="T:System.NotSupportedException">The archive does not support reading.</exception>
            <exception cref="T:System.ObjectDisposedException">The archive has been disposed.</exception>
            <exception cref="T:System.IO.InvalidDataException">The archive is corrupt, and its entries cannot be retrieved.</exception>
        </member>
        <member name="T:Ez.IO.Archives.IArchiveEntry">
            <summary>
            Represents a file within a <see cref="T:Ez.IO.Archives.IArchive"/>.
            </summary>
        </member>
        <member name="P:Ez.IO.Archives.IArchiveEntry.Archive">
            <summary>
            Gets the <see cref="T:Ez.IO.Archives.IArchive"/> that the entry belongs to.
            </summary>
        </member>
        <member name="P:Ez.IO.Archives.IArchiveEntry.Length">
            <summary>
            Gets the size of the entry in the <see cref="T:Ez.IO.Archives.IArchive"/>.
            </summary>
        </member>
        <member name="P:Ez.IO.Archives.IArchiveEntry.Crc32C">
            <summary>
            The 32-bit Cyclic Redundant Check.
            </summary>
        </member>
        <member name="P:Ez.IO.Archives.IArchiveEntry.Name">
            <summary>
            Gets the file name of the entry in the <see cref="T:Ez.IO.Archives.IArchive"/>.
            </summary>
        </member>
        <member name="P:Ez.IO.Archives.IArchiveEntry.FullName">
            <summary>
            Gets the relative path of the entry in the <see cref="T:Ez.IO.Archives.IArchive"/>.
            </summary>
        </member>
        <member name="P:Ez.IO.Archives.IArchiveEntry.LastWriteTime">
            <summary>
            Gets or sets the last time the entry in the archive was changed.
            </summary>      
            <value>The last time the entry in the zip archive was changed.</value>
            <exception cref="T:System.NotSupportedException">The attempt to set this property failed,
            because the archive for the entry is in <see cref="F:Ez.IO.Archives.ArchiveMode.Read"/> mode.</exception>
            <exception cref="T:System.IO.IOException">The archive mode is set to <see cref="F:Ez.IO.Archives.ArchiveMode.Update"/>
            and the entry has been opened.</exception>
        </member>
        <member name="M:Ez.IO.Archives.IArchiveEntry.Open">
            <summary>
            Opens the entry from the zip archive.
            </summary>
            <returns>The stream that represents the contents of the entry.</returns>
            <exception cref="T:System.IO.IOException">Thrown when the entry is already currently open for writing.</exception>
            <exception cref="T:System.IO.IOException">The entry has been deleted from the archive.</exception>
            <exception cref="T:System.IO.IOException">The archive for this entry was opened with the 
            <see cref="F:Ez.IO.Archives.ArchiveMode.Create"/> mode, and this entry has already been written to.</exception>
            <exception cref="T:System.IO.InvalidDataException">The entry is either missing from the archive or is
            corrupt and cannot be read.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Ez.IO.Archives.IArchive"/> for this entry has been
            disposed.</exception>
        </member>
        <member name="M:Ez.IO.Archives.IArchiveEntry.Delete">
            <summary>
            Deletes the entry from the archive.
            </summary>
            <exception cref="T:System.IO.IOException">The entry is already open for reading or writing.</exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:Ez.IO.Archives.IArchive"/> for this entry was opened in a mode 
            other than <see cref="F:Ez.IO.Archives.ArchiveMode.Update"/>.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Ez.IO.Archives.IArchive"/> for this entry has been 
            disposed.</exception>
        </member>
        <member name="M:Ez.IO.Archives.IArchiveEntry.ToString">
            <summary>
            The relative path of the entry, which is the value stored in the <see cref="P:Ez.IO.Archives.IArchiveEntry.FullName"/> property.
            </summary>
        </member>
        <member name="T:Ez.IO.PathHelper">
            <summary>
            Helper functions for path manipulation.
            </summary>
        </member>
        <member name="M:Ez.IO.PathHelper.SeparatePath(System.String)">
            <summary>
            Split the path by separator.
            </summary>
            <param name="path">Path.</param>
            <returns>Split path.</returns>
        </member>
        <member name="M:Ez.IO.PathHelper.GetFolderName(System.String)">
            <summary>
            Get folder name from path.
            </summary>
            <param name="path">Path</param>
            <returns>The name of last folder of path(considers folder up to the last folder separator, example: c:/path/foo = path. c:/path/foo/ = foo.).</returns>
        </member>
        <member name="M:Ez.IO.PathHelper.GetRelativePath(System.String,System.String,System.StringComparison)">
            <summary>
            Create a relative path from one path to another. Paths will be resolved before calculating the difference.
            Default path comparison for the active platform will be used (OrdinalIgnoreCase for Windows or Mac, Ordinal for Unix).
            </summary>
            <param name="relativeTo">The source path the output should be relative to. This path is always considered to be a directory.</param>
            <param name="path">The destination path.</param>
            <param name="comparisonType">One of the enumeration values that specifies the rules for the string comparison.</param>
            <returns>The relative path or <paramref name="path"/> if the paths don't share the same root.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="relativeTo"/> or <paramref name="path"/> is <c>null</c> or an empty string.</exception>
        </member>
        <member name="T:Ez.IO.RamStream">
            <summary>
            Creates a stream whose backing store is a <see cref="T:Ez.Memory.MemoryBlock"/>.
            </summary>
        </member>
        <member name="M:Ez.IO.RamStream.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ez.IO.RamStream"/> class with an expandable capacity initialized to zero.
            </summary>
        </member>
        <member name="M:Ez.IO.RamStream.#ctor(System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:Ez.IO.RamStream"/> class with an expandable capacity initialized as specified.
            </summary>
            <param name="capacity">The initial size of the internal <see cref="T:Ez.Memory.MemoryBlock"/> in bytes. (<seealso cref="F:Ez.Memory.MemUtil.MaxAllocSize"/>)</param>
        </member>
        <member name="P:Ez.IO.RamStream.Capacity">
            <summary>
            Gets or sets the number of bytes allocated for this <see cref="T:Ez.IO.RamStream"/>.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">A capacity is set that is negative or less 
            than the current length of the stream.</exception>
            <exception cref="T:System.ObjectDisposedException">The current stream is closed.</exception>
        </member>
        <member name="P:Ez.IO.RamStream.CanRead">
            <summary>
            Gets a value indicating whether the current stream supports reading.
            </summary>
        </member>
        <member name="P:Ez.IO.RamStream.CanSeek">
            <summary>
            Gets a value indicating whether the current stream supports seeking.
            </summary>
        </member>
        <member name="P:Ez.IO.RamStream.CanWrite">
            <summary>
            Gets a value indicating whether the current stream supports writing.
            </summary>
        </member>
        <member name="P:Ez.IO.RamStream.Length">
            <summary>
            Gets the length of the stream in bytes.
            </summary>
            <exception cref="T:System.ObjectDisposedException">The stream is closed.</exception>
        </member>
        <member name="P:Ez.IO.RamStream.Position">
            <summary>
            Gets or sets the current position within the stream.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">The position is set to a negative value 
            or a value greater than <see cref="F:Ez.Memory.MemUtil.MaxAllocSize"/>.</exception>
            <exception cref="T:System.ObjectDisposedException">The stream is closed.</exception>
        </member>
        <member name="P:Ez.IO.RamStream.EphemeralMemoryBlock">
            <summary>
            Gets an EphemeralMemoryBlock for the internal <see cref="T:Ez.Memory.MemoryBlock"/>.
            </summary>
        </member>
        <member name="M:Ez.IO.RamStream.Flush">
            <summary>
            Overrides the <see cref="M:System.IO.Stream.Flush"/> method so that no action is performed.
            </summary>
        </member>
        <member name="M:Ez.IO.RamStream.FlushAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously clears all buffers for this stream, and monitors cancellation requests.
            </summary>
            <param name="cancellationToken">The token to monitor for cancellation requests.</param>
            <returns>A task that represents the asynchronous flush operation.</returns>
        </member>
        <member name="M:Ez.IO.RamStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a block of bytes from the current stream and writes the data to a buffer.
            </summary>
            <param name="buffer">When this method returns, contains the specified byte array
            with the values between <paramref name="offset"/> and (<paramref name="offset"/> + 
            <paramref name="count"/> - 1) replaced by the characters read from the current 
            stream.</param>
            <param name="offset">The zero-based byte offset in <paramref name="buffer"/> at
            which to begin storing data from the current stream.</param>
            <param name="count">The maximum number of bytes to read.</param>
            <returns>The total number of bytes written into the buffer. This can be less than 
            the number of bytes requested if that number of bytes are not currently available, 
            or zero if the end of the stream is reached before any bytes are read.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is 
            <see langword="null"/></exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset"/> or 
            <paramref name="count"/> is negative.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="offset"/> subtracted from the 
            buffer length is less than <paramref name="count"/>.</exception>
            <exception cref="T:System.ObjectDisposedException">The current stream is closed.</exception>
        </member>
        <member name="M:Ez.IO.RamStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the position within the current stream to the specified value.
            </summary>
            <param name="offset">The new position within the stream. This is 
            relative to the <paramref name="origin"/> parameter, and can be
            positive or negative.</param>
            <param name="origin">A value of type <see cref="T:System.IO.SeekOrigin"/>, which
            acts as the seek reference point.</param>
            <returns>The new position within the stream, calculated by combining 
            the initial reference point and the offset.</returns>
            <exception cref="T:System.IO.IOException">Seeking is attempted before the beginning 
            of the stream.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset"/> 
            is greater than <see cref="F:Ez.Memory.MemUtil.MaxAllocSize"/>.</exception>
            <exception cref="T:System.ArgumentException">There is an invalid <see cref="T:System.IO.SeekOrigin"/>
            or <paramref name="offset"/> caused an arithmetic overflow.</exception>
            <exception cref="T:System.ObjectDisposedException">The current stream is closed.</exception>
        </member>
        <member name="M:Ez.IO.RamStream.SetLength(System.Int64)">
            <summary>
            Sets the length of the current stream to the specified value.
            </summary>
            <param name="value">The value at which to set the length.</param>
            <exception cref="T:System.ObjectDisposedException">The current stream is closed.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="value"/> is negative 
            or is greater than <see cref="F:Ez.Memory.MemUtil.MaxAllocSize"/>.</exception>
        </member>
        <member name="M:Ez.IO.RamStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a block of bytes to the current stream using data read from a buffer.
            </summary>
            <param name="buffer">The buffer to write data from.</param>
            <param name="offset">The zero-based byte offset in <paramref name="buffer"/> at 
            which to begin copying bytes to the current stream.</param>
            <param name="count">The maximum number of bytes to write.</param>
            <exception cref="T:System.ObjectDisposedException">The current stream is closed.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is 
            <see langword="null"/></exception>
            <exception cref="T:System.ArgumentException">The sum of <paramref name="offset"/> and <paramref name="count"/> 
            is greater than the buffer length.</exception>        
        </member>
        <member name="M:Ez.IO.RamStream.Dispose(System.Boolean)">
            <summary>
            Return the <see cref="P:Ez.IO.RamStream.EphemeralMemoryBlock"/> to the <see cref="T:Ez.Memory.MemoryBlockPool"/>.
            </summary>
            <param name="disposing"><see langword="true"/> to release both managed and
            unmanaged resources; <see langword="false"/> to release only unmanaged resources.</param>
        </member>
        <member name="T:Ez.IO.StreamExtensions">
            <summary>
            <see cref="T:System.IO.Stream"/> extensions.
            </summary>
        </member>
        <member name="M:Ez.IO.StreamExtensions.WriteString(System.IO.Stream,System.String)">
            <summary>
            Write a string in the stream that ends with 0(byte). 
            
            The string is written with utf8 encoding.
            <seealso cref="M:Ez.IO.StreamExtensions.ReadString(System.IO.Stream)"/>
            </summary>
            <param name="stream">Stream to write.</param>
            <param name="value">String to be written.</param>
        </member>
        <member name="M:Ez.IO.StreamExtensions.ReadString(System.IO.Stream)">
            <summary>
            Reads a string from the stream that ends with a 0(byte).
            </summary>
            <param name="stream"></param>
            <returns>The string readed.</returns>
        </member>
        <member name="M:Ez.IO.StreamExtensions.WriteSpan``1(System.IO.Stream,System.ReadOnlySpan{``0})">
            <summary>
            Write a <see cref="T:System.ReadOnlySpan`1"/> array data in the <paramref name="stream"/>.
            </summary>
            <typeparam name="T">The type of items in the <paramref name="array"/>.</typeparam>
            <param name="stream">The stream to write.</param>
            <param name="array">The span to be written.</param>
        </member>
        <member name="M:Ez.IO.StreamExtensions.ReadSpan``1(System.IO.Stream,System.UInt32)">
            <summary>
            Read a <see cref="T:System.ReadOnlySpan`1"/> from the <paramref name="stream"/>.
            </summary>
            <typeparam name="T">The type of items in the returned <see cref="T:System.ReadOnlySpan`1"/>.</typeparam>
            <param name="stream">The stream to read.</param>
            <param name="count">The count of T items to read.</param>
            <returns>A <see cref="T:System.ReadOnlySpan`1"/> with items read from the <paramref name="stream"/>.</returns>
        </member>
        <member name="M:Ez.IO.StreamExtensions.WriteStructure``1(System.IO.Stream,``0)">
            <summary>
            Write a T structure data in the stream.
            </summary>
            <typeparam name="T">The type of the structure to write.</typeparam>
            <param name="stream">The stream to write.</param>
            <param name="value">The T structure to written.</param>
        </member>
        <member name="M:Ez.IO.StreamExtensions.ReadStructure``1(System.IO.Stream)">
            <summary>
            Read a T structure data from the stream.
            </summary>
            <typeparam name="T">The type of the structure to read.</typeparam>
            <param name="stream">The stream to read.</param>
            <returns>A structure read from the stream.</returns>
        </member>
        <member name="M:Ez.IO.StreamExtensions.CopyTo(System.IO.Stream,System.IO.Stream,System.Int64,System.Int32)">
            <summary>
            Reads bytes from current stream and writes them to another stream.
            </summary>
            <param name="source">The source stream.</param>
            <param name="destination">The destination stream.</param>
            <param name="count">The number of bytes to copy.</param>
            <param name="bufferSize">The size of the buffer. This value must be 
            greater than zero. The default size is 1048576.</param>
            <returns>The number of bytes copied.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="destination"/> or
            <paramref name="source"/> is <see langword="null"/></exception>
            <exception cref="T:System.NotSupportedException">When <paramref name="source"/> cannot be read or <paramref name="destination"/> cannot be written.</exception>
        </member>
        <member name="T:Ez.IResettable">
            <summary>
            Describes an object that can be reset.
            </summary>
        </member>
        <member name="M:Ez.IResettable.Reset">
            <summary>
            Resets the object to a state that can be reused or destroyed.
            </summary>
        </member>
        <member name="M:Ez.IResettable.Set">
            <summary>
            Set an object just before being used.
            </summary>
        </member>
        <member name="T:Ez.Magics.IMagiced">
            <summary>
            Suppots a <see cref="T:Ez.Magics.IMagicSupport"/> property.
            </summary>
        </member>
        <member name="P:Ez.Magics.IMagiced.MagicSupport">
            <summary>
            Gets <see cref="P:Ez.Magics.IMagiced.MagicSupport"/> of a <see cref="T:Ez.Magics.IMagiced"/> instance.
            </summary>
        </member>
        <member name="T:Ez.Magics.IMagicSupport">
            <summary>
            Provides type support verification 
            </summary>
        </member>
        <member name="P:Ez.Magics.IMagicSupport.DisplayName">
            <summary>
            Gets the display name of a <see cref="T:Ez.Magics.IMagicSupport"/>.
            </summary>
        </member>
        <member name="M:Ez.Magics.IMagicSupport.Supports``1">
            <summary>
            Checks if a type is compatible.
            </summary>
            <typeparam name="T">The type to be checked.</typeparam>
            <returns><see langword="true"/> if suppoted, otherwise 
            <see langword="false"/>.</returns>
        </member>
        <member name="P:Ez.Magics.IMagicSupport.Types">
            <summary>
            Gets supported types.
            </summary>
        </member>
        <member name="T:Ez.Magics.MagicedCollection`1">
            <summary>
            A collection of <see cref="T:Ez.Magics.IMagiced"/> with <see cref="T:Ez.Magics.IMagicSupport"/> implementation.
            </summary>
            <typeparam name="TMagiced">The type of elements in collection</typeparam>
        </member>
        <member name="M:Ez.Magics.MagicedCollection`1.#ctor(System.String)">
            <summary>
            Creates a new instance of <see cref="T:Ez.Magics.MagicedCollection`1"/> class.
            </summary>
            <param name="displayName">The display name of the new instance.</param>
        </member>
        <member name="M:Ez.Magics.MagicedCollection`1.TryGetMagiced``1(`0@)">
            <summary>
            Try gets a <typeparamref name="TMagiced"/> instance with <see cref="!:T"/> support.
            </summary>
            <typeparam name="T">The type expected to be supported in 
            <paramref name="magiced"/>.</typeparam>
            <param name="magiced">A <typeparamref name="TMagiced"/> that has support for type 
            <typeparamref name="T"/>.</param>
            <returns></returns>
        </member>
        <member name="P:Ez.Magics.MagicedCollection`1.DisplayName">
            <summary>
            The display name of this collection.
            </summary>
        </member>
        <member name="P:Ez.Magics.MagicedCollection`1.Types">
            <summary>
            Gets the types supported by <typeparamref name="TMagiced"/> itens in
            this collection.
            </summary>
        </member>
        <member name="M:Ez.Magics.MagicedCollection`1.Supports``1">
            <summary>
            Checks if <typeparamref name="T"/> is suppoted by any
            <typeparamref name="TMagiced"/> item in this collection.
            </summary>
            <typeparam name="T">The type to be checked.</typeparam>
            <returns><see langword="true"/> if suppoted, otherwise 
            <see langword="false"/>.</returns>
        </member>
        <member name="P:Ez.Magics.MagicedCollection`1.Count">
            <summary>
            Gets the number of elements contained in the
            <see cref="T:Ez.Magics.MagicedCollection`1"/>.
            </summary>
        </member>
        <member name="P:Ez.Magics.MagicedCollection`1.IsReadOnly">
            <summary>
            Always <see langword="true"/>.
            </summary>
        </member>
        <member name="M:Ez.Magics.MagicedCollection`1.Add(`0)">
            <summary>
            Adds an item to the <see cref="T:Ez.Magics.MagicedCollection`1"/>.
            </summary>
            <param name="item">The object to add to the
            <see cref="T:Ez.Magics.MagicedCollection`1"/>.</param>
        </member>
        <member name="M:Ez.Magics.MagicedCollection`1.Clear">
            <summary>
            Removes all items from the <see cref="T:Ez.Magics.MagicedCollection`1"/>.
            </summary>
        </member>
        <member name="M:Ez.Magics.MagicedCollection`1.Contains(`0)">
            <summary>
            Determines whether the <see cref="T:Ez.Magics.MagicedCollection`1"/> 
            contains a specific value.
            </summary>
            <param name="item">The object to locate in the
            <see cref="T:Ez.Magics.MagicedCollection`1"/>.</param>
            <returns><see langword="true"/> if <paramref name="item"/> is 
            found in the <see cref="T:Ez.Magics.MagicedCollection`1"/>; otherwise,
            <see langword="false"/>.</returns>
        </member>
        <member name="M:Ez.Magics.MagicedCollection`1.Remove(`0)">
            <summary>
            Removes the first occurrence of a specific object from the
            <see cref="T:Ez.Magics.MagicedCollection`1"/>.
            </summary>
            <param name="item">The object to remove from the 
            <see cref="T:Ez.Magics.MagicedCollection`1"/>.</param>
            <returns><see langword="true"/> if <paramref name="item"/> was successfully 
            removed from the <see cref="T:Ez.Magics.MagicedCollection`1"/>; otherwise, 
            <see langword="false"/>. This method also returns <see langword="false"/> 
            if item is not found in the original <see cref="T:Ez.Magics.MagicedCollection`1"/>.</returns>
        </member>
        <member name="M:Ez.Magics.MagicedCollection`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:Ez.Magics.MagicedCollection`1"/> 
            to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the
            destination of the elements copied from <see cref="T:Ez.Magics.MagicedCollection`1"/>. 
            The <see cref="T:System.Array"/> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array"/> at 
            which copying begins.</param>
        </member>
        <member name="M:Ez.Magics.MagicedCollection`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:Ez.Magics.MagicedCollection`1"/>.
            </summary>
            <returns>An enumerator that can be used to iterate through 
            the <see cref="T:Ez.Magics.MagicedCollection`1"/>.</returns>
        </member>
        <member name="T:Ez.Magics.MagicSupportSlim">
            <summary>
            A lightweight implementation of <see cref="T:Ez.Magics.IMagicSupport"/>.
            </summary>
        </member>
        <member name="M:Ez.Magics.MagicSupportSlim.#ctor(System.String,System.Type[])">
            <summary>
            Creates a new instance of <see cref="T:Ez.Magics.MagicSupportSlim"/> class.
            </summary>
            <param name="displayName">The value of <see cref="P:Ez.Magics.MagicSupportSlim.DisplayName"/>.</param>
            <param name="types">Supported types in <see cref="P:Ez.Magics.MagicSupportSlim.Types"/> and <see cref="M:Ez.Magics.MagicSupportSlim.Supports``1"/>.</param>
        </member>
        <member name="P:Ez.Magics.MagicSupportSlim.DisplayName">
            <summary>
            Gets the display name of a <see cref="T:Ez.Magics.MagicSupportSlim"/>.
            </summary>
        </member>
        <member name="P:Ez.Magics.MagicSupportSlim.Types">
            <summary>
            Gets supported types.
            </summary>
        </member>
        <member name="M:Ez.Magics.MagicSupportSlim.Supports``1">
            <summary>
            Checks if a type is compatible.
            </summary>
            <typeparam name="T">The type to be checked.</typeparam>
            <returns><see langword="true"/> if suppoted, otherwise 
            <see langword="false"/>.</returns>
        </member>
        <member name="T:Ez.Memory.ArrayPool`1">
            <summary>
            Represents an array pool.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Ez.Memory.ArrayPool`1.Return(`0[])">
            <summary>
            Returns an array to the pool.
            </summary>
            <param name="array">The returned array.</param>
        </member>
        <member name="M:Ez.Memory.ArrayPool`1.GetT(System.Int64,System.Boolean,System.Int32)">
            <summary>
            Gets an array from the pool.
            </summary>
            <param name="size">The minimum size expected.</param>
            <param name="anyWithSize">Flag that indicates that any array with at least the <paramref name="size"/>
            is valid to be get.</param>
            <param name="tolerance">Number of attempts to obtain an object with the proposed conditions.</param>
            <returns></returns>
        </member>
        <member name="T:Ez.Memory.EphemeralMemoryBlock">
            <summary>
            Represents an ephemeral instance of a <see cref="T:Ez.Memory.MemoryBlock"/>.
            
            It should be used to expose a block of memory without providing a reference 
            that suggests it is permanent.
            </summary>
        </member>
        <member name="P:Ez.Memory.EphemeralMemoryBlock.Empty">
            <summary>
            returns an empty <see cref="T:Ez.Memory.MemoryBlock"/> object.
            </summary>
        </member>
        <member name="M:Ez.Memory.EphemeralMemoryBlock.#ctor(Ez.Memory.MemoryBlock)">
            <summary>
            Initializes a new instance of <see cref="T:Ez.Memory.EphemeralMemoryBlock"/> struct.
            </summary>
        </member>
        <member name="P:Ez.Memory.EphemeralMemoryBlock.RemainingSize">
            <summary>
            Gets the total bytes not sub-allocated in <see cref="T:Ez.Memory.MemoryBlock"/>.
            </summary>
        </member>
        <member name="P:Ez.Memory.EphemeralMemoryBlock.TotalSize">
            <summary>
            Gets the size of <see cref="T:Ez.Memory.MemoryBlock"/> in bytes.
            </summary>
        </member>
        <member name="P:Ez.Memory.EphemeralMemoryBlock.TotalUsed">
            <summary>
            Gets the total bytes sub-allocated in <see cref="T:Ez.Memory.MemoryBlock"/>.
            </summary>
        </member>
        <member name="P:Ez.Memory.EphemeralMemoryBlock.BaseIntPtr">
            <summary>
            The base pointer to the memory allocated by <see cref="T:Ez.Memory.MemoryBlock"/>.
            </summary>
        </member>
        <member name="P:Ez.Memory.EphemeralMemoryBlock.BasePtr">
            <summary>
            The base pointer to the memory allocated by <see cref="T:Ez.Memory.MemoryBlock"/>.
            </summary>
        </member>
        <member name="M:Ez.Memory.EphemeralMemoryBlock.Alloc(System.UInt64,System.Void*@)">
            <summary>
            Sub-allocates a part of the <see cref="T:Ez.Memory.MemoryBlock"/>.
            </summary>
            <param name="size">The size in bytes of the sub-allocation.</param>
            <param name="ptr">Contains the pointer to the sub-allocated area, if there is enough memory, otherwise null.</param>
            <returns></returns>
        </member>
        <member name="M:Ez.Memory.EphemeralMemoryBlock.Reset">
            <summary>
            Resets the sub-allocated memory to the initial state, without sub-allocated memory.
            </summary>
        </member>
        <member name="M:Ez.Memory.EphemeralMemoryBlock.op_Implicit(Ez.Memory.MemoryBlock)~Ez.Memory.EphemeralMemoryBlock">
            <summary>
            Implicitly creates an <see cref="T:Ez.Memory.EphemeralMemoryBlock"/> instance.
            </summary>
            <param name="memoryBlock"></param>
        </member>
        <member name="T:Ez.Memory.MemoryBlock">
            <summary>
            Represents an unmanaged memory block.
            </summary>
        </member>
        <member name="P:Ez.Memory.MemoryBlock.Empty">
            <summary>
            returns an empty <see cref="T:Ez.Memory.MemoryBlock"/> object.
            </summary>
        </member>
        <member name="F:Ez.Memory.MemoryBlock.DefaultStorageBlockSize">
            <summary>
            The default size of a <see cref="T:Ez.Memory.MemoryBlock"/>.
            </summary>
        </member>
        <member name="M:Ez.Memory.MemoryBlock.#ctor(System.UInt64)">
            <summary>
            Initializes a new instance of <see cref="T:Ez.Memory.MemoryBlock"/> class.
            </summary>
            <param name="storageBlockSize">The size of memory in <see cref="T:Ez.Memory.MemoryBlock"/>. <seealso cref="F:Ez.Memory.MemUtil.MaxAllocSize"/></param>
        </member>
        <member name="M:Ez.Memory.MemoryBlock.#ctor">
            <summary>
            Empty constructor.
            </summary>
        </member>
        <member name="M:Ez.Memory.MemoryBlock.Finalize">
            <summary>
            Destroys a instance of <see cref="T:Ez.Memory.MemoryBlock"/> class.
            </summary>
        </member>
        <member name="P:Ez.Memory.MemoryBlock.RemainingSize">
            <summary>
            Gets the total bytes not sub-allocated in <see cref="T:Ez.Memory.MemoryBlock"/>.
            </summary>
        </member>
        <member name="P:Ez.Memory.MemoryBlock.TotalSize">
            <summary>
            Gets the size of <see cref="T:Ez.Memory.MemoryBlock"/> in bytes.
            </summary>
        </member>
        <member name="P:Ez.Memory.MemoryBlock.TotalUsed">
            <summary>
            Gets the total bytes sub-allocated in <see cref="T:Ez.Memory.MemoryBlock"/>.
            </summary>
        </member>
        <member name="P:Ez.Memory.MemoryBlock.BaseIntPtr">
            <summary>
            The base pointer to the memory allocated by <see cref="T:Ez.Memory.MemoryBlock"/>.
            </summary>
        </member>
        <member name="P:Ez.Memory.MemoryBlock.BasePtr">
            <summary>
            The base pointer to the memory allocated by <see cref="T:Ez.Memory.MemoryBlock"/>.
            </summary>
        </member>
        <member name="M:Ez.Memory.MemoryBlock.Dispose">
            <summary>
            Releases all allocated memory.
            </summary>
        </member>
        <member name="M:Ez.Memory.MemoryBlock.Alloc(System.UInt64,System.Void*@)">
            <summary>
            Sub-allocates a part of the <see cref="T:Ez.Memory.MemoryBlock"/>.
            </summary>
            <param name="size">The size in bytes of the sub-allocation.</param>
            <param name="ptr">Contains the pointer to the sub-allocated area, if there is enough memory, otherwise null.</param>
            <returns></returns>
        </member>
        <member name="M:Ez.Memory.MemoryBlock.Reset">
            <summary>
            Resets the sub-allocated memory to the initial state, without sub-allocated memory.
            </summary>
        </member>
        <member name="T:Ez.Memory.MemoryBlockPool">
            <summary>
            An static <see cref="T:Ez.Memory.MemoryBlock"/> pool.
            </summary>
        </member>
        <member name="M:Ez.Memory.MemoryBlockPool.Return(Ez.Memory.MemoryBlock)">
            <summary>
            Returns a <see cref="T:Ez.Memory.MemoryBlock"/> to the pool.
            </summary>
            <param name="memoryBlock">The memory block to return.</param>
        </member>
        <member name="M:Ez.Memory.MemoryBlockPool.Get(System.UInt64,System.Boolean,System.Int32)">
            <summary>
            Gets a <see cref="T:Ez.Memory.MemoryBlock"/> from the pool, or creates a new <see cref="T:Ez.Memory.MemoryBlock"/>.
            </summary>
            <param name="size">The size in bytes of <see cref="T:Ez.Memory.MemoryBlock"/>.</param>
            <param name="anyWithSize">Flag that says it can be any <see cref="T:Ez.Memory.MemoryBlock"/> with enough size.</param>
            <param name="tolerance">Number of attempts to get before creating a new memory block.</param>
            <returns>A <see cref="T:Ez.Memory.MemoryBlock"/> with at least the requested size.</returns>
        </member>
        <member name="T:Ez.Memory.MemUtil">
            <summary>
            A static class with useful methods for memory manipulation operations.
            </summary>
        </member>
        <member name="M:Ez.Memory.MemUtil.SizeOf``1">
            <summary>
            Gets the size in bytes of an unmanaged type.
            </summary>
            <typeparam name="T">The unmanaged type to measure.</typeparam>
            <returns>Size in bytes of <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:Ez.Memory.MemUtil.SizeOf``1(System.ReadOnlySpan{``0})">
            <summary>
            Gets the size of a <see cref="T:System.ReadOnlySpan`1"/> in bytes.
            </summary>
            <typeparam name="T">The unmanaged type to measure.</typeparam>
            <param name="span">The span to measure</param>
            <returns>Size in bytes of <paramref name="span"/>.</returns>
        </member>
        <member name="M:Ez.Memory.MemUtil.Add(System.IntPtr,System.UInt64)">
            <summary>
            Adds an offset to the value of a pointer.
            </summary>
            <param name="ptr">The pointer to add the offset to.</param>
            <param name="offset">The offset to add.</param>
            <returns>A new pointer that reflects the addition of <paramref name="offset"/> 
            to <paramref name="ptr"/>.</returns>
        </member>
        <member name="M:Ez.Memory.MemUtil.AnyEquals``1(``0,``0[])">
            <summary>
            Returns a value indicating whether an instance is anywhere in the array.
            </summary>
            <typeparam name="T">The unmanaged type of element to check.</typeparam>
            <param name="value">The value to compare.</param>
            <param name="list">The list of values to compare with <paramref name="value"/>.</param>
            <returns><see langword="true"/> if the <paramref name="value"/> parameter 
            is contained in the <paramref name="list"/>; otherwise, <see langword="false"/></returns>
        </member>
        <member name="M:Ez.Memory.MemUtil.Equals``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})">
            <summary>
            Returns a value indicating whether a <see cref="T:System.ReadOnlySpan`1"/> is equal 
            to another <see cref="T:System.ReadOnlySpan`1"/>.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="a">The first <see cref="T:System.ReadOnlySpan`1"/> to compare.</param>
            <param name="b">The second <see cref="T:System.ReadOnlySpan`1"/> to compare.</param>
            <returns><see langword="true"/> if the span <paramref name="a"/> parameter 
            equals to span <paramref name="b"/> parameter; otherwise, <see langword="false"/></returns>
        </member>
        <member name="M:Ez.Memory.MemUtil.Equals(System.Void*,System.Void*,System.UInt64)">
            <summary>
            Returns a value indicating whether the content of one pointer is equal
            to that of another pointer by a specified number of bytes.
            </summary>
            <param name="a">The first pointer to compare.</param>
            <param name="b">The second pointer to compare.</param>
            <param name="byteCount">The number of bytes to compare.</param>
            <returns><see langword="true"/> if the contents of the pointer <paramref name="a"/> 
            are equal to contents of the pointer <paramref name="b"/> by <paramref name="byteCount"/> bytes.</returns>
        </member>
        <member name="M:Ez.Memory.MemUtil.Set``1(System.Span{``0},System.Byte)">
            <summary>
            Sets all bytes of a <see cref="T:System.Span`1"/> to a specified value.
            </summary>
            <typeparam name="T">The type of items in the <paramref name="span"/>.</typeparam>
            <param name="span">The span to be set.</param>
            <param name="value">The byte value to set.</param>
        </member>
        <member name="M:Ez.Memory.MemUtil.Set(System.Void*,System.Byte,System.UInt64)">
            <summary>
            Sets all first <paramref name="byteCount"/> bytes to the <paramref name="value"/> byte. 
            </summary>
            <param name="memoryPtr">The pointer to the first byte.</param>
            <param name="value">The byte value to set.</param>
            <param name="byteCount">The number of bytes to set.</param>
        </member>
        <member name="M:Ez.Memory.MemUtil.SetValue``1(``0*,``0@,System.UInt64)">
            <summary>
            Sets all the first <paramref name="count"/> Ts to the <paramref name="value"/>.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ptr">The pointer to the first T to set.</param>
            <param name="value">The value to set.</param>
            <param name="count">The number of Ts to set.</param>
        </member>
        <member name="M:Ez.Memory.MemUtil.Copy``1(System.Span{``0},System.ReadOnlySpan{``0})">
            <summary>
            Copies all data from one <see cref="T:System.ReadOnlySpan`1"/> to a <see cref="T:System.Span`1"/>.
            </summary>
            <typeparam name="T">The type of items in the <paramref name="destination"/> and <paramref name="source"/>.</typeparam>
            <param name="destination">The <see cref="T:System.Span`1"/> that receives the data.</param>
            <param name="source">The <see cref="T:System.ReadOnlySpan`1"/> that contains the data to copy.</param>
            <returns>Number of bytes copied.</returns>
        </member>
        <member name="M:Ez.Memory.MemUtil.Copy``2(System.Span{``0},System.ReadOnlySpan{``1})">
            <summary>
            Copies all data from one <see cref="T:System.ReadOnlySpan`1"/> to a <see cref="T:System.Span`1"/>.
            </summary>
            <typeparam name="TDestination">The type of items in the <paramref name="destination"/>.</typeparam>
            <typeparam name="TSource">The type of items in the <paramref name="source"/>.</typeparam>
            <param name="destination">The <see cref="T:System.Span`1"/> that receives the data.</param>
            <param name="source">The <see cref="T:System.ReadOnlySpan`1"/> that contains the data to copy.</param>
            <returns>Number of bytes copied.</returns>
        </member>
        <member name="M:Ez.Memory.MemUtil.Copy``1(System.IntPtr,System.ReadOnlySpan{``0})">
            <summary>
            Copies all data from a <see cref="T:System.ReadOnlySpan`1"/> to a destination address.
            </summary>
            <typeparam name="T">The type of items in the <paramref name="src"/>.</typeparam>
            <param name="dst">The destination address to copy to.</param>
            <param name="src">The <see cref="T:System.ReadOnlySpan`1"/> that contains the data to copy.</param>
            <returns>Number of bytes copied.</returns>
        </member>
        <member name="M:Ez.Memory.MemUtil.Copy``1(System.Void*,System.ReadOnlySpan{``0})">
            <summary>
            Copies all data from a <see cref="T:System.ReadOnlySpan`1"/> to a destination address.
            </summary>
            <typeparam name="T">The type of items in the <paramref name="src"/>.</typeparam>
            <param name="dst">The destination address to copy to.</param>
            <param name="src">The <see cref="T:System.ReadOnlySpan`1"/> that contains the data to copy.</param>
            <returns>Number of bytes copied.</returns>
        </member>
        <member name="M:Ez.Memory.MemUtil.Copy``1(System.IntPtr,``0@)">
            <summary>
            Copies all data from a T value to a destination address.
            </summary>
            <typeparam name="T">The type of data to copy.</typeparam>
            <param name="dst">The destination address to copy to.</param>
            <param name="src">The value to copy.</param>
            <returns>Number of bytes copied.</returns>
        </member>
        <member name="M:Ez.Memory.MemUtil.Copy(System.IntPtr,System.IntPtr,System.UInt64)">
            <summary>
            Copies bytes from the source address to the destination address.
            </summary>
            <param name="destination">The destination address to copy to.</param>
            <param name="source">The source address to copy from.</param>
            <param name="byteCount">The number of bytes to copy.</param>
        </member>
        <member name="M:Ez.Memory.MemUtil.Copy(System.Void*,System.Void*,System.UInt64)">
            <summary>
            Copies bytes from the source address to the destination address.
            </summary>
            <param name="destination">The destination address to copy to.</param>
            <param name="source">The source address to copy from.</param>
            <param name="byteCount">The number of bytes to copy.</param>
        </member>
        <member name="F:Ez.Memory.MemUtil.MaxAllocSize">
            <summary>
            Gets the theoretical limit for an allocation.
            <seealso cref="M:Ez.Memory.MemUtil.Alloc(System.UInt64)"/>.
            </summary>
        </member>
        <member name="M:Ez.Memory.MemUtil.Alloc(System.UInt64)">
            <summary>
            Allocates memory from unmanaged memory of process.
            </summary>
            <param name="size">The required number of bytes in memory.</param>
            <returns>A pointer to the newly allocated memory. This memory must be released using the <see cref="M:Ez.Memory.MemUtil.Free(System.Void*)"/> method.</returns>
        </member>
        <member name="M:Ez.Memory.MemUtil.Free(System.Void*)">
            <summary>
            Frees memory previously allocated from the unmanaged memory of the process.
            </summary>
            <param name="ptr">The handle returned by the original matching call to <see cref="M:Ez.Memory.MemUtil.Alloc(System.UInt64)"/>.</param>
        </member>
        <member name="T:Ez.Messenger.DynamicMessengerRecipient">
            <summary>
            Parses class and traces methods compatible with EventHandler or pre configured events in the dictionary
            </summary>
        </member>
        <member name="M:Ez.Messenger.DynamicMessengerRecipient.AddReceiverHandler(System.String,System.Type)">
            <summary>
            Add delegate type to dicionary of compatible event
            </summary>
            <param name="eventMethodName">Event name(example OnUpdate)</param>
            <param name="eventHandler">Event delegate</param>
        </member>
        <member name="P:Ez.Messenger.DynamicMessengerRecipient.Type">
            <summary>
            Class type traced in this instance
            </summary>
        </member>
        <member name="F:Ez.Messenger.DynamicMessengerRecipient.events">
            <summary>
            Dicionary of method name and method
            </summary>
        </member>
        <member name="M:Ez.Messenger.DynamicMessengerRecipient.#ctor(System.Type)">
            <summary>
            Create new instance that parses the specified type
            </summary>
            <param name="type">Class type to parse</param>
        </member>
        <member name="M:Ez.Messenger.DynamicMessengerRecipient.GetDelegateEvent(System.Object,System.String)">
            <summary>
            Get delegate of event method in target instance
            </summary>
            <param name="target">Target instance</param>
            <param name="methodName">Event method name</param>
            <returns></returns>
        </member>
        <member name="M:Ez.Messenger.DynamicMessengerRecipient.SendMessenger(System.Object[],System.String,System.Object,System.EventArgs)">
            <summary>
            Call the event-compatible method named methodName on all targets.
            </summary>
            <param name="targets">Targets that is instance of class of type Type</param>
            <param name="methodName">Method event name</param>
            <param name="sender">Sender</param>
            <param name="eventArgs">Event arguments</param>
        </member>
        <member name="M:Ez.Messenger.DynamicMessengerRecipient.SendMessenger(System.Object,System.String,System.Object,System.EventArgs)">
            <summary>
            Call the event-compatible method named methodName on target.
            </summary>
            <param name="target">Target that is instance of class of type Type</param>
            <param name="methodName">Method event name</param>
            <param name="sender">Sender</param>
            <param name="eventArgs">Event arguments</param>
        </member>
        <member name="M:Ez.Messenger.DynamicMessengerRecipient.MethodEventExists(System.String)">
            <summary>
            Check if have event name in type Type
            </summary>
            <param name="eventMethodName">Event method name</param>
            <returns>True if yes.</returns>
        </member>
        <member name="T:Ez.Messenger.MessengerSender">
            <summary>
            Describes a dynamic messaging communication system between objects.
            </summary>
        </member>
        <member name="M:Ez.Messenger.MessengerSender.GetRecipient(System.Type)">
            <summary>
            Gets a <see cref="T:Ez.Messenger.DynamicMessengerRecipient"/> associated with a specified type.
            </summary>
            <param name="receiverType">The type to locate.</param>
            <returns>A <see cref="T:Ez.Messenger.DynamicMessengerRecipient"/> that is associated with the <paramref name="receiverType"/> type.</returns>
        </member>
        <member name="M:Ez.Messenger.MessengerSender.GetRecipient``1">
            <summary>
            Gets a <see cref="T:Ez.Messenger.DynamicMessengerRecipient"/> associated with a specified type.
            </summary>
            <typeparam name="T">The type to locate.</typeparam>
            <returns>A <see cref="T:Ez.Messenger.DynamicMessengerRecipient"/> that is associated with the <typeparamref name="T"/> type.</returns>
        </member>
        <member name="M:Ez.Messenger.MessengerSender.GetRecipient(System.Object)">
            <summary>
            Gets a <see cref="T:Ez.Messenger.DynamicMessengerRecipient"/> associated with a specified type of the <paramref name="receiver"/>.
            </summary>
            <param name="receiver">A object to locate a compatible <see cref="T:Ez.Messenger.DynamicMessengerRecipient"/>.</param>
            <returns>A <see cref="T:Ez.Messenger.DynamicMessengerRecipient"/> that is associated with the type of <paramref name="receiver"/>.</returns>
        </member>
        <member name="M:Ez.Messenger.MessengerSender.SendMessenger(System.Object,System.String,System.Object,System.EventArgs)">
            <summary>
            Sends messenger event named <paramref name="eventMethodName"/> to receiver.
            </summary>
            <param name="receiver">Receiver of messenger</param>
            <param name="eventMethodName">Event message receiving method</param>
            <param name="sender">The sender argument of event method.</param>
            <param name="eventArgs">The e argument of event method.</param>
        </member>
        <member name="M:Ez.Messenger.MessengerSender.GetDelegate(System.Object,System.String)">
            <summary>
            Get delegate of event method
            </summary>
            <param name="target">Target of delegate</param>
            <param name="methodName">Method name</param>
            <returns>Delegate of method in target</returns>
        </member>
        <member name="T:Ez.Numerics.Bounding.BoundingBox">
            <summary>
            Represents a bounding box aligned to the X and Y axes .
            </summary>
        </member>
        <member name="P:Ez.Numerics.Bounding.BoundingBox.Max">
            <summary>
            The maximum point the <see cref="T:Ez.Numerics.Bounding.BoundingBox"/> contains.
            </summary>
        </member>
        <member name="P:Ez.Numerics.Bounding.BoundingBox.Min">
            <summary>
            The minimum point the <see cref="T:Ez.Numerics.Bounding.BoundingBox"/> contains.
            </summary>
        </member>
        <member name="M:Ez.Numerics.Bounding.BoundingBox.#ctor(System.Numerics.Vector3,System.Numerics.Vector3)">
            <summary>
            Creates a new <see cref="T:Ez.Numerics.Bounding.BoundingBox"/> with the minimum point and maximum point.
            </summary>
            <param name="min"></param>
            <param name="max"></param>
        </member>
        <member name="M:Ez.Numerics.Bounding.BoundingBox.Contains(Ez.Numerics.Bounding.IBoundingVolume)">
            <summary>
            Returns the <see cref="T:Ez.Numerics.Bounding.ContainmentType"/> between this and another <see cref="T:Ez.Numerics.Bounding.IBoundingVolume"/>.
            </summary>
            <param name="bounding">The other <see cref="T:Ez.Numerics.Bounding.IBoundingVolume"/> to compare.</param>
            <returns>
            <see cref="F:Ez.Numerics.Bounding.ContainmentType.Disjoint"/>, if there is no overlap between the bounding volumes.<br/>
            <see cref="F:Ez.Numerics.Bounding.ContainmentType.Contains"/>, if the instance fully contains the volume of <see cref="T:Ez.Numerics.Bounding.IBoundingVolume"/>.<br/>
            <see cref="F:Ez.Numerics.Bounding.ContainmentType.Intersects"/>, if only part of the instance contains at least part of
            <paramref name="bounding"/> volume.</returns>
        </member>
        <member name="M:Ez.Numerics.Bounding.BoundingBox.Contains(Ez.Numerics.Bounding.BoundingBox@)">
            <summary>
            Returns the <see cref="T:Ez.Numerics.Bounding.ContainmentType"/> between this and another <see cref="T:Ez.Numerics.Bounding.BoundingBox"/>.
            </summary>
            <param name="bounding">The other <see cref="T:Ez.Numerics.Bounding.BoundingBox"/> to compare.</param>
            <returns>
            <see cref="F:Ez.Numerics.Bounding.ContainmentType.Disjoint"/>, if there is no overlap between the bounding volumes.<br/>
            <see cref="F:Ez.Numerics.Bounding.ContainmentType.Contains"/>, if the instance fully contains the volume of <see cref="T:Ez.Numerics.Bounding.BoundingBox"/>.<br/>
            <see cref="F:Ez.Numerics.Bounding.ContainmentType.Intersects"/>, if only part of the instance contains at least part of
            <paramref name="bounding"/> volume.</returns>
        </member>
        <member name="M:Ez.Numerics.Bounding.BoundingBox.Contains(System.Numerics.Vector3)">
            <summary>
            Returns a value indicating whether the point is within the bounding.
            </summary>
            <param name="point">The pointer to evaluate.</param>
            <returns><see langword="true"/> if the point is inside the bounding box; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="T:Ez.Numerics.Bounding.ContainmentType">
            <summary>
            Indicates the extent to which bounding volumes intersect or contain one another.
            </summary>
        </member>
        <member name="F:Ez.Numerics.Bounding.ContainmentType.Disjoint">
            <summary>
            Indicates there is no overlap between the bounding volumes.
            </summary>
        </member>
        <member name="F:Ez.Numerics.Bounding.ContainmentType.Contains">
            <summary>
            Indicates that one bounding volume completely contains the other.
            </summary>
        </member>
        <member name="F:Ez.Numerics.Bounding.ContainmentType.Intersects">
            <summary>
            Indicates that the bounding volumes partially overlap.
            </summary>
        </member>
        <member name="T:Ez.Numerics.Bounding.IBoundingVolume">
            <summary>
            Provides a generic interface for bounding volume
            </summary>
        </member>
        <member name="M:Ez.Numerics.Bounding.IBoundingVolume.Contains(Ez.Numerics.Bounding.IBoundingVolume)">
            <summary>
            Returns the <see cref="T:Ez.Numerics.Bounding.ContainmentType"/> between this and another <see cref="T:Ez.Numerics.Bounding.IBoundingVolume"/>.
            </summary>
            <param name="bounding">The other <see cref="T:Ez.Numerics.Bounding.IBoundingVolume"/> to compare.</param>
            <returns>
            <see cref="F:Ez.Numerics.Bounding.ContainmentType.Disjoint"/>, if there is no overlap between the bounding volumes.<br/>
            <see cref="F:Ez.Numerics.Bounding.ContainmentType.Contains"/>, if the instance fully contains the volume of <see cref="T:Ez.Numerics.Bounding.IBoundingVolume"/>.<br/>
            <see cref="F:Ez.Numerics.Bounding.ContainmentType.Intersects"/>, if only part of the instance contains at least part of
            <paramref name="bounding"/> volume.</returns>
        </member>
        <member name="T:Ez.Numerics.EzMath">
            <summary>
            Provides constants and static methods to complement <see cref="T:System.Math"/>.
            </summary>
        </member>
        <member name="F:Ez.Numerics.EzMath.PI">
            <summary>
            Represents the ratio of the circumference of a circle to its diameter, specified by the constant, π.
            </summary>
        </member>
        <member name="F:Ez.Numerics.EzMath.Deg2Rad">
            <summary>
            Degrees-to-radians conversion constant.
            <see cref="F:Ez.Numerics.EzMath.Rad2Deg"/>
            </summary>
        </member>
        <member name="F:Ez.Numerics.EzMath.Rad2Deg">
            <summary>
            Radians-to-degrees conversion constant.
            <see cref="F:Ez.Numerics.EzMath.Deg2Rad"/>
            </summary>
        </member>
        <member name="F:Ez.Numerics.EzMath.InvLogE2">
            <summary>
            Natural logarithm of 2 inverted constant(1 / log 2).
            </summary>
        </member>
        <member name="M:Ez.Numerics.EzMath.Log2(System.Double)">
            <summary>
            Calculates the log on base 2.
            </summary>
            <param name="d">The number whose logarithm is to be found.</param>
            <returns>
            The natural logarithm of <paramref name="d"/>, if <paramref name="d"/> is positive.<br/>
            <see cref="F:System.Double.NegativeInfinity"/>, if <paramref name="d"/> is zero.<br/>
            <see cref="F:System.Double.NaN"/>, if <paramref name="d"/> is negative or equal to <see cref="F:System.Double.NaN"/>.<br/>
            <see cref="F:System.Double.PositiveInfinity"/>, if <paramref name="d"/> is <see cref="F:System.Double.PositiveInfinity"/>.</returns>
        </member>
        <member name="M:Ez.Numerics.EzMath.Approximately(System.Single,System.Single)">
            <summary>
            Compares two floating point values and returns true if they are similar.
            </summary>
            <param name="a">The first value to compare.</param>
            <param name="b">The second value to compare.</param>
            <returns><see langword="true"/>, if they are within a small value epsilon; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ez.Numerics.EzMath.Floor(System.Single)">
            <summary>
            Returns the largest integral value less than or equal to the specified number.
            </summary>
            <param name="d">A single-precision floating-point number.</param>
            <returns>The largest integral value less than or equal to <paramref name="d"/>. 
            If <paramref name="d"/> is equal to <see cref="F:System.Single.NaN"/>, <see cref="F:System.Single.NegativeInfinity"/>, 
            or <see cref="F:System.Single.PositiveInfinity"/>, that value is returned.</returns>
        </member>
        <member name="M:Ez.Numerics.EzMath.Ceiling(System.Single)">
            <summary>
            Returns the smallest integral value that is greater than or equal to the specified single-precision floating-point number.
            </summary>
            <param name="a">A single-precision floating-point number.</param>
            <returns>The smallest integral value that is greater than or equal to <paramref name="a"/>. 
            If <paramref name="a"/> is equal to <see cref="F:System.Single.NaN"/>, <see cref="F:System.Single.NegativeInfinity"/>, 
            or <see cref="F:System.Single.PositiveInfinity"/>, that value is returned. </returns>
        </member>
        <member name="M:Ez.Numerics.EzMath.Round(System.Single)">
            <summary>
            Rounds a value to the nearest integer or to the specified number of fractional digits.
            </summary>
            <param name="a">A single-precision floating-point number to be rounded.</param>
            <returns>The integer nearest <paramref name="a"/>. If the fractional component of a is halfway between two integers,
            one of which is even and the other odd, then the even number is returned.</returns>
        </member>
        <member name="M:Ez.Numerics.EzMath.ToEulerAngles(System.Numerics.Quaternion)">
            <summary>
            Returns the euler angle representation of a <see cref="T:System.Numerics.Quaternion"/>.
            </summary>
            <param name="q">The quaternion to represent in the form of euler angle.</param>
            <returns>An euler angle vector that represents the <paramref name="q"/> quaternion.</returns>
        </member>
        <member name="M:Ez.Numerics.EzMath.ToQuaternion(System.Numerics.Vector3)">
            <summary>
            Returns the quaternion representation of a euler angle <see cref="T:System.Numerics.Vector3"/>.
            </summary>
            <param name="eulerAngles">The euler angle to represents in the form of quaternion.</param>
            <returns>An quaternion that represents the <paramref name="eulerAngles"/> vector.</returns>
        </member>
        <member name="T:Ez.Numerics.HashHelper`1">
            <summary>
            A static helper class to handle things related to hash code.
            </summary>
            <typeparam name="T">The destination type to calculate a <see cref="P:Ez.Numerics.HashHelper`1.BaseHash"/>.</typeparam>
        </member>
        <member name="P:Ez.Numerics.HashHelper`1.BaseHash">
            <summary>
            A hash code to be the basis of a hash combine function.
            </summary>
        </member>
        <member name="M:Ez.Numerics.HashHelper`1.Combine``1(``0@)">
            <summary>
            Combines one values into a hash code.
            </summary>
            <typeparam name="T1">The type of the first value to combine into the hash code.</typeparam>
            <param name="value1">The first value to combine into the hash code.</param>
            <returns>The hash code that represents the one value.</returns>
        </member>
        <member name="M:Ez.Numerics.HashHelper`1.Combine``2(``0@,``1@)">
            <summary>
            Combines two values into a hash code.
            </summary>
            <typeparam name="T1">The type of the first value to combine into the hash code.</typeparam>
            <typeparam name="T2">The type of the second value to combine into the hash code.</typeparam>
            <param name="value1">The first value to combine into the hash code.</param>
            <param name="value2">The second value to combine into the hash code.</param>
            <returns>The hash code that represents the two values.</returns>
        </member>
        <member name="M:Ez.Numerics.HashHelper`1.Combine``3(``0@,``1@,``2@)">
            <summary>
            Combines three values into a hash code.
            </summary>
            <typeparam name="T1">The type of the first value to combine into the hash code.</typeparam>
            <typeparam name="T2">The type of the second value to combine into the hash code.</typeparam>
            <typeparam name="T3">The type of the third value to combine into the hash code.</typeparam>
            <param name="value1">The first value to combine into the hash code.</param>
            <param name="value2">The second value to combine into the hash code.</param>
            <param name="value3">The third value to combine into the hash code.</param>
            <returns>The hash code that represents the three values.</returns>
        </member>
        <member name="M:Ez.Numerics.HashHelper`1.Combine``4(``0@,``1@,``2@,``3@)">
            <summary>
            Combines four values into a hash code.
            </summary>
            <typeparam name="T1">The type of the first value to combine into the hash code.</typeparam>
            <typeparam name="T2">The type of the second value to combine into the hash code.</typeparam>
            <typeparam name="T3">The type of the third value to combine into the hash code.</typeparam>
            <typeparam name="T4">The type of the fourth value to combine into the hash code.</typeparam>
            <param name="value1">The first value to combine into the hash code.</param>
            <param name="value2">The second value to combine into the hash code.</param>
            <param name="value3">The third value to combine into the hash code.</param>
            <param name="value4">The fourth value to combine into the hash code.</param>
            <returns>The hash code that represents the four values.</returns>
        </member>
        <member name="M:Ez.Numerics.HashHelper`1.Combine``5(``0@,``1@,``2@,``3@,``4@)">
            <summary>
            Combines five values into a hash code.
            </summary>
            <typeparam name="T1">The type of the first value to combine into the hash code.</typeparam>
            <typeparam name="T2">The type of the second value to combine into the hash code.</typeparam>
            <typeparam name="T3">The type of the third value to combine into the hash code.</typeparam>
            <typeparam name="T4">The type of the fourth value to combine into the hash code.</typeparam>
            <typeparam name="T5">The type of the fifth value to combine into the hash code.</typeparam>
            <param name="value1">The first value to combine into the hash code.</param>
            <param name="value2">The second value to combine into the hash code.</param>
            <param name="value3">The third value to combine into the hash code.</param>
            <param name="value4">The fourth value to combine into the hash code.</param>
            <param name="value5">The fifth value to combine into the hash code.</param>
            <returns>The hash code that represents the five values.</returns>
        </member>
        <member name="M:Ez.Numerics.HashHelper`1.Combine``6(``0@,``1@,``2@,``3@,``4@,``5@)">
            <summary>
            Combines six values into a hash code.
            </summary>
            <typeparam name="T1">The type of the first value to combine into the hash code.</typeparam>
            <typeparam name="T2">The type of the second value to combine into the hash code.</typeparam>
            <typeparam name="T3">The type of the third value to combine into the hash code.</typeparam>
            <typeparam name="T4">The type of the fourth value to combine into the hash code.</typeparam>
            <typeparam name="T5">The type of the fifth value to combine into the hash code.</typeparam>
            <typeparam name="T6">The type of the sixth value to combine into the hash code.</typeparam>
            <param name="value1">The first value to combine into the hash code.</param>
            <param name="value2">The second value to combine into the hash code.</param>
            <param name="value3">The third value to combine into the hash code.</param>
            <param name="value4">The fourth value to combine into the hash code.</param>
            <param name="value5">The fifth value to combine into the hash code.</param>
            <param name="value6">The sixth value to combine into the hash code.</param>
            <returns>The hash code that represents the six values.</returns>
        </member>
        <member name="M:Ez.Numerics.HashHelper`1.Combine``7(``0@,``1@,``2@,``3@,``4@,``5@,``6@)">
            <summary>
            Combines seven values into a hash code.
            </summary>
            <typeparam name="T1">The type of the first value to combine into the hash code.</typeparam>
            <typeparam name="T2">The type of the second value to combine into the hash code.</typeparam>
            <typeparam name="T3">The type of the third value to combine into the hash code.</typeparam>
            <typeparam name="T4">The type of the fourth value to combine into the hash code.</typeparam>
            <typeparam name="T5">The type of the fifth value to combine into the hash code.</typeparam>
            <typeparam name="T6">The type of the sixth value to combine into the hash code.</typeparam>
            <typeparam name="T7">The type of the seventh value to combine into the hash code.</typeparam>
            <param name="value1">The first value to combine into the hash code.</param>
            <param name="value2">The second value to combine into the hash code.</param>
            <param name="value3">The third value to combine into the hash code.</param>
            <param name="value4">The fourth value to combine into the hash code.</param>
            <param name="value5">The fifth value to combine into the hash code.</param>
            <param name="value6">The sixth value to combine into the hash code.</param>
            <param name="value7">The seventh value to combine into the hash code.</param>
            <returns>The hash code that represents the seven values.</returns>
        </member>
        <member name="M:Ez.Numerics.HashHelper`1.Combine``8(``0@,``1@,``2@,``3@,``4@,``5@,``6@,``7@)">
            <summary>
            Combines eight values into a hash code.
            </summary>
            <typeparam name="T1">The type of the first value to combine into the hash code.</typeparam>
            <typeparam name="T2">The type of the second value to combine into the hash code.</typeparam>
            <typeparam name="T3">The type of the third value to combine into the hash code.</typeparam>
            <typeparam name="T4">The type of the fourth value to combine into the hash code.</typeparam>
            <typeparam name="T5">The type of the fifth value to combine into the hash code.</typeparam>
            <typeparam name="T6">The type of the sixth value to combine into the hash code.</typeparam>
            <typeparam name="T7">The type of the seventh value to combine into the hash code.</typeparam>
            <typeparam name="T8">The type of the eighth value to combine into the hash code.</typeparam>
            <param name="value1">The first value to combine into the hash code.</param>
            <param name="value2">The second value to combine into the hash code.</param>
            <param name="value3">The third value to combine into the hash code.</param>
            <param name="value4">The fourth value to combine into the hash code.</param>
            <param name="value5">The fifth value to combine into the hash code.</param>
            <param name="value6">The sixth value to combine into the hash code.</param>
            <param name="value7">The seventh value to combine into the hash code.</param>
            <param name="value8">The eighth value to combine into the hash code.</param>
            <returns>The hash code that represents the eight values.</returns>
        </member>
        <member name="M:Ez.Numerics.HashHelper`1.Combine``9(``0@,``1@,``2@,``3@,``4@,``5@,``6@,``7@,``8@)">
            <summary>
            Combines nine values into a hash code.
            </summary>
            <typeparam name="T1">The type of the first value to combine into the hash code.</typeparam>
            <typeparam name="T2">The type of the second value to combine into the hash code.</typeparam>
            <typeparam name="T3">The type of the third value to combine into the hash code.</typeparam>
            <typeparam name="T4">The type of the fourth value to combine into the hash code.</typeparam>
            <typeparam name="T5">The type of the fifth value to combine into the hash code.</typeparam>
            <typeparam name="T6">The type of the sixth value to combine into the hash code.</typeparam>
            <typeparam name="T7">The type of the seventh value to combine into the hash code.</typeparam>
            <typeparam name="T8">The type of the eighth value to combine into the hash code.</typeparam>
            <typeparam name="T9">The type of the ninth value to combine into the hash code.</typeparam>
            <param name="value1">The first value to combine into the hash code.</param>
            <param name="value2">The second value to combine into the hash code.</param>
            <param name="value3">The third value to combine into the hash code.</param>
            <param name="value4">The fourth value to combine into the hash code.</param>
            <param name="value5">The fifth value to combine into the hash code.</param>
            <param name="value6">The sixth value to combine into the hash code.</param>
            <param name="value7">The seventh value to combine into the hash code.</param>
            <param name="value8">The eighth value to combine into the hash code.</param>
            <param name="value9">The ninth value to combine into the hash code.</param>
            <returns>The hash code that represents the nine values.</returns>
        </member>
        <member name="M:Ez.Numerics.HashHelper`1.Combine``10(``0@,``1@,``2@,``3@,``4@,``5@,``6@,``7@,``8@,``9@)">
            <summary>
            Combines ten values into a hash code.
            </summary>
            <typeparam name="T1">The type of the first value to combine into the hash code.</typeparam>
            <typeparam name="T2">The type of the second value to combine into the hash code.</typeparam>
            <typeparam name="T3">The type of the third value to combine into the hash code.</typeparam>
            <typeparam name="T4">The type of the fourth value to combine into the hash code.</typeparam>
            <typeparam name="T5">The type of the fifth value to combine into the hash code.</typeparam>
            <typeparam name="T6">The type of the sixth value to combine into the hash code.</typeparam>
            <typeparam name="T7">The type of the seventh value to combine into the hash code.</typeparam>
            <typeparam name="T8">The type of the eighth value to combine into the hash code.</typeparam>
            <typeparam name="T9">The type of the ninth value to combine into the hash code.</typeparam>
            <typeparam name="T10">The type of the tenth value to combine into the hash code.</typeparam>
            <param name="value1">The first value to combine into the hash code.</param>
            <param name="value2">The second value to combine into the hash code.</param>
            <param name="value3">The third value to combine into the hash code.</param>
            <param name="value4">The fourth value to combine into the hash code.</param>
            <param name="value5">The fifth value to combine into the hash code.</param>
            <param name="value6">The sixth value to combine into the hash code.</param>
            <param name="value7">The seventh value to combine into the hash code.</param>
            <param name="value8">The eighth value to combine into the hash code.</param>
            <param name="value9">The ninth value to combine into the hash code.</param>
            <param name="value10">The tenth value to combine into the hash code.</param>
            <returns>The hash code that represents the ten values.</returns>
        </member>
        <member name="M:Ez.Numerics.HashHelper`1.Combine``11(``0@,``1@,``2@,``3@,``4@,``5@,``6@,``7@,``8@,``9@,``10@)">
            <summary>
            Combines eleven values into a hash code.
            </summary>
            <typeparam name="T1">The type of the first value to combine into the hash code.</typeparam>
            <typeparam name="T2">The type of the second value to combine into the hash code.</typeparam>
            <typeparam name="T3">The type of the third value to combine into the hash code.</typeparam>
            <typeparam name="T4">The type of the fourth value to combine into the hash code.</typeparam>
            <typeparam name="T5">The type of the fifth value to combine into the hash code.</typeparam>
            <typeparam name="T6">The type of the sixth value to combine into the hash code.</typeparam>
            <typeparam name="T7">The type of the seventh value to combine into the hash code.</typeparam>
            <typeparam name="T8">The type of the eighth value to combine into the hash code.</typeparam>
            <typeparam name="T9">The type of the ninth value to combine into the hash code.</typeparam>
            <typeparam name="T10">The type of the tenth value to combine into the hash code.</typeparam>
            <typeparam name="T11">The type of the eleventh value to combine into the hash code.</typeparam>
            <param name="value1">The first value to combine into the hash code.</param>
            <param name="value2">The second value to combine into the hash code.</param>
            <param name="value3">The third value to combine into the hash code.</param>
            <param name="value4">The fourth value to combine into the hash code.</param>
            <param name="value5">The fifth value to combine into the hash code.</param>
            <param name="value6">The sixth value to combine into the hash code.</param>
            <param name="value7">The seventh value to combine into the hash code.</param>
            <param name="value8">The eighth value to combine into the hash code.</param>
            <param name="value9">The ninth value to combine into the hash code.</param>
            <param name="value10">The tenth value to combine into the hash code.</param>
            <param name="value11">The eleventh value to combine into the hash code.</param>
            <returns>The hash code that represents the eleven values.</returns>
        </member>
        <member name="M:Ez.Numerics.HashHelper`1.Combine``12(``0@,``1@,``2@,``3@,``4@,``5@,``6@,``7@,``8@,``9@,``10@,``11@)">
            <summary>
            Combines twelve values into a hash code.
            </summary>
            <typeparam name="T1">The type of the first value to combine into the hash code.</typeparam>
            <typeparam name="T2">The type of the second value to combine into the hash code.</typeparam>
            <typeparam name="T3">The type of the third value to combine into the hash code.</typeparam>
            <typeparam name="T4">The type of the fourth value to combine into the hash code.</typeparam>
            <typeparam name="T5">The type of the fifth value to combine into the hash code.</typeparam>
            <typeparam name="T6">The type of the sixth value to combine into the hash code.</typeparam>
            <typeparam name="T7">The type of the seventh value to combine into the hash code.</typeparam>
            <typeparam name="T8">The type of the eighth value to combine into the hash code.</typeparam>
            <typeparam name="T9">The type of the ninth value to combine into the hash code.</typeparam>
            <typeparam name="T10">The type of the tenth value to combine into the hash code.</typeparam>
            <typeparam name="T11">The type of the eleventh value to combine into the hash code.</typeparam>
            <typeparam name="T12">The type of the twelfth value to combine into the hash code.</typeparam>
            <param name="value1">The first value to combine into the hash code.</param>
            <param name="value2">The second value to combine into the hash code.</param>
            <param name="value3">The third value to combine into the hash code.</param>
            <param name="value4">The fourth value to combine into the hash code.</param>
            <param name="value5">The fifth value to combine into the hash code.</param>
            <param name="value6">The sixth value to combine into the hash code.</param>
            <param name="value7">The seventh value to combine into the hash code.</param>
            <param name="value8">The eighth value to combine into the hash code.</param>
            <param name="value9">The ninth value to combine into the hash code.</param>
            <param name="value10">The tenth value to combine into the hash code.</param>
            <param name="value11">The eleventh value to combine into the hash code.</param>
            <param name="value12">The twelfth value to combine into the hash code.</param>
            <returns>The hash code that represents the twelve values.</returns>
        </member>
        <member name="M:Ez.Numerics.HashHelper`1.Combine``13(``0@,``1@,``2@,``3@,``4@,``5@,``6@,``7@,``8@,``9@,``10@,``11@,``12@)">
            <summary>
            Combines thirteen values into a hash code.
            </summary>
            <typeparam name="T1">The type of the first value to combine into the hash code.</typeparam>
            <typeparam name="T2">The type of the second value to combine into the hash code.</typeparam>
            <typeparam name="T3">The type of the third value to combine into the hash code.</typeparam>
            <typeparam name="T4">The type of the fourth value to combine into the hash code.</typeparam>
            <typeparam name="T5">The type of the fifth value to combine into the hash code.</typeparam>
            <typeparam name="T6">The type of the sixth value to combine into the hash code.</typeparam>
            <typeparam name="T7">The type of the seventh value to combine into the hash code.</typeparam>
            <typeparam name="T8">The type of the eighth value to combine into the hash code.</typeparam>
            <typeparam name="T9">The type of the ninth value to combine into the hash code.</typeparam>
            <typeparam name="T10">The type of the tenth value to combine into the hash code.</typeparam>
            <typeparam name="T11">The type of the eleventh value to combine into the hash code.</typeparam>
            <typeparam name="T12">The type of the twelfth value to combine into the hash code.</typeparam>
            <typeparam name="T13">The type of the thirteenth value to combine into the hash code.</typeparam>
            <param name="value1">The first value to combine into the hash code.</param>
            <param name="value2">The second value to combine into the hash code.</param>
            <param name="value3">The third value to combine into the hash code.</param>
            <param name="value4">The fourth value to combine into the hash code.</param>
            <param name="value5">The fifth value to combine into the hash code.</param>
            <param name="value6">The sixth value to combine into the hash code.</param>
            <param name="value7">The seventh value to combine into the hash code.</param>
            <param name="value8">The eighth value to combine into the hash code.</param>
            <param name="value9">The ninth value to combine into the hash code.</param>
            <param name="value10">The tenth value to combine into the hash code.</param>
            <param name="value11">The eleventh value to combine into the hash code.</param>
            <param name="value12">The twelfth value to combine into the hash code.</param>
            <param name="value13">The thirteenth value to combine into the hash code.</param>
            <returns>The hash code that represents the thirteen values.</returns>
        </member>
        <member name="M:Ez.Numerics.HashHelper`1.Combine``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Combines values into a hash code.
            </summary>
            <typeparam name="U">The type of <paramref name="values"/> to combine into a hash code.</typeparam>
            <param name="values">The <paramref name="values"/> to combine into the hash code.</param>
            <returns>The hash code that represents the <paramref name="values"/>.</returns>
        </member>
        <member name="M:Ez.Numerics.HashHelper`1.Combine(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Combines values into a hash code.
            </summary>
            <param name="values">The <paramref name="values"/> to combine into the hash code.</param>
            <returns>The hash code that represents the <paramref name="values"/>.</returns>
        </member>
        <member name="M:Ez.Numerics.HashHelper`1.Combine(System.ReadOnlySpan{`0})">
            <summary>
            Combines values into a hash code.
            </summary>
            <param name="values">The <paramref name="values"/> to combine into the hash code.</param>
            <returns></returns>
        </member>
        <member name="M:Ez.Numerics.HashHelper`1.Combine``1(System.ReadOnlySpan{``0})">
            <summary>
            Combines values into a hash code.
            </summary>
            <typeparam name="U">The type of <paramref name="values"/> to combine into a hash code.</typeparam>
            <param name="values">The <paramref name="values"/> to combine into the hash code.</param>
            <returns>The hash code that represents the <paramref name="values"/>.</returns>
        </member>
        <member name="T:Ez.Threading.EzThreadException">
            <summary>
            The execption that is thrown by Ez.Threading namespace.
            </summary>
        </member>
        <member name="M:Ez.Threading.EzThreadException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ez.Threading.EzThreadException"/> class.
            </summary>
        </member>
        <member name="M:Ez.Threading.EzThreadException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Ez.Threading.EzThreadException"/> class with a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Ez.Threading.EzThreadException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Ez.Threading.EzThreadException"/> class with serialized data.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a <see langword="null"/>
            reference if no inner exception is specified.</param>
        </member>
        <member name="M:Ez.Threading.EzThreadException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Ez.Threading.EzThreadException"/> class with a specified
            error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object 
            data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information 
            about the source or destination.</param>
        </member>
        <member name="T:Ez.Threading.ThreadMethodEntry">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ez.Threading.ThreadMethodEntry.Finalize">
            <summary>
            Destroys a <see cref="T:Ez.Threading.ThreadMethodEntry"/> class instance.
            </summary>
        </member>
        <member name="T:Ez.Threading.ThreadMethodExecutor">
            <summary>
            A thread that consumes delegates and invokes them.
            </summary>
        </member>
        <member name="M:Ez.Threading.ThreadMethodExecutor.#ctor(System.Boolean)">
            <summary>
            Initializes a new <see cref="T:Ez.Threading.ThreadMethodExecutor"/> class.
            </summary>
            <param name="autostart">Auto starts the thread.</param>
        </member>
        <member name="M:Ez.Threading.ThreadMethodExecutor.Finalize">
            <summary>
            Destroys a <see cref="T:Ez.Threading.ThreadMethodExecutor"/> class instance.
            </summary>
        </member>
        <member name="E:Ez.Threading.ThreadMethodExecutor.Awake">
            <summary>
            Occurs when the thread is started, before the <see cref="E:Ez.Threading.ThreadMethodExecutor.Start"/> event.
            </summary>
        </member>
        <member name="E:Ez.Threading.ThreadMethodExecutor.Start">
            <summary>
            Occurs when the thread is started, after the <see cref="E:Ez.Threading.ThreadMethodExecutor.Awake"/> event.
            </summary>
        </member>
        <member name="E:Ez.Threading.ThreadMethodExecutor.BeforeInvoking">
            <summary>
            Occurs just before a consumed delegate is invoked.
            </summary>
        </member>
        <member name="E:Ez.Threading.ThreadMethodExecutor.AfterInvoking">
            <summary>
            Occurs just after a consumed delegate is invoked.
            </summary>
        </member>
        <member name="M:Ez.Threading.ThreadMethodExecutor.StartThread">
            <summary>
            Starts the execution of this <see cref="T:Ez.Threading.ThreadMethodExecutor"/>.
            </summary>
        </member>
        <member name="M:Ez.Threading.ThreadMethodExecutor.Invoke(System.Action)">
            <summary>
            Synchronously executes the <paramref name="action"/> on this <see cref="T:Ez.Threading.ThreadMethodExecutor"/>.
            </summary>
            <param name="action">A <see cref="T:System.Action"/> delegate that contains a method to call in this <see cref="T:Ez.Threading.ThreadMethodExecutor"/>.</param>
        </member>
        <member name="M:Ez.Threading.ThreadMethodExecutor.Invoke(System.EventHandler,System.Object,System.EventArgs)">
            <summary>
            Synchronously executes the <paramref name="eventHandler"/> on this <see cref="T:Ez.Threading.ThreadMethodExecutor"/>.
            </summary>
            <param name="eventHandler">A <see cref="T:System.EventHandler"/> delegate that contains a method to call in this <see cref="T:Ez.Threading.ThreadMethodExecutor"/>.</param>
            <param name="sender">The sender parameter of <see cref="T:System.EventHandler"/> to pass to the given method.</param>
            <param name="args">The e parameter of the <see cref="T:System.EventHandler"/> to pass to the given method.</param>
        </member>
        <member name="M:Ez.Threading.ThreadMethodExecutor.Invoke(System.Threading.WaitCallback,System.Object)">
            <summary>
            Synchronously executes the <paramref name="waitCallback"/> on this <see cref="T:Ez.Threading.ThreadMethodExecutor"/>.
            </summary>
            <param name="waitCallback">A <see cref="T:System.Threading.WaitCallback"/> delegate that contains a method to call in this <see cref="T:Ez.Threading.ThreadMethodExecutor"/>.</param>
            <param name="state">The state parameter of <see cref="T:System.Threading.WaitCallback"/> to pass to the given method.</param>
        </member>
        <member name="M:Ez.Threading.ThreadMethodExecutor.Invoke(System.Delegate,System.Object[])">
            <summary>
            Synchronously executes the <paramref name="method"/> on this <see cref="T:Ez.Threading.ThreadMethodExecutor"/>.
            </summary>
            <param name="method">A <see cref="T:System.Delegate"/> that contains a method to call in this <see cref="T:Ez.Threading.ThreadMethodExecutor"/>.</param>
            <param name="args">An array of type <see cref="T:System.Object"/> that represents the arguments to pass to the given method.</param>
            <returns>An <see cref="T:System.Object"/> that represents the return value from the delegate being invoked, or <see langword="null"/> 
            if the delegate has no return value</returns>
        </member>
        <member name="M:Ez.Threading.ThreadMethodExecutor.Invoke``1(System.Func{``0})">
            <summary>
            Synchronously executes the <paramref name="func"/> on this <see cref="T:Ez.Threading.ThreadMethodExecutor"/>.
            </summary>
            <typeparam name="T">The type of return value.</typeparam>
            <param name="func">A <see cref="T:System.Func`1"/> delegate that contains a method to call in this <see cref="T:Ez.Threading.ThreadMethodExecutor"/>.</param>
            <returns>The return value from the delegate being invoked.</returns>
        </member>
        <member name="M:Ez.Threading.ThreadMethodExecutor.Invoke``1(System.Delegate,System.Object[])">
            <summary>
            Synchronously executes the <paramref name="method"/> on this <see cref="T:Ez.Threading.ThreadMethodExecutor"/>.
            </summary>
            <typeparam name="T">The type of return value.</typeparam>
            <param name="method">A <see cref="T:System.Delegate"/> that contains a method to call in this <see cref="T:Ez.Threading.ThreadMethodExecutor"/>.</param>
            <param name="args">An array of type <see cref="T:System.Object"/> that represents the arguments to pass to the given method.</param>
            <returns>The return value from the delegate being invoked, or <see langword="null"/> if the delegate has no return value.</returns>
        </member>
        <member name="M:Ez.Threading.ThreadMethodExecutor.BeginInvoke(System.Action)">
            <summary>
            Asynchronously executes the <see cref="T:System.Action"/> delegate on the thread that created this object.
            </summary>
            <param name="action">A <see cref="T:System.Action"/> that contains a method to call in this <see cref="T:Ez.Threading.ThreadMethodExecutor"/>.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> interface that represents the asynchronous operation started by calling this method.</returns>
        </member>
        <member name="M:Ez.Threading.ThreadMethodExecutor.BeginInvoke(System.Delegate,System.Object[])">
            <summary>
            Asynchronously executes the <see cref="T:System.Delegate"/> on the thread that created this object.
            </summary>
            <param name="method">A <see cref="T:System.Delegate"/> that contains a method to call in this <see cref="T:Ez.Threading.ThreadMethodExecutor"/>.</param>
            <param name="args">An array of type <see cref="T:System.Object"/> that represents the arguments to pass to the given method.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> interface that represents the asynchronous operation started by calling this method.</returns>
        </member>
        <member name="M:Ez.Threading.ThreadMethodExecutor.EndInvoke(System.IAsyncResult)">
            <summary>
            Waits until the process started by calling <see cref="M:Ez.Threading.ThreadMethodExecutor.BeginInvoke(System.Action)"/> or  <see cref="M:Ez.Threading.ThreadMethodExecutor.BeginInvoke(System.Delegate,System.Object[])"/> completes, 
            and then returns the value generated by the process.
            </summary>
            <param name="result">An <see cref="T:System.IAsyncResult"/> interface that represents the asynchronous operation started by calling 
            <see cref="M:Ez.Threading.ThreadMethodExecutor.BeginInvoke(System.Action)"/> or <see cref="M:Ez.Threading.ThreadMethodExecutor.BeginInvoke(System.Delegate,System.Object[])"/>.</param>
            <returns>An <see cref="T:System.Object"/> that represents the return value generated by the asynchronous operation.</returns>
        </member>
        <member name="M:Ez.Threading.ThreadMethodExecutor.EndInvoke``1(System.IAsyncResult)">
            <summary>
            Waits until the process started by calling <see cref="M:Ez.Threading.ThreadMethodExecutor.BeginInvoke(System.Action)"/> or  <see cref="M:Ez.Threading.ThreadMethodExecutor.BeginInvoke(System.Delegate,System.Object[])"/> completes, 
            and then returns the value generated by the process.
            </summary>
            <typeparam name="T">The type of return value.</typeparam>
            <param name="result">n <see cref="T:System.IAsyncResult"/> interface that represents the asynchronous operation started by calling 
            <see cref="M:Ez.Threading.ThreadMethodExecutor.BeginInvoke(System.Action)"/> or <see cref="M:Ez.Threading.ThreadMethodExecutor.BeginInvoke(System.Delegate,System.Object[])"/>.</param>
            <returns>An T value that represents the return value generated by the asynchronous operation.</returns>
        </member>
        <member name="M:Ez.Threading.ThreadMethodExecutor.Dispose">
            <summary>
            Release all resources used by this instance.
            </summary>
        </member>
    </members>
</doc>
